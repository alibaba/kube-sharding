// Code generated by MockGen. DO NOT EDIT.
// Source: proxy/apiset/carbonjob.go

// Package apiset is a generated GoMock package.
package apiset

import (
	reflect "reflect"

	gomock "github.com/golang/mock/gomock"
	v1 "github.com/alibaba/kube-sharding/pkg/apis/carbon/v1"
)

// MockCarbonJobAPIs is a mock of CarbonJobAPIs interface.
type MockCarbonJobAPIs struct {
	ctrl     *gomock.Controller
	recorder *MockCarbonJobAPIsMockRecorder
}

// MockCarbonJobAPIsMockRecorder is the mock recorder for MockCarbonJobAPIs.
type MockCarbonJobAPIsMockRecorder struct {
	mock *MockCarbonJobAPIs
}

// NewMockCarbonJobAPIs creates a new mock instance.
func NewMockCarbonJobAPIs(ctrl *gomock.Controller) *MockCarbonJobAPIs {
	mock := &MockCarbonJobAPIs{ctrl: ctrl}
	mock.recorder = &MockCarbonJobAPIsMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockCarbonJobAPIs) EXPECT() *MockCarbonJobAPIsMockRecorder {
	return m.recorder
}

// CreateCarbonJob mocks base method.
func (m *MockCarbonJobAPIs) CreateCarbonJob(cb *v1.CarbonJob) (*v1.CarbonJob, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateCarbonJob", cb)
	ret0, _ := ret[0].(*v1.CarbonJob)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateCarbonJob indicates an expected call of CreateCarbonJob.
func (mr *MockCarbonJobAPIsMockRecorder) CreateCarbonJob(cb interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateCarbonJob", reflect.TypeOf((*MockCarbonJobAPIs)(nil).CreateCarbonJob), cb)
}

// DeleteCarbonJob mocks base method.
func (m *MockCarbonJobAPIs) DeleteCarbonJob(cb *v1.CarbonJob) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteCarbonJob", cb)
	ret0, _ := ret[0].(error)
	return ret0
}

// DeleteCarbonJob indicates an expected call of DeleteCarbonJob.
func (mr *MockCarbonJobAPIsMockRecorder) DeleteCarbonJob(cb interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteCarbonJob", reflect.TypeOf((*MockCarbonJobAPIs)(nil).DeleteCarbonJob), cb)
}

// GetCarbonJob mocks base method.
func (m *MockCarbonJobAPIs) GetCarbonJob(namespace, name string) (*v1.CarbonJob, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetCarbonJob", namespace, name)
	ret0, _ := ret[0].(*v1.CarbonJob)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetCarbonJob indicates an expected call of GetCarbonJob.
func (mr *MockCarbonJobAPIsMockRecorder) GetCarbonJob(namespace, name interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetCarbonJob", reflect.TypeOf((*MockCarbonJobAPIs)(nil).GetCarbonJob), namespace, name)
}

// GetCarbonJobs mocks base method.
func (m *MockCarbonJobAPIs) GetCarbonJobs(namespace, appName string) ([]v1.CarbonJob, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetCarbonJobs", namespace, appName)
	ret0, _ := ret[0].([]v1.CarbonJob)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetCarbonJobs indicates an expected call of GetCarbonJobs.
func (mr *MockCarbonJobAPIsMockRecorder) GetCarbonJobs(namespace, appName interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetCarbonJobs", reflect.TypeOf((*MockCarbonJobAPIs)(nil).GetCarbonJobs), namespace, appName)
}

// UpdateCarbonJob mocks base method.
func (m *MockCarbonJobAPIs) UpdateCarbonJob(cb *v1.CarbonJob) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateCarbonJob", cb)
	ret0, _ := ret[0].(error)
	return ret0
}

// UpdateCarbonJob indicates an expected call of UpdateCarbonJob.
func (mr *MockCarbonJobAPIsMockRecorder) UpdateCarbonJob(cb interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateCarbonJob", reflect.TypeOf((*MockCarbonJobAPIs)(nil).UpdateCarbonJob), cb)
}
