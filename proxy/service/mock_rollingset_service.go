// Code generated by MockGen. DO NOT EDIT.
// Source: proxy/service/rollingset_service.go

// Package service is a generated GoMock package.
package service

import (
	reflect "reflect"

	gomock "github.com/golang/mock/gomock"
	v1 "github.com/alibaba/kube-sharding/pkg/apis/carbon/v1"
)

// MockRollingsetService is a mock of RollingsetService interface.
type MockRollingsetService struct {
	ctrl     *gomock.Controller
	recorder *MockRollingsetServiceMockRecorder
}

// MockRollingsetServiceMockRecorder is the mock recorder for MockRollingsetService.
type MockRollingsetServiceMockRecorder struct {
	mock *MockRollingsetService
}

// NewMockRollingsetService creates a new mock instance.
func NewMockRollingsetService(ctrl *gomock.Controller) *MockRollingsetService {
	mock := &MockRollingsetService{ctrl: ctrl}
	mock.recorder = &MockRollingsetServiceMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockRollingsetService) EXPECT() *MockRollingsetServiceMockRecorder {
	return m.recorder
}

// Create mocks base method.
func (m *MockRollingsetService) Create(location *Location, rs *v1.RollingSet) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Create", location, rs)
	ret0, _ := ret[0].(error)
	return ret0
}

// Create indicates an expected call of Create.
func (mr *MockRollingsetServiceMockRecorder) Create(location, rs interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Create", reflect.TypeOf((*MockRollingsetService)(nil).Create), location, rs)
}

// Delete mocks base method.
func (m *MockRollingsetService) Delete(location *Location) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Delete", location)
	ret0, _ := ret[0].(error)
	return ret0
}

// Delete indicates an expected call of Delete.
func (mr *MockRollingsetServiceMockRecorder) Delete(location interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Delete", reflect.TypeOf((*MockRollingsetService)(nil).Delete), location)
}

// Get mocks base method.
func (m *MockRollingsetService) Get(location *Location) (*v1.RollingSet, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Get", location)
	ret0, _ := ret[0].(*v1.RollingSet)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Get indicates an expected call of Get.
func (mr *MockRollingsetServiceMockRecorder) Get(location interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Get", reflect.TypeOf((*MockRollingsetService)(nil).Get), location)
}

// GetReplicaStatus mocks base method.
func (m *MockRollingsetService) GetReplicaStatus(location *Location) (*v1.ReplicaStatus, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetReplicaStatus", location)
	ret0, _ := ret[0].(*v1.ReplicaStatus)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetReplicaStatus indicates an expected call of GetReplicaStatus.
func (mr *MockRollingsetServiceMockRecorder) GetReplicaStatus(location interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetReplicaStatus", reflect.TypeOf((*MockRollingsetService)(nil).GetReplicaStatus), location)
}

// GetSubrsInfo mocks base method.
func (m *MockRollingsetService) GetSubrsInfo(rs *v1.RollingSet) (v1.SubrsMetas, v1.SubrsVersionStatusMap, map[string]*int32, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetSubrsInfo", rs)
	ret0, _ := ret[0].(v1.SubrsMetas)
	ret1, _ := ret[1].(v1.SubrsVersionStatusMap)
	ret2, _ := ret[2].(map[string]*int32)
	ret3, _ := ret[3].(error)
	return ret0, ret1, ret2, ret3
}

// GetSubrsInfo indicates an expected call of GetSubrsInfo.
func (mr *MockRollingsetServiceMockRecorder) GetSubrsInfo(rs interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetSubrsInfo", reflect.TypeOf((*MockRollingsetService)(nil).GetSubrsInfo), rs)
}

// ListReplicaStatus mocks base method.
func (m *MockRollingsetService) ListReplicaStatus(location *Location) ([]*v1.ReplicaStatus, map[string]string, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListReplicaStatus", location)
	ret0, _ := ret[0].([]*v1.ReplicaStatus)
	ret1, _ := ret[1].(map[string]string)
	ret2, _ := ret[2].(error)
	return ret0, ret1, ret2
}

// ListReplicaStatus indicates an expected call of ListReplicaStatus.
func (mr *MockRollingsetServiceMockRecorder) ListReplicaStatus(location interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListReplicaStatus", reflect.TypeOf((*MockRollingsetService)(nil).ListReplicaStatus), location)
}

// Patch mocks base method.
func (m *MockRollingsetService) Patch(location *Location, patch *v1.RollingsetPatch) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Patch", location, patch)
	ret0, _ := ret[0].(error)
	return ret0
}

// Patch indicates an expected call of Patch.
func (mr *MockRollingsetServiceMockRecorder) Patch(location, patch interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Patch", reflect.TypeOf((*MockRollingsetService)(nil).Patch), location, patch)
}

// ReclaimWorkerNode mocks base method.
func (m *MockRollingsetService) ReclaimWorkerNode(location *Location) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ReclaimWorkerNode", location)
	ret0, _ := ret[0].(error)
	return ret0
}

// ReclaimWorkerNode indicates an expected call of ReclaimWorkerNode.
func (mr *MockRollingsetServiceMockRecorder) ReclaimWorkerNode(location interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ReclaimWorkerNode", reflect.TypeOf((*MockRollingsetService)(nil).ReclaimWorkerNode), location)
}

// SyncSubrs mocks base method.
func (m *MockRollingsetService) SyncSubrs(location *Location, subrsMap map[string]*v1.Subrs, subrsEnable bool) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SyncSubrs", location, subrsMap, subrsEnable)
	ret0, _ := ret[0].(error)
	return ret0
}

// SyncSubrs indicates an expected call of SyncSubrs.
func (mr *MockRollingsetServiceMockRecorder) SyncSubrs(location, subrsMap, subrsEnable interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SyncSubrs", reflect.TypeOf((*MockRollingsetService)(nil).SyncSubrs), location, subrsMap, subrsEnable)
}

// Update mocks base method.
func (m *MockRollingsetService) Update(location *Location, rs *v1.RollingSet) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Update", location, rs)
	ret0, _ := ret[0].(error)
	return ret0
}

// Update indicates an expected call of Update.
func (mr *MockRollingsetServiceMockRecorder) Update(location, rs interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Update", reflect.TypeOf((*MockRollingsetService)(nil).Update), location, rs)
}
