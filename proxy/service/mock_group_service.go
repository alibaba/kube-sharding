// Code generated by MockGen. DO NOT EDIT.
// Source: proxy/service/group_service.go

// Package service is a generated GoMock package.
package service

import (
	reflect "reflect"

	gomock "github.com/golang/mock/gomock"
	v1 "github.com/alibaba/kube-sharding/pkg/apis/carbon/v1"
	typespec "github.com/alibaba/kube-sharding/pkg/apiserver-client/typespec"
	carbon "github.com/alibaba/kube-sharding/pkg/apiserver-client/typespec/carbon"
)

// MockGroupService is a mock of GroupService interface.
type MockGroupService struct {
	ctrl     *gomock.Controller
	recorder *MockGroupServiceMockRecorder
}

// MockGroupServiceMockRecorder is the mock recorder for MockGroupService.
type MockGroupServiceMockRecorder struct {
	mock *MockGroupService
}

// NewMockGroupService creates a new mock instance.
func NewMockGroupService(ctrl *gomock.Controller) *MockGroupService {
	mock := &MockGroupService{ctrl: ctrl}
	mock.recorder = &MockGroupServiceMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockGroupService) EXPECT() *MockGroupServiceMockRecorder {
	return m.recorder
}

// DeleteGroup mocks base method.
func (m *MockGroupService) DeleteGroup(appName, schType, groupID string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteGroup", appName, schType, groupID)
	ret0, _ := ret[0].(error)
	return ret0
}

// DeleteGroup indicates an expected call of DeleteGroup.
func (mr *MockGroupServiceMockRecorder) DeleteGroup(appName, schType, groupID interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteGroup", reflect.TypeOf((*MockGroupService)(nil).DeleteGroup), appName, schType, groupID)
}

// DisableScale mocks base method.
func (m *MockGroupService) DisableScale(appName, groupID, zoneName string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DisableScale", appName, groupID, zoneName)
	ret0, _ := ret[0].(error)
	return ret0
}

// DisableScale indicates an expected call of DisableScale.
func (mr *MockGroupServiceMockRecorder) DisableScale(appName, groupID, zoneName interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DisableScale", reflect.TypeOf((*MockGroupService)(nil).DisableScale), appName, groupID, zoneName)
}

// GetAppGroup mocks base method.
func (m *MockGroupService) GetAppGroup(appName, schType string) ([]*carbon.GroupStatus, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetAppGroup", appName, schType)
	ret0, _ := ret[0].([]*carbon.GroupStatus)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetAppGroup indicates an expected call of GetAppGroup.
func (mr *MockGroupServiceMockRecorder) GetAppGroup(appName, schType interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetAppGroup", reflect.TypeOf((*MockGroupService)(nil).GetAppGroup), appName, schType)
}

// GetGroup mocks base method.
func (m *MockGroupService) GetGroup(appName, schType string, groupIds []string) ([]*carbon.GroupStatus, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetGroup", appName, schType, groupIds)
	ret0, _ := ret[0].([]*carbon.GroupStatus)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetGroup indicates an expected call of GetGroup.
func (mr *MockGroupServiceMockRecorder) GetGroup(appName, schType, groupIds interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetGroup", reflect.TypeOf((*MockGroupService)(nil).GetGroup), appName, schType, groupIds)
}

// NewGroup mocks base method.
func (m *MockGroupService) NewGroup(appName string, schOpts *SchOptions, groupPlan *typespec.GroupPlan) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "NewGroup", appName, schOpts, groupPlan)
	ret0, _ := ret[0].(error)
	return ret0
}

// NewGroup indicates an expected call of NewGroup.
func (mr *MockGroupServiceMockRecorder) NewGroup(appName, schOpts, groupPlan interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "NewGroup", reflect.TypeOf((*MockGroupService)(nil).NewGroup), appName, schOpts, groupPlan)
}

// ReclaimWorkerNodesOnEviction mocks base method.
func (m *MockGroupService) ReclaimWorkerNodesOnEviction(appName string, req *ReclaimWorkerNodeRequest) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ReclaimWorkerNodesOnEviction", appName, req)
	ret0, _ := ret[0].(error)
	return ret0
}

// ReclaimWorkerNodesOnEviction indicates an expected call of ReclaimWorkerNodesOnEviction.
func (mr *MockGroupServiceMockRecorder) ReclaimWorkerNodesOnEviction(appName, req interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ReclaimWorkerNodesOnEviction", reflect.TypeOf((*MockGroupService)(nil).ReclaimWorkerNodesOnEviction), appName, req)
}

// ScaleGroup mocks base method.
func (m *MockGroupService) ScaleGroup(appName, groupID, zoneName string, scalePlan *v1.ScaleSchedulePlan) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ScaleGroup", appName, groupID, zoneName, scalePlan)
	ret0, _ := ret[0].(error)
	return ret0
}

// ScaleGroup indicates an expected call of ScaleGroup.
func (mr *MockGroupServiceMockRecorder) ScaleGroup(appName, groupID, zoneName, scalePlan interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ScaleGroup", reflect.TypeOf((*MockGroupService)(nil).ScaleGroup), appName, groupID, zoneName, scalePlan)
}

// SetGroup mocks base method.
func (m *MockGroupService) SetGroup(appName, groupID string, schOpts *SchOptions, groupPlan *typespec.GroupPlan) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SetGroup", appName, groupID, schOpts, groupPlan)
	ret0, _ := ret[0].(error)
	return ret0
}

// SetGroup indicates an expected call of SetGroup.
func (mr *MockGroupServiceMockRecorder) SetGroup(appName, groupID, schOpts, groupPlan interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SetGroup", reflect.TypeOf((*MockGroupService)(nil).SetGroup), appName, groupID, schOpts, groupPlan)
}

// SetGroups mocks base method.
func (m *MockGroupService) SetGroups(appName string, schOpts *SchOptions, groupPlans map[string]*typespec.GroupPlan) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SetGroups", appName, schOpts, groupPlans)
	ret0, _ := ret[0].(error)
	return ret0
}

// SetGroups indicates an expected call of SetGroups.
func (mr *MockGroupServiceMockRecorder) SetGroups(appName, schOpts, groupPlans interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SetGroups", reflect.TypeOf((*MockGroupService)(nil).SetGroups), appName, schOpts, groupPlans)
}
