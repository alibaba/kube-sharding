// Code generated by MockGen. DO NOT EDIT.
// Source: proxy/service/resource_manager.go

// Package service is a generated GoMock package.
package service

import (
	reflect "reflect"

	gomock "github.com/golang/mock/gomock"
	v1 "github.com/alibaba/kube-sharding/pkg/apis/carbon/v1"
	apiset "github.com/alibaba/kube-sharding/proxy/apiset"
	v10 "k8s.io/api/core/v1"
	labels "k8s.io/apimachinery/pkg/labels"
)

// MockresourceManager is a mock of resourceManager interface.
type MockresourceManager struct {
	ctrl     *gomock.Controller
	recorder *MockresourceManagerMockRecorder
}

// MockresourceManagerMockRecorder is the mock recorder for MockresourceManager.
type MockresourceManagerMockRecorder struct {
	mock *MockresourceManager
}

// NewMockresourceManager creates a new mock instance.
func NewMockresourceManager(ctrl *gomock.Controller) *MockresourceManager {
	mock := &MockresourceManager{ctrl: ctrl}
	mock.recorder = &MockresourceManagerMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockresourceManager) EXPECT() *MockresourceManagerMockRecorder {
	return m.recorder
}

// checkNamespace mocks base method.
func (m *MockresourceManager) checkNamespace(appName string, namespaces []string) ([]string, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "checkNamespace", appName, namespaces)
	ret0, _ := ret[0].([]string)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// checkNamespace indicates an expected call of checkNamespace.
func (mr *MockresourceManagerMockRecorder) checkNamespace(appName, namespaces interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "checkNamespace", reflect.TypeOf((*MockresourceManager)(nil).checkNamespace), appName, namespaces)
}

// createNamespace mocks base method.
func (m *MockresourceManager) createNamespace(namespace string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "createNamespace", namespace)
	ret0, _ := ret[0].(error)
	return ret0
}

// createNamespace indicates an expected call of createNamespace.
func (mr *MockresourceManagerMockRecorder) createNamespace(namespace interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "createNamespace", reflect.TypeOf((*MockresourceManager)(nil).createNamespace), namespace)
}

// createRollingset mocks base method.
func (m *MockresourceManager) createRollingset(namespace string, rollingset *v1.RollingSet) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "createRollingset", namespace, rollingset)
	ret0, _ := ret[0].(error)
	return ret0
}

// createRollingset indicates an expected call of createRollingset.
func (mr *MockresourceManagerMockRecorder) createRollingset(namespace, rollingset interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "createRollingset", reflect.TypeOf((*MockresourceManager)(nil).createRollingset), namespace, rollingset)
}

// deleteRollingSet mocks base method.
func (m *MockresourceManager) deleteRollingSet(namespace, name string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "deleteRollingSet", namespace, name)
	ret0, _ := ret[0].(error)
	return ret0
}

// deleteRollingSet indicates an expected call of deleteRollingSet.
func (mr *MockresourceManagerMockRecorder) deleteRollingSet(namespace, name interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "deleteRollingSet", reflect.TypeOf((*MockresourceManager)(nil).deleteRollingSet), namespace, name)
}

// deleteService mocks base method.
func (m *MockresourceManager) deleteService(namespace, name string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "deleteService", namespace, name)
	ret0, _ := ret[0].(error)
	return ret0
}

// deleteService indicates an expected call of deleteService.
func (mr *MockresourceManagerMockRecorder) deleteService(namespace, name interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "deleteService", reflect.TypeOf((*MockresourceManager)(nil).deleteService), namespace, name)
}

// deleteShardGroup mocks base method.
func (m *MockresourceManager) deleteShardGroup(namespace, name string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "deleteShardGroup", namespace, name)
	ret0, _ := ret[0].(error)
	return ret0
}

// deleteShardGroup indicates an expected call of deleteShardGroup.
func (mr *MockresourceManagerMockRecorder) deleteShardGroup(namespace, name interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "deleteShardGroup", reflect.TypeOf((*MockresourceManager)(nil).deleteShardGroup), namespace, name)
}

// getCarbonJobAPIs mocks base method.
func (m *MockresourceManager) getCarbonJobAPIs() apiset.CarbonJobAPIs {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "getCarbonJobAPIs")
	ret0, _ := ret[0].(apiset.CarbonJobAPIs)
	return ret0
}

// getCarbonJobAPIs indicates an expected call of getCarbonJobAPIs.
func (mr *MockresourceManagerMockRecorder) getCarbonJobAPIs() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "getCarbonJobAPIs", reflect.TypeOf((*MockresourceManager)(nil).getCarbonJobAPIs))
}

// getGangRollingSetName mocks base method.
func (m *MockresourceManager) getGangRollingSetName(appName, namespace, groupID string) (string, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "getGangRollingSetName", appName, namespace, groupID)
	ret0, _ := ret[0].(string)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// getGangRollingSetName indicates an expected call of getGangRollingSetName.
func (mr *MockresourceManagerMockRecorder) getGangRollingSetName(appName, namespace, groupID interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "getGangRollingSetName", reflect.TypeOf((*MockresourceManager)(nil).getGangRollingSetName), appName, namespace, groupID)
}

// getRollingSetName mocks base method.
func (m *MockresourceManager) getRollingSetName(appName, namespace, groupID string) (string, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "getRollingSetName", appName, namespace, groupID)
	ret0, _ := ret[0].(string)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// getRollingSetName indicates an expected call of getRollingSetName.
func (mr *MockresourceManagerMockRecorder) getRollingSetName(appName, namespace, groupID interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "getRollingSetName", reflect.TypeOf((*MockresourceManager)(nil).getRollingSetName), appName, namespace, groupID)
}

// getRollingset mocks base method.
func (m *MockresourceManager) getRollingset(namespace, name string) (*v1.RollingSet, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "getRollingset", namespace, name)
	ret0, _ := ret[0].(*v1.RollingSet)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// getRollingset indicates an expected call of getRollingset.
func (mr *MockresourceManagerMockRecorder) getRollingset(namespace, name interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "getRollingset", reflect.TypeOf((*MockresourceManager)(nil).getRollingset), namespace, name)
}

// getRollingsetByGroupIDs mocks base method.
func (m *MockresourceManager) getRollingsetByGroupIDs(appName string, groupIds []string, single bool) ([]v1.RollingSet, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "getRollingsetByGroupIDs", appName, groupIds, single)
	ret0, _ := ret[0].([]v1.RollingSet)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// getRollingsetByGroupIDs indicates an expected call of getRollingsetByGroupIDs.
func (mr *MockresourceManagerMockRecorder) getRollingsetByGroupIDs(appName, groupIds, single interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "getRollingsetByGroupIDs", reflect.TypeOf((*MockresourceManager)(nil).getRollingsetByGroupIDs), appName, groupIds, single)
}

// getRollingsetServices mocks base method.
func (m *MockresourceManager) getRollingsetServices(appName, namespace, rollingsetName string) ([]v1.ServicePublisher, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "getRollingsetServices", appName, namespace, rollingsetName)
	ret0, _ := ret[0].([]v1.ServicePublisher)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// getRollingsetServices indicates an expected call of getRollingsetServices.
func (mr *MockresourceManagerMockRecorder) getRollingsetServices(appName, namespace, rollingsetName interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "getRollingsetServices", reflect.TypeOf((*MockresourceManager)(nil).getRollingsetServices), appName, namespace, rollingsetName)
}

// getServiceByGroupname mocks base method.
func (m *MockresourceManager) getServiceByGroupname(appName, namespace, groupName string) ([]v1.ServicePublisher, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "getServiceByGroupname", appName, namespace, groupName)
	ret0, _ := ret[0].([]v1.ServicePublisher)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// getServiceByGroupname indicates an expected call of getServiceByGroupname.
func (mr *MockresourceManagerMockRecorder) getServiceByGroupname(appName, namespace, groupName interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "getServiceByGroupname", reflect.TypeOf((*MockresourceManager)(nil).getServiceByGroupname), appName, namespace, groupName)
}

// getShardGroupName mocks base method.
func (m *MockresourceManager) getShardGroupName(appName, namespace, groupID string) (string, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "getShardGroupName", appName, namespace, groupID)
	ret0, _ := ret[0].(string)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// getShardGroupName indicates an expected call of getShardGroupName.
func (mr *MockresourceManagerMockRecorder) getShardGroupName(appName, namespace, groupID interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "getShardGroupName", reflect.TypeOf((*MockresourceManager)(nil).getShardGroupName), appName, namespace, groupID)
}

// getTargetNamespace mocks base method.
func (m *MockresourceManager) getTargetNamespace(appName string) (string, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "getTargetNamespace", appName)
	ret0, _ := ret[0].(string)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// getTargetNamespace indicates an expected call of getTargetNamespace.
func (mr *MockresourceManagerMockRecorder) getTargetNamespace(appName interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "getTargetNamespace", reflect.TypeOf((*MockresourceManager)(nil).getTargetNamespace), appName)
}

// getWorkerEvictionAPIs mocks base method.
func (m *MockresourceManager) getWorkerEvictionAPIs() apiset.WorkerEvictionAPIs {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "getWorkerEvictionAPIs")
	ret0, _ := ret[0].(apiset.WorkerEvictionAPIs)
	return ret0
}

// getWorkerEvictionAPIs indicates an expected call of getWorkerEvictionAPIs.
func (mr *MockresourceManagerMockRecorder) getWorkerEvictionAPIs() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "getWorkerEvictionAPIs", reflect.TypeOf((*MockresourceManager)(nil).getWorkerEvictionAPIs))
}

// getWorkerNode mocks base method.
func (m *MockresourceManager) getWorkerNode(namespace, name string) (*v1.WorkerNode, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "getWorkerNode", namespace, name)
	ret0, _ := ret[0].(*v1.WorkerNode)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// getWorkerNode indicates an expected call of getWorkerNode.
func (mr *MockresourceManagerMockRecorder) getWorkerNode(namespace, name interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "getWorkerNode", reflect.TypeOf((*MockresourceManager)(nil).getWorkerNode), namespace, name)
}

// listGroup mocks base method.
func (m *MockresourceManager) listGroup(appName, groupID string) ([]v1.ShardGroup, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "listGroup", appName, groupID)
	ret0, _ := ret[0].([]v1.ShardGroup)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// listGroup indicates an expected call of listGroup.
func (mr *MockresourceManagerMockRecorder) listGroup(appName, groupID interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "listGroup", reflect.TypeOf((*MockresourceManager)(nil).listGroup), appName, groupID)
}

// listPod mocks base method.
func (m *MockresourceManager) listPod(namespace string, selector labels.Selector) ([]v10.Pod, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "listPod", namespace, selector)
	ret0, _ := ret[0].([]v10.Pod)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// listPod indicates an expected call of listPod.
func (mr *MockresourceManagerMockRecorder) listPod(namespace, selector interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "listPod", reflect.TypeOf((*MockresourceManager)(nil).listPod), namespace, selector)
}

// listRollingSet mocks base method.
func (m *MockresourceManager) listRollingSet(appName, groupID string, single bool) ([]v1.RollingSet, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "listRollingSet", appName, groupID, single)
	ret0, _ := ret[0].([]v1.RollingSet)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// listRollingSet indicates an expected call of listRollingSet.
func (mr *MockresourceManagerMockRecorder) listRollingSet(appName, groupID, single interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "listRollingSet", reflect.TypeOf((*MockresourceManager)(nil).listRollingSet), appName, groupID, single)
}

// listRollingsetBySelector mocks base method.
func (m *MockresourceManager) listRollingsetBySelector(namespace string, selector labels.Selector) ([]v1.RollingSet, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "listRollingsetBySelector", namespace, selector)
	ret0, _ := ret[0].([]v1.RollingSet)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// listRollingsetBySelector indicates an expected call of listRollingsetBySelector.
func (mr *MockresourceManagerMockRecorder) listRollingsetBySelector(namespace, selector interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "listRollingsetBySelector", reflect.TypeOf((*MockresourceManager)(nil).listRollingsetBySelector), namespace, selector)
}

// listWorkerNode mocks base method.
func (m *MockresourceManager) listWorkerNode(namespace string, selector labels.Selector) ([]v1.WorkerNode, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "listWorkerNode", namespace, selector)
	ret0, _ := ret[0].([]v1.WorkerNode)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// listWorkerNode indicates an expected call of listWorkerNode.
func (mr *MockresourceManagerMockRecorder) listWorkerNode(namespace, selector interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "listWorkerNode", reflect.TypeOf((*MockresourceManager)(nil).listWorkerNode), namespace, selector)
}

// listZoneRollingSet mocks base method.
func (m *MockresourceManager) listZoneRollingSet(appName, groupID, zoneName string) ([]*v1.RollingSet, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "listZoneRollingSet", appName, groupID, zoneName)
	ret0, _ := ret[0].([]*v1.RollingSet)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// listZoneRollingSet indicates an expected call of listZoneRollingSet.
func (mr *MockresourceManagerMockRecorder) listZoneRollingSet(appName, groupID, zoneName interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "listZoneRollingSet", reflect.TypeOf((*MockresourceManager)(nil).listZoneRollingSet), appName, groupID, zoneName)
}

// syncRollingset mocks base method.
func (m *MockresourceManager) syncRollingset(namespace string, rollingset *v1.RollingSet) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "syncRollingset", namespace, rollingset)
	ret0, _ := ret[0].(error)
	return ret0
}

// syncRollingset indicates an expected call of syncRollingset.
func (mr *MockresourceManagerMockRecorder) syncRollingset(namespace, rollingset interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "syncRollingset", reflect.TypeOf((*MockresourceManager)(nil).syncRollingset), namespace, rollingset)
}

// syncServices mocks base method.
func (m *MockresourceManager) syncServices(namespace string, oldServices []v1.ServicePublisher, services []*v1.ServicePublisher) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "syncServices", namespace, oldServices, services)
	ret0, _ := ret[0].(error)
	return ret0
}

// syncServices indicates an expected call of syncServices.
func (mr *MockresourceManagerMockRecorder) syncServices(namespace, oldServices, services interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "syncServices", reflect.TypeOf((*MockresourceManager)(nil).syncServices), namespace, oldServices, services)
}

// syncShardGroup mocks base method.
func (m *MockresourceManager) syncShardGroup(namespace string, shardGroup *v1.ShardGroup) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "syncShardGroup", namespace, shardGroup)
	ret0, _ := ret[0].(error)
	return ret0
}

// syncShardGroup indicates an expected call of syncShardGroup.
func (mr *MockresourceManagerMockRecorder) syncShardGroup(namespace, shardGroup interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "syncShardGroup", reflect.TypeOf((*MockresourceManager)(nil).syncShardGroup), namespace, shardGroup)
}

// syncWorkerNode mocks base method.
func (m *MockresourceManager) syncWorkerNode(namespace string, workerNode *v1.WorkerNode, immutableNode bool) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "syncWorkerNode", namespace, workerNode, immutableNode)
	ret0, _ := ret[0].(error)
	return ret0
}

// syncWorkerNode indicates an expected call of syncWorkerNode.
func (mr *MockresourceManagerMockRecorder) syncWorkerNode(namespace, workerNode, immutableNode interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "syncWorkerNode", reflect.TypeOf((*MockresourceManager)(nil).syncWorkerNode), namespace, workerNode, immutableNode)
}

// updateRollingset mocks base method.
func (m *MockresourceManager) updateRollingset(namespace string, rollingset *v1.RollingSet) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "updateRollingset", namespace, rollingset)
	ret0, _ := ret[0].(error)
	return ret0
}

// updateRollingset indicates an expected call of updateRollingset.
func (mr *MockresourceManagerMockRecorder) updateRollingset(namespace, rollingset interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "updateRollingset", reflect.TypeOf((*MockresourceManager)(nil).updateRollingset), namespace, rollingset)
}
