syntax = "proto2";
import "Common.proto";
package hippo;

message RoutePolicy {
    optional string policyId = 1;
    optional string routeLevel = 2 [default = "APP"];
    optional string description = 3;
}

// federation
message OperateRoutePolicyRequest {
    optional Operator op = 1;
    repeated RoutePolicy policies = 2;
}
message OperateRoutePolicyResponse {
    repeated RoutePolicy policies = 1;
    optional ErrorInfo errorInfo = 2;
}

message RoutePolicyMapping {
    optional string applicationId = 1;
    optional string rolePrefix = 2;
    optional string policyId = 3;
}

message OperatePolicyMappingRequest {
    optional Operator op = 1;
    repeated RoutePolicyMapping mappings = 2;
}

message OperatePolicyMappingResponse {
    repeated RoutePolicyMapping mappings = 1;
    optional ErrorInfo errorInfo = 2;
}

message AddClusterRequest {
    optional ClusterDescription clusterDesc = 1;
}

message DelClusterRequest {
    optional string cluster = 1;
}

message UpdateClusterRequest {
    optional ClusterDescription clusterDesc = 1;
}

message GetClusterRequest {
    repeated string clusters = 1;
}

message StartClusterRequest {
    optional string cluster = 1;
}

message StopClusterRequest {
    optional string cluster = 1;
}

message OperateClusterRequest {
    optional string cluster = 1;
    optional string state = 2;
}

message AppFedStat {
    optional string appId = 1;
    optional int32 totalCnt = 2;
    optional int32 pendingCnt = 3;
}

message ClusterStatus {
    optional string clusterId = 1;
    optional ClusterDescription desc = 2;
    optional int32 k8sPodCnt = 3 [default = 0];
    optional int32 hippoPodCnt = 4 [default = 0];
    repeated AppFedStat hippoStats = 5;
    repeated AppFedStat k8sStats = 6;
}

message GetClusterResponse {
    repeated ClusterStatus clusters = 1;
    optional ErrorInfo errorInfo = 2;
}

message AddSlaveRequest {
    repeated SlaveDescription slaves = 1;
}

message AddSlaveResponse {
    optional ErrorInfo errorInfo = 1;
}

message DelSlaveRequest {
    repeated string slaves = 1;
}

message DelSlaveResponse {
    optional ErrorInfo errorInfo = 1;
}

message OfflineSlaveRequest {
    repeated string slaves = 1;
    optional string reason = 2;
}

message OfflineSlaveResponse {
    optional ErrorInfo errorInfo = 1;
}

message OnlineSlaveRequest {
    repeated string slaves = 1;
}

message OnlineSlaveResponse {
    optional ErrorInfo errorInfo = 1;
}

message FreezeSlaveRequest {
    repeated string slaves = 1;
}

message FreezeSlaveResponse {
    optional ErrorInfo errorInfo = 1;
}

message AddResourceRequest {
    repeated string slaveAddress = 1;
    repeated Resource resources = 2;
    repeated Resource reservedResources = 3;
}

message AddResourceResponse {
    optional ErrorInfo errorInfo = 1;
}

message DelResourceRequest {
    repeated string slaveAddress = 1;
    repeated string resourceNames = 2;
    repeated string reservedResourceNames = 3;
}

message DelResourceResponse {
    optional ErrorInfo errorInfo = 1;
}

message UpdateResourceRequest {
    repeated string slaveAddress = 1;
    repeated Resource resources = 2;
    repeated Resource reservedResources = 3;
}

message UpdateResourceResponse {
    optional ErrorInfo errorInfo = 1;
}

message OfflineSlotRequest {
    repeated SlotId slots = 1;
}

message OfflineSlotResponse {
    optional ErrorInfo errorInfo = 1;
}

message ClearOfflineSlotRequest {
    repeated SlotId slots = 1;
    optional bool clearAll = 2 [default = false];
    optional string reason = 3;
}

message ClearOfflineSlotResponse {
    optional ErrorInfo errorInfo = 1;
}

message OfflineSlotInfo {
    optional string reason = 1;
    repeated SlotId slots = 2;
}

message GetOfflineSlotRequest {
    repeated string slaveAddress = 1;
    repeated string reason = 2;
}

message GetOfflineSlotResponse {
    repeated OfflineSlotInfo offlineInfo = 1;
}

message UpdateAllReservedResourceRequest {
    repeated Resource reservedResources = 1;
}

message UpdateAllReservedResourceResponse {
    optional ErrorInfo errorInfo = 1;
}

message UpdateDefaultSlaveRuntimeConfigRequest {
    optional SlaveRuntimeConfig runtimeConfig = 1;
}

message UpdateDefaultSlaveRuntimeConfigResponse {
    optional ErrorInfo errorInfo = 1;
}

message SlaveRuntimeConfigWithAddress {
    optional string slaveAddress = 1;
    optional SlaveRuntimeConfig runtimeConfig = 2;
}

message GetDefaultSlaveRuntimeConfigRequest {
}

message GetDefaultSlaveRuntimeConfigResponse {
    optional ErrorInfo errorInfo = 1;
    optional SlaveRuntimeConfig runtimeConfig = 2;
}

message UpdateSlaveRuntimeConfigRequest {
    repeated SlaveRuntimeConfigWithAddress runtimeConfigsWithAddr = 1;
}

message UpdateSlaveRuntimeConfigResponse {
    optional ErrorInfo errorInfo = 1;
}

message DeleteSlaveRuntimeConfigRequest {
    repeated string slaveAddress = 1;
}

message DeleteSlaveRuntimeConfigResponse {
    optional ErrorInfo errorInfo = 1;
}

message GetSlaveRuntimeConfigRequest {
    repeated string slaveAddress =1;
}

message GetSlaveRuntimeConfigResponse {
    optional ErrorInfo errorInfo = 1;
    repeated SlaveRuntimeConfigWithAddress runtimeConfigsWithAddr = 2;
}

message AddLabelRequest {
    repeated string slaveAddress = 1;
    repeated Parameter labels = 2;
}

message DelLabelRequest {
    repeated string slaveAddress = 1;
    repeated string keys = 2;
}

message UpdateLabelRequest {
    repeated string slaveAddress = 1;
    repeated Parameter labels = 2;
}

message UpdateSlaveLeaseRatioRequest {
    repeated string slaveAddress = 1;
    optional int32 leaseRatio = 2;
}

message UpdateSlaveVisibilityRequest {
    repeated string slaveAddress = 1;
    repeated Visibility visibilities = 2;
}

message ClearSlaveVisibilityRequest {
    repeated string slaveAddress = 1;
}

message AddSlaveVisibilityRequest {
    repeated string slaveAddress = 1;
    repeated Visibility visibilities = 2;
}

message DelSlaveVisibilityRequest {
    repeated string slaveAddress = 1;
    repeated Visibility visibilities = 2;
}

message UpdateSlaveSchedDomainRequest {
    repeated string slaveAddress = 1;
    optional string schedDomain = 2;
}

message UpdateSlaveSchedulerRequest {
    repeated string slaveAddress = 1;
    optional string scheduler = 2;
}

message AddSlotPreferenceRequest {
    repeated string slaveAddress = 1;
    repeated SlotPreferenceConfig preferences = 2;
}

message DelSlotPreferenceRequest {
    repeated string slaveAddress = 1;
    repeated SlotPreferenceConfig preferences = 2;
}

message UpdateSlotPreferenceRequest {
    repeated string slaveAddress = 1;
    repeated SlotPreferenceConfig preferences = 2;
}

message ClearSlotPreferenceRequest {
    repeated string slaveAddress = 1;
}

message UpdateSyncOptionRequest {
    enum OP {
	ADD = 0;
	DEL = 1;
    };
    required OP op = 1;
    required string syncServer = 2;
    required string confFile = 3;
    required string hippoKey = 4;
    optional string yarnKey = 5;
    optional string defaultValue = 6;
}