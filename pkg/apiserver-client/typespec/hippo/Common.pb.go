// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: Common.proto

package hippo

import (
	encoding_binary "encoding/binary"
	fmt "fmt"
	github_com_golang_protobuf_proto "github.com/golang/protobuf/proto"
	proto "github.com/golang/protobuf/proto"
	io "io"
	math "math"
	math_bits "math/bits"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion3 // please upgrade the proto package

type Operator int32

const (
	Operator_ADD    Operator = 0
	Operator_UPDATE Operator = 1
	Operator_DEL    Operator = 2
	Operator_GET    Operator = 3
	Operator_CLEAR  Operator = 4
)

var Operator_name = map[int32]string{
	0: "ADD",
	1: "UPDATE",
	2: "DEL",
	3: "GET",
	4: "CLEAR",
}

var Operator_value = map[string]int32{
	"ADD":    0,
	"UPDATE": 1,
	"DEL":    2,
	"GET":    3,
	"CLEAR":  4,
}

func (x Operator) Enum() *Operator {
	p := new(Operator)
	*p = x
	return p
}

func (x Operator) String() string {
	return proto.EnumName(Operator_name, int32(x))
}

func (x *Operator) UnmarshalJSON(data []byte) error {
	value, err := proto.UnmarshalJSONEnum(Operator_value, data, "Operator")
	if err != nil {
		return err
	}
	*x = Operator(value)
	return nil
}

func (Operator) EnumDescriptor() ([]byte, []int) {
	return fileDescriptor_ee72d9a89737215c, []int{0}
}

type PreferenceTag int32

const (
	PreferenceTag_PREF_NORMAL  PreferenceTag = 0
	PreferenceTag_PREF_RELEASE PreferenceTag = 1
)

var PreferenceTag_name = map[int32]string{
	0: "PREF_NORMAL",
	1: "PREF_RELEASE",
}

var PreferenceTag_value = map[string]int32{
	"PREF_NORMAL":  0,
	"PREF_RELEASE": 1,
}

func (x PreferenceTag) Enum() *PreferenceTag {
	p := new(PreferenceTag)
	*p = x
	return p
}

func (x PreferenceTag) String() string {
	return proto.EnumName(PreferenceTag_name, int32(x))
}

func (x *PreferenceTag) UnmarshalJSON(data []byte) error {
	value, err := proto.UnmarshalJSONEnum(PreferenceTag_value, data, "PreferenceTag")
	if err != nil {
		return err
	}
	*x = PreferenceTag(value)
	return nil
}

func (PreferenceTag) EnumDescriptor() ([]byte, []int) {
	return fileDescriptor_ee72d9a89737215c, []int{1}
}

type SlaveState int32

const (
	SlaveState_ONLINE  SlaveState = 0
	SlaveState_OFFLINE SlaveState = 1
	SlaveState_FROZEN  SlaveState = 2
)

var SlaveState_name = map[int32]string{
	0: "ONLINE",
	1: "OFFLINE",
	2: "FROZEN",
}

var SlaveState_value = map[string]int32{
	"ONLINE":  0,
	"OFFLINE": 1,
	"FROZEN":  2,
}

func (x SlaveState) Enum() *SlaveState {
	p := new(SlaveState)
	*p = x
	return p
}

func (x SlaveState) String() string {
	return proto.EnumName(SlaveState_name, int32(x))
}

func (x *SlaveState) UnmarshalJSON(data []byte) error {
	value, err := proto.UnmarshalJSONEnum(SlaveState_value, data, "SlaveState")
	if err != nil {
		return err
	}
	*x = SlaveState(value)
	return nil
}

func (SlaveState) EnumDescriptor() ([]byte, []int) {
	return fileDescriptor_ee72d9a89737215c, []int{2}
}

type PreferenceDescription_PreferenceType int32

const (
	PreferenceDescription_PREF_ANY       PreferenceDescription_PreferenceType = 0
	PreferenceDescription_PREF_PREFER    PreferenceDescription_PreferenceType = 1
	PreferenceDescription_PREF_BETTERNOT PreferenceDescription_PreferenceType = 2
	PreferenceDescription_PREF_PROHIBIT  PreferenceDescription_PreferenceType = 3
)

var PreferenceDescription_PreferenceType_name = map[int32]string{
	0: "PREF_ANY",
	1: "PREF_PREFER",
	2: "PREF_BETTERNOT",
	3: "PREF_PROHIBIT",
}

var PreferenceDescription_PreferenceType_value = map[string]int32{
	"PREF_ANY":       0,
	"PREF_PREFER":    1,
	"PREF_BETTERNOT": 2,
	"PREF_PROHIBIT":  3,
}

func (x PreferenceDescription_PreferenceType) Enum() *PreferenceDescription_PreferenceType {
	p := new(PreferenceDescription_PreferenceType)
	*p = x
	return p
}

func (x PreferenceDescription_PreferenceType) String() string {
	return proto.EnumName(PreferenceDescription_PreferenceType_name, int32(x))
}

func (x *PreferenceDescription_PreferenceType) UnmarshalJSON(data []byte) error {
	value, err := proto.UnmarshalJSONEnum(PreferenceDescription_PreferenceType_value, data, "PreferenceDescription_PreferenceType")
	if err != nil {
		return err
	}
	*x = PreferenceDescription_PreferenceType(value)
	return nil
}

func (PreferenceDescription_PreferenceType) EnumDescriptor() ([]byte, []int) {
	return fileDescriptor_ee72d9a89737215c, []int{3, 0}
}

type Resource_Type int32

const (
	Resource_SCALAR               Resource_Type = 0
	Resource_TEXT                 Resource_Type = 1
	Resource_EXCLUDE_TEXT         Resource_Type = 2
	Resource_QUEUE_NAME           Resource_Type = 3
	Resource_EXCLUSIVE            Resource_Type = 4
	Resource_PREFER_TEXT          Resource_Type = 5
	Resource_PROHIBIT_TEXT        Resource_Type = 6
	Resource_SCALAR_CMP           Resource_Type = 7
	Resource_PREFER_PROHIBIT_TEXT Resource_Type = 8
)

var Resource_Type_name = map[int32]string{
	0: "SCALAR",
	1: "TEXT",
	2: "EXCLUDE_TEXT",
	3: "QUEUE_NAME",
	4: "EXCLUSIVE",
	5: "PREFER_TEXT",
	6: "PROHIBIT_TEXT",
	7: "SCALAR_CMP",
	8: "PREFER_PROHIBIT_TEXT",
}

var Resource_Type_value = map[string]int32{
	"SCALAR":               0,
	"TEXT":                 1,
	"EXCLUDE_TEXT":         2,
	"QUEUE_NAME":           3,
	"EXCLUSIVE":            4,
	"PREFER_TEXT":          5,
	"PROHIBIT_TEXT":        6,
	"SCALAR_CMP":           7,
	"PREFER_PROHIBIT_TEXT": 8,
}

func (x Resource_Type) Enum() *Resource_Type {
	p := new(Resource_Type)
	*p = x
	return p
}

func (x Resource_Type) String() string {
	return proto.EnumName(Resource_Type_name, int32(x))
}

func (x *Resource_Type) UnmarshalJSON(data []byte) error {
	value, err := proto.UnmarshalJSONEnum(Resource_Type_value, data, "Resource_Type")
	if err != nil {
		return err
	}
	*x = Resource_Type(value)
	return nil
}

func (Resource_Type) EnumDescriptor() ([]byte, []int) {
	return fileDescriptor_ee72d9a89737215c, []int{4, 0}
}

type Priority_Level int32

const (
	Priority_UNDEFINE         Priority_Level = -1
	Priority_SYSTEM           Priority_Level = 0
	Priority_PROD             Priority_Level = 32
	Priority_NONPROD_MASTER   Priority_Level = 64
	Priority_NONPROD_WORKER   Priority_Level = 128
	Priority_TEST             Priority_Level = 256
	Priority_NONPROD_PLATFORM Priority_Level = 33
)

var Priority_Level_name = map[int32]string{
	-1:  "UNDEFINE",
	0:   "SYSTEM",
	32:  "PROD",
	64:  "NONPROD_MASTER",
	128: "NONPROD_WORKER",
	256: "TEST",
	33:  "NONPROD_PLATFORM",
}

var Priority_Level_value = map[string]int32{
	"UNDEFINE":         -1,
	"SYSTEM":           0,
	"PROD":             32,
	"NONPROD_MASTER":   64,
	"NONPROD_WORKER":   128,
	"TEST":             256,
	"NONPROD_PLATFORM": 33,
}

func (x Priority_Level) Enum() *Priority_Level {
	p := new(Priority_Level)
	*p = x
	return p
}

func (x Priority_Level) String() string {
	return proto.EnumName(Priority_Level_name, int32(x))
}

func (x *Priority_Level) UnmarshalJSON(data []byte) error {
	value, err := proto.UnmarshalJSONEnum(Priority_Level_value, data, "Priority_Level")
	if err != nil {
		return err
	}
	*x = Priority_Level(value)
	return nil
}

func (Priority_Level) EnumDescriptor() ([]byte, []int) {
	return fileDescriptor_ee72d9a89737215c, []int{5, 0}
}

type Visibility_VisibilityScope int32

const (
	Visibility_GLOBAL    Visibility_VisibilityScope = 0
	Visibility_PRIORITY  Visibility_VisibilityScope = 1
	Visibility_NAMESPACE Visibility_VisibilityScope = 2
	Visibility_NS_PREFIX Visibility_VisibilityScope = 3
	Visibility_RESOURCE  Visibility_VisibilityScope = 4
)

var Visibility_VisibilityScope_name = map[int32]string{
	0: "GLOBAL",
	1: "PRIORITY",
	2: "NAMESPACE",
	3: "NS_PREFIX",
	4: "RESOURCE",
}

var Visibility_VisibilityScope_value = map[string]int32{
	"GLOBAL":    0,
	"PRIORITY":  1,
	"NAMESPACE": 2,
	"NS_PREFIX": 3,
	"RESOURCE":  4,
}

func (x Visibility_VisibilityScope) Enum() *Visibility_VisibilityScope {
	p := new(Visibility_VisibilityScope)
	*p = x
	return p
}

func (x Visibility_VisibilityScope) String() string {
	return proto.EnumName(Visibility_VisibilityScope_name, int32(x))
}

func (x *Visibility_VisibilityScope) UnmarshalJSON(data []byte) error {
	value, err := proto.UnmarshalJSONEnum(Visibility_VisibilityScope_value, data, "Visibility_VisibilityScope")
	if err != nil {
		return err
	}
	*x = Visibility_VisibilityScope(value)
	return nil
}

func (Visibility_VisibilityScope) EnumDescriptor() ([]byte, []int) {
	return fileDescriptor_ee72d9a89737215c, []int{14, 0}
}

type Visibility_VisibilityOperator int32

const (
	Visibility_IN     Visibility_VisibilityOperator = 0
	Visibility_NOT_IN Visibility_VisibilityOperator = 1
)

var Visibility_VisibilityOperator_name = map[int32]string{
	0: "IN",
	1: "NOT_IN",
}

var Visibility_VisibilityOperator_value = map[string]int32{
	"IN":     0,
	"NOT_IN": 1,
}

func (x Visibility_VisibilityOperator) Enum() *Visibility_VisibilityOperator {
	p := new(Visibility_VisibilityOperator)
	*p = x
	return p
}

func (x Visibility_VisibilityOperator) String() string {
	return proto.EnumName(Visibility_VisibilityOperator_name, int32(x))
}

func (x *Visibility_VisibilityOperator) UnmarshalJSON(data []byte) error {
	value, err := proto.UnmarshalJSONEnum(Visibility_VisibilityOperator_value, data, "Visibility_VisibilityOperator")
	if err != nil {
		return err
	}
	*x = Visibility_VisibilityOperator(value)
	return nil
}

func (Visibility_VisibilityOperator) EnumDescriptor() ([]byte, []int) {
	return fileDescriptor_ee72d9a89737215c, []int{14, 1}
}

type ApplicationSlotConfig_WorkDirStyle int32

const (
	ApplicationSlotConfig_APP_STYLE     ApplicationSlotConfig_WorkDirStyle = 0
	ApplicationSlotConfig_APP_TAG_STYLE ApplicationSlotConfig_WorkDirStyle = 1
)

var ApplicationSlotConfig_WorkDirStyle_name = map[int32]string{
	0: "APP_STYLE",
	1: "APP_TAG_STYLE",
}

var ApplicationSlotConfig_WorkDirStyle_value = map[string]int32{
	"APP_STYLE":     0,
	"APP_TAG_STYLE": 1,
}

func (x ApplicationSlotConfig_WorkDirStyle) Enum() *ApplicationSlotConfig_WorkDirStyle {
	p := new(ApplicationSlotConfig_WorkDirStyle)
	*p = x
	return p
}

func (x ApplicationSlotConfig_WorkDirStyle) String() string {
	return proto.EnumName(ApplicationSlotConfig_WorkDirStyle_name, int32(x))
}

func (x *ApplicationSlotConfig_WorkDirStyle) UnmarshalJSON(data []byte) error {
	value, err := proto.UnmarshalJSONEnum(ApplicationSlotConfig_WorkDirStyle_value, data, "ApplicationSlotConfig_WorkDirStyle")
	if err != nil {
		return err
	}
	*x = ApplicationSlotConfig_WorkDirStyle(value)
	return nil
}

func (ApplicationSlotConfig_WorkDirStyle) EnumDescriptor() ([]byte, []int) {
	return fileDescriptor_ee72d9a89737215c, []int{15, 0}
}

type ResourceRequest_AllocateMode int32

const (
	ResourceRequest_MACHINE ResourceRequest_AllocateMode = 0
	ResourceRequest_SLOT    ResourceRequest_AllocateMode = 1
	ResourceRequest_AUTO    ResourceRequest_AllocateMode = 2
)

var ResourceRequest_AllocateMode_name = map[int32]string{
	0: "MACHINE",
	1: "SLOT",
	2: "AUTO",
}

var ResourceRequest_AllocateMode_value = map[string]int32{
	"MACHINE": 0,
	"SLOT":    1,
	"AUTO":    2,
}

func (x ResourceRequest_AllocateMode) Enum() *ResourceRequest_AllocateMode {
	p := new(ResourceRequest_AllocateMode)
	*p = x
	return p
}

func (x ResourceRequest_AllocateMode) String() string {
	return proto.EnumName(ResourceRequest_AllocateMode_name, int32(x))
}

func (x *ResourceRequest_AllocateMode) UnmarshalJSON(data []byte) error {
	value, err := proto.UnmarshalJSONEnum(ResourceRequest_AllocateMode_value, data, "ResourceRequest_AllocateMode")
	if err != nil {
		return err
	}
	*x = ResourceRequest_AllocateMode(value)
	return nil
}

func (ResourceRequest_AllocateMode) EnumDescriptor() ([]byte, []int) {
	return fileDescriptor_ee72d9a89737215c, []int{16, 0}
}

type ResourceRequest_SpreadLevel int32

const (
	ResourceRequest_UNLIMIT ResourceRequest_SpreadLevel = 0
	ResourceRequest_HOST    ResourceRequest_SpreadLevel = 1
	ResourceRequest_FRAME   ResourceRequest_SpreadLevel = 2
	ResourceRequest_RACK    ResourceRequest_SpreadLevel = 3
	ResourceRequest_ASW     ResourceRequest_SpreadLevel = 4
	ResourceRequest_PSW     ResourceRequest_SpreadLevel = 5
)

var ResourceRequest_SpreadLevel_name = map[int32]string{
	0: "UNLIMIT",
	1: "HOST",
	2: "FRAME",
	3: "RACK",
	4: "ASW",
	5: "PSW",
}

var ResourceRequest_SpreadLevel_value = map[string]int32{
	"UNLIMIT": 0,
	"HOST":    1,
	"FRAME":   2,
	"RACK":    3,
	"ASW":     4,
	"PSW":     5,
}

func (x ResourceRequest_SpreadLevel) Enum() *ResourceRequest_SpreadLevel {
	p := new(ResourceRequest_SpreadLevel)
	*p = x
	return p
}

func (x ResourceRequest_SpreadLevel) String() string {
	return proto.EnumName(ResourceRequest_SpreadLevel_name, int32(x))
}

func (x *ResourceRequest_SpreadLevel) UnmarshalJSON(data []byte) error {
	value, err := proto.UnmarshalJSONEnum(ResourceRequest_SpreadLevel_value, data, "ResourceRequest_SpreadLevel")
	if err != nil {
		return err
	}
	*x = ResourceRequest_SpreadLevel(value)
	return nil
}

func (ResourceRequest_SpreadLevel) EnumDescriptor() ([]byte, []int) {
	return fileDescriptor_ee72d9a89737215c, []int{16, 1}
}

type ResourceRequest_CpusetMode int32

const (
	ResourceRequest_NONE      ResourceRequest_CpusetMode = 0
	ResourceRequest_SHARE     ResourceRequest_CpusetMode = 1
	ResourceRequest_RESERVED  ResourceRequest_CpusetMode = 2
	ResourceRequest_EXCLUSIVE ResourceRequest_CpusetMode = 3
)

var ResourceRequest_CpusetMode_name = map[int32]string{
	0: "NONE",
	1: "SHARE",
	2: "RESERVED",
	3: "EXCLUSIVE",
}

var ResourceRequest_CpusetMode_value = map[string]int32{
	"NONE":      0,
	"SHARE":     1,
	"RESERVED":  2,
	"EXCLUSIVE": 3,
}

func (x ResourceRequest_CpusetMode) Enum() *ResourceRequest_CpusetMode {
	p := new(ResourceRequest_CpusetMode)
	*p = x
	return p
}

func (x ResourceRequest_CpusetMode) String() string {
	return proto.EnumName(ResourceRequest_CpusetMode_name, int32(x))
}

func (x *ResourceRequest_CpusetMode) UnmarshalJSON(data []byte) error {
	value, err := proto.UnmarshalJSONEnum(ResourceRequest_CpusetMode_value, data, "ResourceRequest_CpusetMode")
	if err != nil {
		return err
	}
	*x = ResourceRequest_CpusetMode(value)
	return nil
}

func (ResourceRequest_CpusetMode) EnumDescriptor() ([]byte, []int) {
	return fileDescriptor_ee72d9a89737215c, []int{16, 2}
}

type ApplicationDescription_ExclusiveMode int32

const (
	ApplicationDescription_APP  ApplicationDescription_ExclusiveMode = 0
	ApplicationDescription_TAG  ApplicationDescription_ExclusiveMode = 1
	ApplicationDescription_NONE ApplicationDescription_ExclusiveMode = 2
)

var ApplicationDescription_ExclusiveMode_name = map[int32]string{
	0: "APP",
	1: "TAG",
	2: "NONE",
}

var ApplicationDescription_ExclusiveMode_value = map[string]int32{
	"APP":  0,
	"TAG":  1,
	"NONE": 2,
}

func (x ApplicationDescription_ExclusiveMode) Enum() *ApplicationDescription_ExclusiveMode {
	p := new(ApplicationDescription_ExclusiveMode)
	*p = x
	return p
}

func (x ApplicationDescription_ExclusiveMode) String() string {
	return proto.EnumName(ApplicationDescription_ExclusiveMode_name, int32(x))
}

func (x *ApplicationDescription_ExclusiveMode) UnmarshalJSON(data []byte) error {
	value, err := proto.UnmarshalJSONEnum(ApplicationDescription_ExclusiveMode_value, data, "ApplicationDescription_ExclusiveMode")
	if err != nil {
		return err
	}
	*x = ApplicationDescription_ExclusiveMode(value)
	return nil
}

func (ApplicationDescription_ExclusiveMode) EnumDescriptor() ([]byte, []int) {
	return fileDescriptor_ee72d9a89737215c, []int{17, 0}
}

type ApplicationDescription_Status int32

const (
	ApplicationDescription_ACTIVE  ApplicationDescription_Status = 0
	ApplicationDescription_FROZEN  ApplicationDescription_Status = 1
	ApplicationDescription_RESERVE ApplicationDescription_Status = 2
	ApplicationDescription_KILLING ApplicationDescription_Status = 3
	ApplicationDescription_KILLED  ApplicationDescription_Status = 4
)

var ApplicationDescription_Status_name = map[int32]string{
	0: "ACTIVE",
	1: "FROZEN",
	2: "RESERVE",
	3: "KILLING",
	4: "KILLED",
}

var ApplicationDescription_Status_value = map[string]int32{
	"ACTIVE":  0,
	"FROZEN":  1,
	"RESERVE": 2,
	"KILLING": 3,
	"KILLED":  4,
}

func (x ApplicationDescription_Status) Enum() *ApplicationDescription_Status {
	p := new(ApplicationDescription_Status)
	*p = x
	return p
}

func (x ApplicationDescription_Status) String() string {
	return proto.EnumName(ApplicationDescription_Status_name, int32(x))
}

func (x *ApplicationDescription_Status) UnmarshalJSON(data []byte) error {
	value, err := proto.UnmarshalJSONEnum(ApplicationDescription_Status_value, data, "ApplicationDescription_Status")
	if err != nil {
		return err
	}
	*x = ApplicationDescription_Status(value)
	return nil
}

func (ApplicationDescription_Status) EnumDescriptor() ([]byte, []int) {
	return fileDescriptor_ee72d9a89737215c, []int{17, 1}
}

type QueueDescription_ScheduleMode int32

const (
	QueueDescription_SPREADOUT QueueDescription_ScheduleMode = 0
	QueueDescription_PILEUP    QueueDescription_ScheduleMode = 1
)

var QueueDescription_ScheduleMode_name = map[int32]string{
	0: "SPREADOUT",
	1: "PILEUP",
}

var QueueDescription_ScheduleMode_value = map[string]int32{
	"SPREADOUT": 0,
	"PILEUP":    1,
}

func (x QueueDescription_ScheduleMode) Enum() *QueueDescription_ScheduleMode {
	p := new(QueueDescription_ScheduleMode)
	*p = x
	return p
}

func (x QueueDescription_ScheduleMode) String() string {
	return proto.EnumName(QueueDescription_ScheduleMode_name, int32(x))
}

func (x *QueueDescription_ScheduleMode) UnmarshalJSON(data []byte) error {
	value, err := proto.UnmarshalJSONEnum(QueueDescription_ScheduleMode_value, data, "QueueDescription_ScheduleMode")
	if err != nil {
		return err
	}
	*x = QueueDescription_ScheduleMode(value)
	return nil
}

func (QueueDescription_ScheduleMode) EnumDescriptor() ([]byte, []int) {
	return fileDescriptor_ee72d9a89737215c, []int{19, 0}
}

type QueueDescription_QueueType int32

const (
	QueueDescription_STATIC_RESOURCE_QUEUE  QueueDescription_QueueType = 0
	QueueDescription_DYNAMIC_RESOURCE_QUEUE QueueDescription_QueueType = 1
	QueueDescription_SYSTEM_QUEUE           QueueDescription_QueueType = 2
)

var QueueDescription_QueueType_name = map[int32]string{
	0: "STATIC_RESOURCE_QUEUE",
	1: "DYNAMIC_RESOURCE_QUEUE",
	2: "SYSTEM_QUEUE",
}

var QueueDescription_QueueType_value = map[string]int32{
	"STATIC_RESOURCE_QUEUE":  0,
	"DYNAMIC_RESOURCE_QUEUE": 1,
	"SYSTEM_QUEUE":           2,
}

func (x QueueDescription_QueueType) Enum() *QueueDescription_QueueType {
	p := new(QueueDescription_QueueType)
	*p = x
	return p
}

func (x QueueDescription_QueueType) String() string {
	return proto.EnumName(QueueDescription_QueueType_name, int32(x))
}

func (x *QueueDescription_QueueType) UnmarshalJSON(data []byte) error {
	value, err := proto.UnmarshalJSONEnum(QueueDescription_QueueType_value, data, "QueueDescription_QueueType")
	if err != nil {
		return err
	}
	*x = QueueDescription_QueueType(value)
	return nil
}

func (QueueDescription_QueueType) EnumDescriptor() ([]byte, []int) {
	return fileDescriptor_ee72d9a89737215c, []int{19, 1}
}

type SlaveStatus_Status int32

const (
	SlaveStatus_UNKNOWN SlaveStatus_Status = 0
	SlaveStatus_DEAD    SlaveStatus_Status = 1
	SlaveStatus_ALIVE   SlaveStatus_Status = 2
)

var SlaveStatus_Status_name = map[int32]string{
	0: "UNKNOWN",
	1: "DEAD",
	2: "ALIVE",
}

var SlaveStatus_Status_value = map[string]int32{
	"UNKNOWN": 0,
	"DEAD":    1,
	"ALIVE":   2,
}

func (x SlaveStatus_Status) Enum() *SlaveStatus_Status {
	p := new(SlaveStatus_Status)
	*p = x
	return p
}

func (x SlaveStatus_Status) String() string {
	return proto.EnumName(SlaveStatus_Status_name, int32(x))
}

func (x *SlaveStatus_Status) UnmarshalJSON(data []byte) error {
	value, err := proto.UnmarshalJSONEnum(SlaveStatus_Status_value, data, "SlaveStatus_Status")
	if err != nil {
		return err
	}
	*x = SlaveStatus_Status(value)
	return nil
}

func (SlaveStatus_Status) EnumDescriptor() ([]byte, []int) {
	return fileDescriptor_ee72d9a89737215c, []int{22, 0}
}

type SlaveHealth_HealthCode int32

const (
	SlaveHealth_HC_OK            SlaveHealth_HealthCode = 0
	SlaveHealth_HC_UNKNOWN       SlaveHealth_HealthCode = 1
	SlaveHealth_HC_NO_PROCESS    SlaveHealth_HealthCode = 2
	SlaveHealth_HC_RPC_FAIL      SlaveHealth_HealthCode = 3
	SlaveHealth_HC_CHECK_TIMEOUT SlaveHealth_HealthCode = 4
	SlaveHealth_HC_UNHEALTH      SlaveHealth_HealthCode = 5
)

var SlaveHealth_HealthCode_name = map[int32]string{
	0: "HC_OK",
	1: "HC_UNKNOWN",
	2: "HC_NO_PROCESS",
	3: "HC_RPC_FAIL",
	4: "HC_CHECK_TIMEOUT",
	5: "HC_UNHEALTH",
}

var SlaveHealth_HealthCode_value = map[string]int32{
	"HC_OK":            0,
	"HC_UNKNOWN":       1,
	"HC_NO_PROCESS":    2,
	"HC_RPC_FAIL":      3,
	"HC_CHECK_TIMEOUT": 4,
	"HC_UNHEALTH":      5,
}

func (x SlaveHealth_HealthCode) Enum() *SlaveHealth_HealthCode {
	p := new(SlaveHealth_HealthCode)
	*p = x
	return p
}

func (x SlaveHealth_HealthCode) String() string {
	return proto.EnumName(SlaveHealth_HealthCode_name, int32(x))
}

func (x *SlaveHealth_HealthCode) UnmarshalJSON(data []byte) error {
	value, err := proto.UnmarshalJSONEnum(SlaveHealth_HealthCode_value, data, "SlaveHealth_HealthCode")
	if err != nil {
		return err
	}
	*x = SlaveHealth_HealthCode(value)
	return nil
}

func (SlaveHealth_HealthCode) EnumDescriptor() ([]byte, []int) {
	return fileDescriptor_ee72d9a89737215c, []int{23, 0}
}

type SystemStatus_Status int32

const (
	SystemStatus_ACTIVE SystemStatus_Status = 0
	SystemStatus_FROZEN SystemStatus_Status = 1
)

var SystemStatus_Status_name = map[int32]string{
	0: "ACTIVE",
	1: "FROZEN",
}

var SystemStatus_Status_value = map[string]int32{
	"ACTIVE": 0,
	"FROZEN": 1,
}

func (x SystemStatus_Status) Enum() *SystemStatus_Status {
	p := new(SystemStatus_Status)
	*p = x
	return p
}

func (x SystemStatus_Status) String() string {
	return proto.EnumName(SystemStatus_Status_name, int32(x))
}

func (x *SystemStatus_Status) UnmarshalJSON(data []byte) error {
	value, err := proto.UnmarshalJSONEnum(SystemStatus_Status_value, data, "SystemStatus_Status")
	if err != nil {
		return err
	}
	*x = SystemStatus_Status(value)
	return nil
}

func (SystemStatus_Status) EnumDescriptor() ([]byte, []int) {
	return fileDescriptor_ee72d9a89737215c, []int{24, 0}
}

type ProcessStatus_Status int32

const (
	ProcessStatus_PS_UNKNOWN    ProcessStatus_Status = 0
	ProcessStatus_PS_RUNNING    ProcessStatus_Status = 1
	ProcessStatus_PS_RESTARTING ProcessStatus_Status = 2
	ProcessStatus_PS_STOPPING   ProcessStatus_Status = 3
	ProcessStatus_PS_STOPPED    ProcessStatus_Status = 4
	ProcessStatus_PS_FAILED     ProcessStatus_Status = 5
	ProcessStatus_PS_TERMINATED ProcessStatus_Status = 6
)

var ProcessStatus_Status_name = map[int32]string{
	0: "PS_UNKNOWN",
	1: "PS_RUNNING",
	2: "PS_RESTARTING",
	3: "PS_STOPPING",
	4: "PS_STOPPED",
	5: "PS_FAILED",
	6: "PS_TERMINATED",
}

var ProcessStatus_Status_value = map[string]int32{
	"PS_UNKNOWN":    0,
	"PS_RUNNING":    1,
	"PS_RESTARTING": 2,
	"PS_STOPPING":   3,
	"PS_STOPPED":    4,
	"PS_FAILED":     5,
	"PS_TERMINATED": 6,
}

func (x ProcessStatus_Status) Enum() *ProcessStatus_Status {
	p := new(ProcessStatus_Status)
	*p = x
	return p
}

func (x ProcessStatus_Status) String() string {
	return proto.EnumName(ProcessStatus_Status_name, int32(x))
}

func (x *ProcessStatus_Status) UnmarshalJSON(data []byte) error {
	value, err := proto.UnmarshalJSONEnum(ProcessStatus_Status_value, data, "ProcessStatus_Status")
	if err != nil {
		return err
	}
	*x = ProcessStatus_Status(value)
	return nil
}

func (ProcessStatus_Status) EnumDescriptor() ([]byte, []int) {
	return fileDescriptor_ee72d9a89737215c, []int{25, 0}
}

type PackageInfo_PackageType int32

const (
	PackageInfo_UNKNOWN_PackageType PackageInfo_PackageType = 0
	PackageInfo_UNSUPPORT           PackageInfo_PackageType = 1
	PackageInfo_FILE                PackageInfo_PackageType = 2
	PackageInfo_DIR                 PackageInfo_PackageType = 3
	PackageInfo_RPM                 PackageInfo_PackageType = 4
	PackageInfo_ARCHIVE             PackageInfo_PackageType = 5
	PackageInfo_IMAGE               PackageInfo_PackageType = 6
)

var PackageInfo_PackageType_name = map[int32]string{
	0: "UNKNOWN_PackageType",
	1: "UNSUPPORT",
	2: "FILE",
	3: "DIR",
	4: "RPM",
	5: "ARCHIVE",
	6: "IMAGE",
}

var PackageInfo_PackageType_value = map[string]int32{
	"UNKNOWN_PackageType": 0,
	"UNSUPPORT":           1,
	"FILE":                2,
	"DIR":                 3,
	"RPM":                 4,
	"ARCHIVE":             5,
	"IMAGE":               6,
}

func (x PackageInfo_PackageType) Enum() *PackageInfo_PackageType {
	p := new(PackageInfo_PackageType)
	*p = x
	return p
}

func (x PackageInfo_PackageType) String() string {
	return proto.EnumName(PackageInfo_PackageType_name, int32(x))
}

func (x *PackageInfo_PackageType) UnmarshalJSON(data []byte) error {
	value, err := proto.UnmarshalJSONEnum(PackageInfo_PackageType_value, data, "PackageInfo_PackageType")
	if err != nil {
		return err
	}
	*x = PackageInfo_PackageType(value)
	return nil
}

func (PackageInfo_PackageType) EnumDescriptor() ([]byte, []int) {
	return fileDescriptor_ee72d9a89737215c, []int{35, 0}
}

type PackageInfo_PackageVisibility int32

const (
	PackageInfo_UNKNOWN_PackageVisibility PackageInfo_PackageVisibility = 0
	PackageInfo_PUBLIC                    PackageInfo_PackageVisibility = 1
	PackageInfo_PRIVATE                   PackageInfo_PackageVisibility = 2
)

var PackageInfo_PackageVisibility_name = map[int32]string{
	0: "UNKNOWN_PackageVisibility",
	1: "PUBLIC",
	2: "PRIVATE",
}

var PackageInfo_PackageVisibility_value = map[string]int32{
	"UNKNOWN_PackageVisibility": 0,
	"PUBLIC":                    1,
	"PRIVATE":                   2,
}

func (x PackageInfo_PackageVisibility) Enum() *PackageInfo_PackageVisibility {
	p := new(PackageInfo_PackageVisibility)
	*p = x
	return p
}

func (x PackageInfo_PackageVisibility) String() string {
	return proto.EnumName(PackageInfo_PackageVisibility_name, int32(x))
}

func (x *PackageInfo_PackageVisibility) UnmarshalJSON(data []byte) error {
	value, err := proto.UnmarshalJSONEnum(PackageInfo_PackageVisibility_value, data, "PackageInfo_PackageVisibility")
	if err != nil {
		return err
	}
	*x = PackageInfo_PackageVisibility(value)
	return nil
}

func (PackageInfo_PackageVisibility) EnumDescriptor() ([]byte, []int) {
	return fileDescriptor_ee72d9a89737215c, []int{35, 1}
}

type DataInfo_DataVisibility int32

const (
	DataInfo_UNKNOWN_DataVisibility DataInfo_DataVisibility = 0
	DataInfo_PUBLIC                 DataInfo_DataVisibility = 1
	DataInfo_PRIVATE                DataInfo_DataVisibility = 2
)

var DataInfo_DataVisibility_name = map[int32]string{
	0: "UNKNOWN_DataVisibility",
	1: "PUBLIC",
	2: "PRIVATE",
}

var DataInfo_DataVisibility_value = map[string]int32{
	"UNKNOWN_DataVisibility": 0,
	"PUBLIC":                 1,
	"PRIVATE":                2,
}

func (x DataInfo_DataVisibility) Enum() *DataInfo_DataVisibility {
	p := new(DataInfo_DataVisibility)
	*p = x
	return p
}

func (x DataInfo_DataVisibility) String() string {
	return proto.EnumName(DataInfo_DataVisibility_name, int32(x))
}

func (x *DataInfo_DataVisibility) UnmarshalJSON(data []byte) error {
	value, err := proto.UnmarshalJSONEnum(DataInfo_DataVisibility_value, data, "DataInfo_DataVisibility")
	if err != nil {
		return err
	}
	*x = DataInfo_DataVisibility(value)
	return nil
}

func (DataInfo_DataVisibility) EnumDescriptor() ([]byte, []int) {
	return fileDescriptor_ee72d9a89737215c, []int{39, 0}
}

type DataInfo_DataPathNormalizeType int32

const (
	DataInfo_NONE           DataInfo_DataPathNormalizeType = 1
	DataInfo_COLON_REPLACED DataInfo_DataPathNormalizeType = 2
)

var DataInfo_DataPathNormalizeType_name = map[int32]string{
	1: "NONE",
	2: "COLON_REPLACED",
}

var DataInfo_DataPathNormalizeType_value = map[string]int32{
	"NONE":           1,
	"COLON_REPLACED": 2,
}

func (x DataInfo_DataPathNormalizeType) Enum() *DataInfo_DataPathNormalizeType {
	p := new(DataInfo_DataPathNormalizeType)
	*p = x
	return p
}

func (x DataInfo_DataPathNormalizeType) String() string {
	return proto.EnumName(DataInfo_DataPathNormalizeType_name, int32(x))
}

func (x *DataInfo_DataPathNormalizeType) UnmarshalJSON(data []byte) error {
	value, err := proto.UnmarshalJSONEnum(DataInfo_DataPathNormalizeType_value, data, "DataInfo_DataPathNormalizeType")
	if err != nil {
		return err
	}
	*x = DataInfo_DataPathNormalizeType(value)
	return nil
}

func (DataInfo_DataPathNormalizeType) EnumDescriptor() ([]byte, []int) {
	return fileDescriptor_ee72d9a89737215c, []int{39, 1}
}

type DataStatus_DeployStatus int32

const (
	DataStatus_UNKNOWN   DataStatus_DeployStatus = 0
	DataStatus_DEPLOYING DataStatus_DeployStatus = 1
	DataStatus_FINISHED  DataStatus_DeployStatus = 2
	DataStatus_FAILED    DataStatus_DeployStatus = 3
	DataStatus_STOPPED   DataStatus_DeployStatus = 4
)

var DataStatus_DeployStatus_name = map[int32]string{
	0: "UNKNOWN",
	1: "DEPLOYING",
	2: "FINISHED",
	3: "FAILED",
	4: "STOPPED",
}

var DataStatus_DeployStatus_value = map[string]int32{
	"UNKNOWN":   0,
	"DEPLOYING": 1,
	"FINISHED":  2,
	"FAILED":    3,
	"STOPPED":   4,
}

func (x DataStatus_DeployStatus) Enum() *DataStatus_DeployStatus {
	p := new(DataStatus_DeployStatus)
	*p = x
	return p
}

func (x DataStatus_DeployStatus) String() string {
	return proto.EnumName(DataStatus_DeployStatus_name, int32(x))
}

func (x *DataStatus_DeployStatus) UnmarshalJSON(data []byte) error {
	value, err := proto.UnmarshalJSONEnum(DataStatus_DeployStatus_value, data, "DataStatus_DeployStatus")
	if err != nil {
		return err
	}
	*x = DataStatus_DeployStatus(value)
	return nil
}

func (DataStatus_DeployStatus) EnumDescriptor() ([]byte, []int) {
	return fileDescriptor_ee72d9a89737215c, []int{40, 0}
}

type PackageStatus_Status int32

const (
	PackageStatus_IS_UNKNOWN    PackageStatus_Status = 0
	PackageStatus_IS_WAITING    PackageStatus_Status = 1
	PackageStatus_IS_INSTALLING PackageStatus_Status = 2
	PackageStatus_IS_INSTALLED  PackageStatus_Status = 3
	PackageStatus_IS_FAILED     PackageStatus_Status = 4
	PackageStatus_IS_CANCELLED  PackageStatus_Status = 5
)

var PackageStatus_Status_name = map[int32]string{
	0: "IS_UNKNOWN",
	1: "IS_WAITING",
	2: "IS_INSTALLING",
	3: "IS_INSTALLED",
	4: "IS_FAILED",
	5: "IS_CANCELLED",
}

var PackageStatus_Status_value = map[string]int32{
	"IS_UNKNOWN":    0,
	"IS_WAITING":    1,
	"IS_INSTALLING": 2,
	"IS_INSTALLED":  3,
	"IS_FAILED":     4,
	"IS_CANCELLED":  5,
}

func (x PackageStatus_Status) Enum() *PackageStatus_Status {
	p := new(PackageStatus_Status)
	*p = x
	return p
}

func (x PackageStatus_Status) String() string {
	return proto.EnumName(PackageStatus_Status_name, int32(x))
}

func (x *PackageStatus_Status) UnmarshalJSON(data []byte) error {
	value, err := proto.UnmarshalJSONEnum(PackageStatus_Status_value, data, "PackageStatus_Status")
	if err != nil {
		return err
	}
	*x = PackageStatus_Status(value)
	return nil
}

func (PackageStatus_Status) EnumDescriptor() ([]byte, []int) {
	return fileDescriptor_ee72d9a89737215c, []int{41, 0}
}

type SetLoggerLevelRequest_LogLevel int32

const (
	SetLoggerLevelRequest_DISABLE SetLoggerLevelRequest_LogLevel = 0
	SetLoggerLevelRequest_FATAL   SetLoggerLevelRequest_LogLevel = 1
	SetLoggerLevelRequest_ERROR   SetLoggerLevelRequest_LogLevel = 2
	SetLoggerLevelRequest_WARN    SetLoggerLevelRequest_LogLevel = 3
	SetLoggerLevelRequest_INFO    SetLoggerLevelRequest_LogLevel = 4
	SetLoggerLevelRequest_DEBUG   SetLoggerLevelRequest_LogLevel = 5
	SetLoggerLevelRequest_TRACE1  SetLoggerLevelRequest_LogLevel = 6
	SetLoggerLevelRequest_TRACE2  SetLoggerLevelRequest_LogLevel = 7
	SetLoggerLevelRequest_TRACE3  SetLoggerLevelRequest_LogLevel = 8
	SetLoggerLevelRequest_NOTSET  SetLoggerLevelRequest_LogLevel = 9
)

var SetLoggerLevelRequest_LogLevel_name = map[int32]string{
	0: "DISABLE",
	1: "FATAL",
	2: "ERROR",
	3: "WARN",
	4: "INFO",
	5: "DEBUG",
	6: "TRACE1",
	7: "TRACE2",
	8: "TRACE3",
	9: "NOTSET",
}

var SetLoggerLevelRequest_LogLevel_value = map[string]int32{
	"DISABLE": 0,
	"FATAL":   1,
	"ERROR":   2,
	"WARN":    3,
	"INFO":    4,
	"DEBUG":   5,
	"TRACE1":  6,
	"TRACE2":  7,
	"TRACE3":  8,
	"NOTSET":  9,
}

func (x SetLoggerLevelRequest_LogLevel) Enum() *SetLoggerLevelRequest_LogLevel {
	p := new(SetLoggerLevelRequest_LogLevel)
	*p = x
	return p
}

func (x SetLoggerLevelRequest_LogLevel) String() string {
	return proto.EnumName(SetLoggerLevelRequest_LogLevel_name, int32(x))
}

func (x *SetLoggerLevelRequest_LogLevel) UnmarshalJSON(data []byte) error {
	value, err := proto.UnmarshalJSONEnum(SetLoggerLevelRequest_LogLevel_value, data, "SetLoggerLevelRequest_LogLevel")
	if err != nil {
		return err
	}
	*x = SetLoggerLevelRequest_LogLevel(value)
	return nil
}

func (SetLoggerLevelRequest_LogLevel) EnumDescriptor() ([]byte, []int) {
	return fileDescriptor_ee72d9a89737215c, []int{47, 0}
}

type ErrorInfo struct {
	ErrorCode            *ErrorCode `protobuf:"varint,1,opt,name=errorCode,enum=hippo.ErrorCode,def=0" json:"errorCode,omitempty"`
	ErrorMsg             *string    `protobuf:"bytes,2,opt,name=errorMsg,def=" json:"errorMsg,omitempty"`
	XXX_NoUnkeyedLiteral struct{}   `json:"-"`
	XXX_unrecognized     []byte     `json:"-"`
	XXX_sizecache        int32      `json:"-"`
}

func (m *ErrorInfo) Reset()         { *m = ErrorInfo{} }
func (m *ErrorInfo) String() string { return proto.CompactTextString(m) }
func (*ErrorInfo) ProtoMessage()    {}
func (*ErrorInfo) Descriptor() ([]byte, []int) {
	return fileDescriptor_ee72d9a89737215c, []int{0}
}
func (m *ErrorInfo) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *ErrorInfo) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_ErrorInfo.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *ErrorInfo) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ErrorInfo.Merge(m, src)
}
func (m *ErrorInfo) XXX_Size() int {
	return m.Size()
}
func (m *ErrorInfo) XXX_DiscardUnknown() {
	xxx_messageInfo_ErrorInfo.DiscardUnknown(m)
}

var xxx_messageInfo_ErrorInfo proto.InternalMessageInfo

const Default_ErrorInfo_ErrorCode ErrorCode = ErrorCode_ERROR_NONE

func (m *ErrorInfo) GetErrorCode() ErrorCode {
	if m != nil && m.ErrorCode != nil {
		return *m.ErrorCode
	}
	return Default_ErrorInfo_ErrorCode
}

func (m *ErrorInfo) GetErrorMsg() string {
	if m != nil && m.ErrorMsg != nil {
		return *m.ErrorMsg
	}
	return ""
}

type SlotId struct {
	SlaveAddress         *string  `protobuf:"bytes,1,opt,name=slaveAddress" json:"slaveAddress,omitempty"`
	Id                   *int32   `protobuf:"varint,2,opt,name=id" json:"id,omitempty"`
	DeclareTime          *int64   `protobuf:"varint,3,opt,name=declareTime" json:"declareTime,omitempty"`
	RestfulHttpPort      *int32   `protobuf:"varint,4,opt,name=restfulHttpPort" json:"restfulHttpPort,omitempty"`
	SlaveHttpPort        *int32   `protobuf:"varint,5,opt,name=slaveHttpPort" json:"slaveHttpPort,omitempty"`
	K8SPodUID            *string  `protobuf:"bytes,6,opt,name=k8sPodUID" json:"k8sPodUID,omitempty"`
	K8SPodName           *string  `protobuf:"bytes,7,opt,name=k8sPodName" json:"k8sPodName,omitempty"`
	K8SNamespace         *string  `protobuf:"bytes,8,opt,name=k8sNamespace" json:"k8sNamespace,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *SlotId) Reset()         { *m = SlotId{} }
func (m *SlotId) String() string { return proto.CompactTextString(m) }
func (*SlotId) ProtoMessage()    {}
func (*SlotId) Descriptor() ([]byte, []int) {
	return fileDescriptor_ee72d9a89737215c, []int{1}
}
func (m *SlotId) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *SlotId) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_SlotId.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *SlotId) XXX_Merge(src proto.Message) {
	xxx_messageInfo_SlotId.Merge(m, src)
}
func (m *SlotId) XXX_Size() int {
	return m.Size()
}
func (m *SlotId) XXX_DiscardUnknown() {
	xxx_messageInfo_SlotId.DiscardUnknown(m)
}

var xxx_messageInfo_SlotId proto.InternalMessageInfo

func (m *SlotId) GetSlaveAddress() string {
	if m != nil && m.SlaveAddress != nil {
		return *m.SlaveAddress
	}
	return ""
}

func (m *SlotId) GetId() int32 {
	if m != nil && m.Id != nil {
		return *m.Id
	}
	return 0
}

func (m *SlotId) GetDeclareTime() int64 {
	if m != nil && m.DeclareTime != nil {
		return *m.DeclareTime
	}
	return 0
}

func (m *SlotId) GetRestfulHttpPort() int32 {
	if m != nil && m.RestfulHttpPort != nil {
		return *m.RestfulHttpPort
	}
	return 0
}

func (m *SlotId) GetSlaveHttpPort() int32 {
	if m != nil && m.SlaveHttpPort != nil {
		return *m.SlaveHttpPort
	}
	return 0
}

func (m *SlotId) GetK8SPodUID() string {
	if m != nil && m.K8SPodUID != nil {
		return *m.K8SPodUID
	}
	return ""
}

func (m *SlotId) GetK8SPodName() string {
	if m != nil && m.K8SPodName != nil {
		return *m.K8SPodName
	}
	return ""
}

func (m *SlotId) GetK8SNamespace() string {
	if m != nil && m.K8SNamespace != nil {
		return *m.K8SNamespace
	}
	return ""
}

type GenericResponse struct {
	ErrorInfo            *ErrorInfo `protobuf:"bytes,1,opt,name=errorInfo" json:"errorInfo,omitempty"`
	XXX_NoUnkeyedLiteral struct{}   `json:"-"`
	XXX_unrecognized     []byte     `json:"-"`
	XXX_sizecache        int32      `json:"-"`
}

func (m *GenericResponse) Reset()         { *m = GenericResponse{} }
func (m *GenericResponse) String() string { return proto.CompactTextString(m) }
func (*GenericResponse) ProtoMessage()    {}
func (*GenericResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_ee72d9a89737215c, []int{2}
}
func (m *GenericResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *GenericResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_GenericResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *GenericResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_GenericResponse.Merge(m, src)
}
func (m *GenericResponse) XXX_Size() int {
	return m.Size()
}
func (m *GenericResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_GenericResponse.DiscardUnknown(m)
}

var xxx_messageInfo_GenericResponse proto.InternalMessageInfo

func (m *GenericResponse) GetErrorInfo() *ErrorInfo {
	if m != nil {
		return m.ErrorInfo
	}
	return nil
}

type PreferenceDescription struct {
	SlaveAddress         *string                               `protobuf:"bytes,1,opt,name=slaveAddress" json:"slaveAddress,omitempty"`
	Type                 *PreferenceDescription_PreferenceType `protobuf:"varint,2,opt,name=type,enum=hippo.PreferenceDescription_PreferenceType,def=0" json:"type,omitempty"`
	LeaseMs              *uint32                               `protobuf:"varint,3,opt,name=leaseMs,def=3600000" json:"leaseMs,omitempty"`
	ResourceTag          *string                               `protobuf:"bytes,4,opt,name=resourceTag" json:"resourceTag,omitempty"`
	DiskName             *string                               `protobuf:"bytes,5,opt,name=diskName" json:"diskName,omitempty"`
	UserDefined          *bool                                 `protobuf:"varint,6,opt,name=userDefined,def=1" json:"userDefined,omitempty"`
	WorkDirTag           *string                               `protobuf:"bytes,7,opt,name=workDirTag" json:"workDirTag,omitempty"`
	XXX_NoUnkeyedLiteral struct{}                              `json:"-"`
	XXX_unrecognized     []byte                                `json:"-"`
	XXX_sizecache        int32                                 `json:"-"`
}

func (m *PreferenceDescription) Reset()         { *m = PreferenceDescription{} }
func (m *PreferenceDescription) String() string { return proto.CompactTextString(m) }
func (*PreferenceDescription) ProtoMessage()    {}
func (*PreferenceDescription) Descriptor() ([]byte, []int) {
	return fileDescriptor_ee72d9a89737215c, []int{3}
}
func (m *PreferenceDescription) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *PreferenceDescription) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_PreferenceDescription.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *PreferenceDescription) XXX_Merge(src proto.Message) {
	xxx_messageInfo_PreferenceDescription.Merge(m, src)
}
func (m *PreferenceDescription) XXX_Size() int {
	return m.Size()
}
func (m *PreferenceDescription) XXX_DiscardUnknown() {
	xxx_messageInfo_PreferenceDescription.DiscardUnknown(m)
}

var xxx_messageInfo_PreferenceDescription proto.InternalMessageInfo

const Default_PreferenceDescription_Type PreferenceDescription_PreferenceType = PreferenceDescription_PREF_ANY
const Default_PreferenceDescription_LeaseMs uint32 = 3600000
const Default_PreferenceDescription_UserDefined bool = true

func (m *PreferenceDescription) GetSlaveAddress() string {
	if m != nil && m.SlaveAddress != nil {
		return *m.SlaveAddress
	}
	return ""
}

func (m *PreferenceDescription) GetType() PreferenceDescription_PreferenceType {
	if m != nil && m.Type != nil {
		return *m.Type
	}
	return Default_PreferenceDescription_Type
}

func (m *PreferenceDescription) GetLeaseMs() uint32 {
	if m != nil && m.LeaseMs != nil {
		return *m.LeaseMs
	}
	return Default_PreferenceDescription_LeaseMs
}

func (m *PreferenceDescription) GetResourceTag() string {
	if m != nil && m.ResourceTag != nil {
		return *m.ResourceTag
	}
	return ""
}

func (m *PreferenceDescription) GetDiskName() string {
	if m != nil && m.DiskName != nil {
		return *m.DiskName
	}
	return ""
}

func (m *PreferenceDescription) GetUserDefined() bool {
	if m != nil && m.UserDefined != nil {
		return *m.UserDefined
	}
	return Default_PreferenceDescription_UserDefined
}

func (m *PreferenceDescription) GetWorkDirTag() string {
	if m != nil && m.WorkDirTag != nil {
		return *m.WorkDirTag
	}
	return ""
}

type Resource struct {
	Type                 *Resource_Type `protobuf:"varint,1,opt,name=type,enum=hippo.Resource_Type,def=0" json:"type,omitempty"`
	Name                 *string        `protobuf:"bytes,2,opt,name=name" json:"name,omitempty"`
	Amount               *int32         `protobuf:"varint,3,opt,name=amount" json:"amount,omitempty"`
	XXX_NoUnkeyedLiteral struct{}       `json:"-"`
	XXX_unrecognized     []byte         `json:"-"`
	XXX_sizecache        int32          `json:"-"`
}

func (m *Resource) Reset()         { *m = Resource{} }
func (m *Resource) String() string { return proto.CompactTextString(m) }
func (*Resource) ProtoMessage()    {}
func (*Resource) Descriptor() ([]byte, []int) {
	return fileDescriptor_ee72d9a89737215c, []int{4}
}
func (m *Resource) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *Resource) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_Resource.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *Resource) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Resource.Merge(m, src)
}
func (m *Resource) XXX_Size() int {
	return m.Size()
}
func (m *Resource) XXX_DiscardUnknown() {
	xxx_messageInfo_Resource.DiscardUnknown(m)
}

var xxx_messageInfo_Resource proto.InternalMessageInfo

const Default_Resource_Type Resource_Type = Resource_SCALAR

func (m *Resource) GetType() Resource_Type {
	if m != nil && m.Type != nil {
		return *m.Type
	}
	return Default_Resource_Type
}

func (m *Resource) GetName() string {
	if m != nil && m.Name != nil {
		return *m.Name
	}
	return ""
}

func (m *Resource) GetAmount() int32 {
	if m != nil && m.Amount != nil {
		return *m.Amount
	}
	return 0
}

// 0 => system, (0,32]=>prod, (32,)=>non-prod, 33 is a special priority as non-prod platform
type Priority struct {
	MajorPriority        *int32   `protobuf:"varint,1,opt,name=majorPriority,def=32" json:"majorPriority,omitempty"`
	MinorPriority        *int32   `protobuf:"varint,2,opt,name=minorPriority,def=0" json:"minorPriority,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *Priority) Reset()         { *m = Priority{} }
func (m *Priority) String() string { return proto.CompactTextString(m) }
func (*Priority) ProtoMessage()    {}
func (*Priority) Descriptor() ([]byte, []int) {
	return fileDescriptor_ee72d9a89737215c, []int{5}
}
func (m *Priority) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *Priority) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_Priority.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *Priority) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Priority.Merge(m, src)
}
func (m *Priority) XXX_Size() int {
	return m.Size()
}
func (m *Priority) XXX_DiscardUnknown() {
	xxx_messageInfo_Priority.DiscardUnknown(m)
}

var xxx_messageInfo_Priority proto.InternalMessageInfo

const Default_Priority_MajorPriority int32 = 32
const Default_Priority_MinorPriority int32 = 0

func (m *Priority) GetMajorPriority() int32 {
	if m != nil && m.MajorPriority != nil {
		return *m.MajorPriority
	}
	return Default_Priority_MajorPriority
}

func (m *Priority) GetMinorPriority() int32 {
	if m != nil && m.MinorPriority != nil {
		return *m.MinorPriority
	}
	return Default_Priority_MinorPriority
}

type SlotResource struct {
	Resources            []*Resource `protobuf:"bytes,1,rep,name=resources" json:"resources,omitempty"`
	XXX_NoUnkeyedLiteral struct{}    `json:"-"`
	XXX_unrecognized     []byte      `json:"-"`
	XXX_sizecache        int32       `json:"-"`
}

func (m *SlotResource) Reset()         { *m = SlotResource{} }
func (m *SlotResource) String() string { return proto.CompactTextString(m) }
func (*SlotResource) ProtoMessage()    {}
func (*SlotResource) Descriptor() ([]byte, []int) {
	return fileDescriptor_ee72d9a89737215c, []int{6}
}
func (m *SlotResource) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *SlotResource) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_SlotResource.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *SlotResource) XXX_Merge(src proto.Message) {
	xxx_messageInfo_SlotResource.Merge(m, src)
}
func (m *SlotResource) XXX_Size() int {
	return m.Size()
}
func (m *SlotResource) XXX_DiscardUnknown() {
	xxx_messageInfo_SlotResource.DiscardUnknown(m)
}

var xxx_messageInfo_SlotResource proto.InternalMessageInfo

func (m *SlotResource) GetResources() []*Resource {
	if m != nil {
		return m.Resources
	}
	return nil
}

type SlaveResource struct {
	Resources            []*Resource `protobuf:"bytes,1,rep,name=resources" json:"resources,omitempty"`
	ReservedResources    []*Resource `protobuf:"bytes,2,rep,name=reservedResources" json:"reservedResources,omitempty"`
	SysReservedResources []*Resource `protobuf:"bytes,3,rep,name=sysReservedResources" json:"sysReservedResources,omitempty"`
	XXX_NoUnkeyedLiteral struct{}    `json:"-"`
	XXX_unrecognized     []byte      `json:"-"`
	XXX_sizecache        int32       `json:"-"`
}

func (m *SlaveResource) Reset()         { *m = SlaveResource{} }
func (m *SlaveResource) String() string { return proto.CompactTextString(m) }
func (*SlaveResource) ProtoMessage()    {}
func (*SlaveResource) Descriptor() ([]byte, []int) {
	return fileDescriptor_ee72d9a89737215c, []int{7}
}
func (m *SlaveResource) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *SlaveResource) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_SlaveResource.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *SlaveResource) XXX_Merge(src proto.Message) {
	xxx_messageInfo_SlaveResource.Merge(m, src)
}
func (m *SlaveResource) XXX_Size() int {
	return m.Size()
}
func (m *SlaveResource) XXX_DiscardUnknown() {
	xxx_messageInfo_SlaveResource.DiscardUnknown(m)
}

var xxx_messageInfo_SlaveResource proto.InternalMessageInfo

func (m *SlaveResource) GetResources() []*Resource {
	if m != nil {
		return m.Resources
	}
	return nil
}

func (m *SlaveResource) GetReservedResources() []*Resource {
	if m != nil {
		return m.ReservedResources
	}
	return nil
}

func (m *SlaveResource) GetSysReservedResources() []*Resource {
	if m != nil {
		return m.SysReservedResources
	}
	return nil
}

type GrantedResource struct {
	Resources            []*Resource `protobuf:"bytes,1,rep,name=resources" json:"resources,omitempty"`
	XXX_NoUnkeyedLiteral struct{}    `json:"-"`
	XXX_unrecognized     []byte      `json:"-"`
	XXX_sizecache        int32       `json:"-"`
}

func (m *GrantedResource) Reset()         { *m = GrantedResource{} }
func (m *GrantedResource) String() string { return proto.CompactTextString(m) }
func (*GrantedResource) ProtoMessage()    {}
func (*GrantedResource) Descriptor() ([]byte, []int) {
	return fileDescriptor_ee72d9a89737215c, []int{8}
}
func (m *GrantedResource) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *GrantedResource) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_GrantedResource.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *GrantedResource) XXX_Merge(src proto.Message) {
	xxx_messageInfo_GrantedResource.Merge(m, src)
}
func (m *GrantedResource) XXX_Size() int {
	return m.Size()
}
func (m *GrantedResource) XXX_DiscardUnknown() {
	xxx_messageInfo_GrantedResource.DiscardUnknown(m)
}

var xxx_messageInfo_GrantedResource proto.InternalMessageInfo

func (m *GrantedResource) GetResources() []*Resource {
	if m != nil {
		return m.Resources
	}
	return nil
}

type SlaveRuntimeConfig struct {
	Valid                    *bool    `protobuf:"varint,1,opt,name=valid,def=0" json:"valid,omitempty"`
	CpuUsageSafeRatio        *int32   `protobuf:"varint,2,opt,name=cpuUsageSafeRatio,def=80" json:"cpuUsageSafeRatio,omitempty"`
	ElasticMemory            *int32   `protobuf:"varint,3,opt,name=elasticMemory,def=0" json:"elasticMemory,omitempty"`
	GuaranteedCpuForNonProd  *int32   `protobuf:"varint,4,opt,name=guaranteedCpuForNonProd,def=800" json:"guaranteedCpuForNonProd,omitempty"`
	EnableMemoryPriority     *bool    `protobuf:"varint,5,opt,name=enableMemoryPriority,def=0" json:"enableMemoryPriority,omitempty"`
	UsePriorityOOM           *bool    `protobuf:"varint,6,opt,name=usePriorityOOM,def=0" json:"usePriorityOOM,omitempty"`
	EnableOOMKillAll         *bool    `protobuf:"varint,7,opt,name=enableOOMKillAll,def=0" json:"enableOOMKillAll,omitempty"`
	MemoryUsageCalcInLruView *bool    `protobuf:"varint,8,opt,name=memoryUsageCalcInLruView,def=1" json:"memoryUsageCalcInLruView,omitempty"`
	EnableColdMemory         *bool    `protobuf:"varint,9,opt,name=enableColdMemory,def=0" json:"enableColdMemory,omitempty"`
	Configs                  []string `protobuf:"bytes,10,rep,name=configs" json:"configs,omitempty"`
	XXX_NoUnkeyedLiteral     struct{} `json:"-"`
	XXX_unrecognized         []byte   `json:"-"`
	XXX_sizecache            int32    `json:"-"`
}

func (m *SlaveRuntimeConfig) Reset()         { *m = SlaveRuntimeConfig{} }
func (m *SlaveRuntimeConfig) String() string { return proto.CompactTextString(m) }
func (*SlaveRuntimeConfig) ProtoMessage()    {}
func (*SlaveRuntimeConfig) Descriptor() ([]byte, []int) {
	return fileDescriptor_ee72d9a89737215c, []int{9}
}
func (m *SlaveRuntimeConfig) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *SlaveRuntimeConfig) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_SlaveRuntimeConfig.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *SlaveRuntimeConfig) XXX_Merge(src proto.Message) {
	xxx_messageInfo_SlaveRuntimeConfig.Merge(m, src)
}
func (m *SlaveRuntimeConfig) XXX_Size() int {
	return m.Size()
}
func (m *SlaveRuntimeConfig) XXX_DiscardUnknown() {
	xxx_messageInfo_SlaveRuntimeConfig.DiscardUnknown(m)
}

var xxx_messageInfo_SlaveRuntimeConfig proto.InternalMessageInfo

const Default_SlaveRuntimeConfig_Valid bool = false
const Default_SlaveRuntimeConfig_CpuUsageSafeRatio int32 = 80
const Default_SlaveRuntimeConfig_ElasticMemory int32 = 0
const Default_SlaveRuntimeConfig_GuaranteedCpuForNonProd int32 = 800
const Default_SlaveRuntimeConfig_EnableMemoryPriority bool = false
const Default_SlaveRuntimeConfig_UsePriorityOOM bool = false
const Default_SlaveRuntimeConfig_EnableOOMKillAll bool = false
const Default_SlaveRuntimeConfig_MemoryUsageCalcInLruView bool = true
const Default_SlaveRuntimeConfig_EnableColdMemory bool = false

func (m *SlaveRuntimeConfig) GetValid() bool {
	if m != nil && m.Valid != nil {
		return *m.Valid
	}
	return Default_SlaveRuntimeConfig_Valid
}

func (m *SlaveRuntimeConfig) GetCpuUsageSafeRatio() int32 {
	if m != nil && m.CpuUsageSafeRatio != nil {
		return *m.CpuUsageSafeRatio
	}
	return Default_SlaveRuntimeConfig_CpuUsageSafeRatio
}

func (m *SlaveRuntimeConfig) GetElasticMemory() int32 {
	if m != nil && m.ElasticMemory != nil {
		return *m.ElasticMemory
	}
	return Default_SlaveRuntimeConfig_ElasticMemory
}

func (m *SlaveRuntimeConfig) GetGuaranteedCpuForNonProd() int32 {
	if m != nil && m.GuaranteedCpuForNonProd != nil {
		return *m.GuaranteedCpuForNonProd
	}
	return Default_SlaveRuntimeConfig_GuaranteedCpuForNonProd
}

func (m *SlaveRuntimeConfig) GetEnableMemoryPriority() bool {
	if m != nil && m.EnableMemoryPriority != nil {
		return *m.EnableMemoryPriority
	}
	return Default_SlaveRuntimeConfig_EnableMemoryPriority
}

func (m *SlaveRuntimeConfig) GetUsePriorityOOM() bool {
	if m != nil && m.UsePriorityOOM != nil {
		return *m.UsePriorityOOM
	}
	return Default_SlaveRuntimeConfig_UsePriorityOOM
}

func (m *SlaveRuntimeConfig) GetEnableOOMKillAll() bool {
	if m != nil && m.EnableOOMKillAll != nil {
		return *m.EnableOOMKillAll
	}
	return Default_SlaveRuntimeConfig_EnableOOMKillAll
}

func (m *SlaveRuntimeConfig) GetMemoryUsageCalcInLruView() bool {
	if m != nil && m.MemoryUsageCalcInLruView != nil {
		return *m.MemoryUsageCalcInLruView
	}
	return Default_SlaveRuntimeConfig_MemoryUsageCalcInLruView
}

func (m *SlaveRuntimeConfig) GetEnableColdMemory() bool {
	if m != nil && m.EnableColdMemory != nil {
		return *m.EnableColdMemory
	}
	return Default_SlaveRuntimeConfig_EnableColdMemory
}

func (m *SlaveRuntimeConfig) GetConfigs() []string {
	if m != nil {
		return m.Configs
	}
	return nil
}

type SlaveDescription struct {
	Address          *string             `protobuf:"bytes,1,opt,name=address" json:"address,omitempty"`
	SlotCount        *int32              `protobuf:"varint,2,opt,name=slotCount,def=1" json:"slotCount,omitempty"`
	SlaveResource    *SlaveResource      `protobuf:"bytes,3,opt,name=slaveResource" json:"slaveResource,omitempty"`
	IsOffline        *bool               `protobuf:"varint,4,opt,name=isOffline,def=0" json:"isOffline,omitempty"`
	SlaveId          *int64              `protobuf:"varint,5,opt,name=slaveId,def=0" json:"slaveId,omitempty"`
	NeedOfflineSlots []int32             `protobuf:"varint,6,rep,name=needOfflineSlots" json:"needOfflineSlots,omitempty"`
	RuntimeConfig    *SlaveRuntimeConfig `protobuf:"bytes,7,opt,name=runtimeConfig" json:"runtimeConfig,omitempty"`
	OfflineReason    *string             `protobuf:"bytes,8,opt,name=offlineReason" json:"offlineReason,omitempty"`
	Labels           []*Parameter        `protobuf:"bytes,9,rep,name=labels" json:"labels,omitempty"`
	// indicate whether slave can run non-prod slots
	LeaseRatio   *int32        `protobuf:"varint,10,opt,name=leaseRatio,def=100" json:"leaseRatio,omitempty"`
	State        *SlaveState   `protobuf:"varint,11,opt,name=state,enum=hippo.SlaveState,def=0" json:"state,omitempty"`
	Visibilities []*Visibility `protobuf:"bytes,12,rep,name=visibilities" json:"visibilities,omitempty"`
	// 不再使用这个字段，以防以前做aliyarn时存在脏数据
	SchedDomain          *string                 `protobuf:"bytes,13,opt,name=schedDomain" json:"schedDomain,omitempty"`
	Preferences          []*SlotPreferenceConfig `protobuf:"bytes,14,rep,name=preferences" json:"preferences,omitempty"`
	Schedulability       *SlaveSchedulability    `protobuf:"bytes,15,opt,name=schedulability" json:"schedulability,omitempty"`
	XXX_NoUnkeyedLiteral struct{}                `json:"-"`
	XXX_unrecognized     []byte                  `json:"-"`
	XXX_sizecache        int32                   `json:"-"`
}

func (m *SlaveDescription) Reset()         { *m = SlaveDescription{} }
func (m *SlaveDescription) String() string { return proto.CompactTextString(m) }
func (*SlaveDescription) ProtoMessage()    {}
func (*SlaveDescription) Descriptor() ([]byte, []int) {
	return fileDescriptor_ee72d9a89737215c, []int{10}
}
func (m *SlaveDescription) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *SlaveDescription) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_SlaveDescription.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *SlaveDescription) XXX_Merge(src proto.Message) {
	xxx_messageInfo_SlaveDescription.Merge(m, src)
}
func (m *SlaveDescription) XXX_Size() int {
	return m.Size()
}
func (m *SlaveDescription) XXX_DiscardUnknown() {
	xxx_messageInfo_SlaveDescription.DiscardUnknown(m)
}

var xxx_messageInfo_SlaveDescription proto.InternalMessageInfo

const Default_SlaveDescription_SlotCount int32 = 1
const Default_SlaveDescription_IsOffline bool = false
const Default_SlaveDescription_SlaveId int64 = 0
const Default_SlaveDescription_LeaseRatio int32 = 100
const Default_SlaveDescription_State SlaveState = SlaveState_ONLINE

func (m *SlaveDescription) GetAddress() string {
	if m != nil && m.Address != nil {
		return *m.Address
	}
	return ""
}

func (m *SlaveDescription) GetSlotCount() int32 {
	if m != nil && m.SlotCount != nil {
		return *m.SlotCount
	}
	return Default_SlaveDescription_SlotCount
}

func (m *SlaveDescription) GetSlaveResource() *SlaveResource {
	if m != nil {
		return m.SlaveResource
	}
	return nil
}

func (m *SlaveDescription) GetIsOffline() bool {
	if m != nil && m.IsOffline != nil {
		return *m.IsOffline
	}
	return Default_SlaveDescription_IsOffline
}

func (m *SlaveDescription) GetSlaveId() int64 {
	if m != nil && m.SlaveId != nil {
		return *m.SlaveId
	}
	return Default_SlaveDescription_SlaveId
}

func (m *SlaveDescription) GetNeedOfflineSlots() []int32 {
	if m != nil {
		return m.NeedOfflineSlots
	}
	return nil
}

func (m *SlaveDescription) GetRuntimeConfig() *SlaveRuntimeConfig {
	if m != nil {
		return m.RuntimeConfig
	}
	return nil
}

func (m *SlaveDescription) GetOfflineReason() string {
	if m != nil && m.OfflineReason != nil {
		return *m.OfflineReason
	}
	return ""
}

func (m *SlaveDescription) GetLabels() []*Parameter {
	if m != nil {
		return m.Labels
	}
	return nil
}

func (m *SlaveDescription) GetLeaseRatio() int32 {
	if m != nil && m.LeaseRatio != nil {
		return *m.LeaseRatio
	}
	return Default_SlaveDescription_LeaseRatio
}

func (m *SlaveDescription) GetState() SlaveState {
	if m != nil && m.State != nil {
		return *m.State
	}
	return Default_SlaveDescription_State
}

func (m *SlaveDescription) GetVisibilities() []*Visibility {
	if m != nil {
		return m.Visibilities
	}
	return nil
}

func (m *SlaveDescription) GetSchedDomain() string {
	if m != nil && m.SchedDomain != nil {
		return *m.SchedDomain
	}
	return ""
}

func (m *SlaveDescription) GetPreferences() []*SlotPreferenceConfig {
	if m != nil {
		return m.Preferences
	}
	return nil
}

func (m *SlaveDescription) GetSchedulability() *SlaveSchedulability {
	if m != nil {
		return m.Schedulability
	}
	return nil
}

type SlaveSchedulability struct {
	Scheduler            *string  `protobuf:"bytes,1,opt,name=scheduler,def=hippo" json:"scheduler,omitempty"`
	Schedulable          *bool    `protobuf:"varint,2,opt,name=schedulable,def=1" json:"schedulable,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *SlaveSchedulability) Reset()         { *m = SlaveSchedulability{} }
func (m *SlaveSchedulability) String() string { return proto.CompactTextString(m) }
func (*SlaveSchedulability) ProtoMessage()    {}
func (*SlaveSchedulability) Descriptor() ([]byte, []int) {
	return fileDescriptor_ee72d9a89737215c, []int{11}
}
func (m *SlaveSchedulability) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *SlaveSchedulability) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_SlaveSchedulability.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *SlaveSchedulability) XXX_Merge(src proto.Message) {
	xxx_messageInfo_SlaveSchedulability.Merge(m, src)
}
func (m *SlaveSchedulability) XXX_Size() int {
	return m.Size()
}
func (m *SlaveSchedulability) XXX_DiscardUnknown() {
	xxx_messageInfo_SlaveSchedulability.DiscardUnknown(m)
}

var xxx_messageInfo_SlaveSchedulability proto.InternalMessageInfo

const Default_SlaveSchedulability_Scheduler string = "hippo"
const Default_SlaveSchedulability_Schedulable bool = true

func (m *SlaveSchedulability) GetScheduler() string {
	if m != nil && m.Scheduler != nil {
		return *m.Scheduler
	}
	return Default_SlaveSchedulability_Scheduler
}

func (m *SlaveSchedulability) GetSchedulable() bool {
	if m != nil && m.Schedulable != nil {
		return *m.Schedulable
	}
	return Default_SlaveSchedulability_Schedulable
}

type SlotPreference struct {
	Preftag              *PreferenceTag `protobuf:"varint,1,opt,name=preftag,enum=hippo.PreferenceTag,def=0" json:"preftag,omitempty"`
	XXX_NoUnkeyedLiteral struct{}       `json:"-"`
	XXX_unrecognized     []byte         `json:"-"`
	XXX_sizecache        int32          `json:"-"`
}

func (m *SlotPreference) Reset()         { *m = SlotPreference{} }
func (m *SlotPreference) String() string { return proto.CompactTextString(m) }
func (*SlotPreference) ProtoMessage()    {}
func (*SlotPreference) Descriptor() ([]byte, []int) {
	return fileDescriptor_ee72d9a89737215c, []int{12}
}
func (m *SlotPreference) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *SlotPreference) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_SlotPreference.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *SlotPreference) XXX_Merge(src proto.Message) {
	xxx_messageInfo_SlotPreference.Merge(m, src)
}
func (m *SlotPreference) XXX_Size() int {
	return m.Size()
}
func (m *SlotPreference) XXX_DiscardUnknown() {
	xxx_messageInfo_SlotPreference.DiscardUnknown(m)
}

var xxx_messageInfo_SlotPreference proto.InternalMessageInfo

const Default_SlotPreference_Preftag PreferenceTag = PreferenceTag_PREF_NORMAL

func (m *SlotPreference) GetPreftag() PreferenceTag {
	if m != nil && m.Preftag != nil {
		return *m.Preftag
	}
	return Default_SlotPreference_Preftag
}

type SlotPreferenceConfig struct {
	Pattern              *string        `protobuf:"bytes,1,opt,name=pattern" json:"pattern,omitempty"`
	Preftag              *PreferenceTag `protobuf:"varint,2,opt,name=preftag,enum=hippo.PreferenceTag,def=0" json:"preftag,omitempty"`
	XXX_NoUnkeyedLiteral struct{}       `json:"-"`
	XXX_unrecognized     []byte         `json:"-"`
	XXX_sizecache        int32          `json:"-"`
}

func (m *SlotPreferenceConfig) Reset()         { *m = SlotPreferenceConfig{} }
func (m *SlotPreferenceConfig) String() string { return proto.CompactTextString(m) }
func (*SlotPreferenceConfig) ProtoMessage()    {}
func (*SlotPreferenceConfig) Descriptor() ([]byte, []int) {
	return fileDescriptor_ee72d9a89737215c, []int{13}
}
func (m *SlotPreferenceConfig) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *SlotPreferenceConfig) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_SlotPreferenceConfig.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *SlotPreferenceConfig) XXX_Merge(src proto.Message) {
	xxx_messageInfo_SlotPreferenceConfig.Merge(m, src)
}
func (m *SlotPreferenceConfig) XXX_Size() int {
	return m.Size()
}
func (m *SlotPreferenceConfig) XXX_DiscardUnknown() {
	xxx_messageInfo_SlotPreferenceConfig.DiscardUnknown(m)
}

var xxx_messageInfo_SlotPreferenceConfig proto.InternalMessageInfo

const Default_SlotPreferenceConfig_Preftag PreferenceTag = PreferenceTag_PREF_NORMAL

func (m *SlotPreferenceConfig) GetPattern() string {
	if m != nil && m.Pattern != nil {
		return *m.Pattern
	}
	return ""
}

func (m *SlotPreferenceConfig) GetPreftag() PreferenceTag {
	if m != nil && m.Preftag != nil {
		return *m.Preftag
	}
	return Default_SlotPreferenceConfig_Preftag
}

type Visibility struct {
	Scope                *Visibility_VisibilityScope    `protobuf:"varint,1,opt,name=scope,enum=hippo.Visibility_VisibilityScope,def=0" json:"scope,omitempty"`
	Op                   *Visibility_VisibilityOperator `protobuf:"varint,2,opt,name=op,enum=hippo.Visibility_VisibilityOperator,def=0" json:"op,omitempty"`
	Pattern              *string                        `protobuf:"bytes,3,opt,name=pattern" json:"pattern,omitempty"`
	Limit                *int32                         `protobuf:"varint,4,opt,name=limit,def=1000000" json:"limit,omitempty"`
	XXX_NoUnkeyedLiteral struct{}                       `json:"-"`
	XXX_unrecognized     []byte                         `json:"-"`
	XXX_sizecache        int32                          `json:"-"`
}

func (m *Visibility) Reset()         { *m = Visibility{} }
func (m *Visibility) String() string { return proto.CompactTextString(m) }
func (*Visibility) ProtoMessage()    {}
func (*Visibility) Descriptor() ([]byte, []int) {
	return fileDescriptor_ee72d9a89737215c, []int{14}
}
func (m *Visibility) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *Visibility) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_Visibility.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *Visibility) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Visibility.Merge(m, src)
}
func (m *Visibility) XXX_Size() int {
	return m.Size()
}
func (m *Visibility) XXX_DiscardUnknown() {
	xxx_messageInfo_Visibility.DiscardUnknown(m)
}

var xxx_messageInfo_Visibility proto.InternalMessageInfo

const Default_Visibility_Scope Visibility_VisibilityScope = Visibility_GLOBAL
const Default_Visibility_Op Visibility_VisibilityOperator = Visibility_IN
const Default_Visibility_Limit int32 = 1000000

func (m *Visibility) GetScope() Visibility_VisibilityScope {
	if m != nil && m.Scope != nil {
		return *m.Scope
	}
	return Default_Visibility_Scope
}

func (m *Visibility) GetOp() Visibility_VisibilityOperator {
	if m != nil && m.Op != nil {
		return *m.Op
	}
	return Default_Visibility_Op
}

func (m *Visibility) GetPattern() string {
	if m != nil && m.Pattern != nil {
		return *m.Pattern
	}
	return ""
}

func (m *Visibility) GetLimit() int32 {
	if m != nil && m.Limit != nil {
		return *m.Limit
	}
	return Default_Visibility_Limit
}

type ApplicationSlotConfig struct {
	WorkDirStyle         *ApplicationSlotConfig_WorkDirStyle `protobuf:"varint,1,opt,name=workDirStyle,enum=hippo.ApplicationSlotConfig_WorkDirStyle,def=0" json:"workDirStyle,omitempty"`
	BinaryCacheNamespace *string                             `protobuf:"bytes,2,opt,name=binaryCacheNamespace" json:"binaryCacheNamespace,omitempty"`
	XXX_NoUnkeyedLiteral struct{}                            `json:"-"`
	XXX_unrecognized     []byte                              `json:"-"`
	XXX_sizecache        int32                               `json:"-"`
}

func (m *ApplicationSlotConfig) Reset()         { *m = ApplicationSlotConfig{} }
func (m *ApplicationSlotConfig) String() string { return proto.CompactTextString(m) }
func (*ApplicationSlotConfig) ProtoMessage()    {}
func (*ApplicationSlotConfig) Descriptor() ([]byte, []int) {
	return fileDescriptor_ee72d9a89737215c, []int{15}
}
func (m *ApplicationSlotConfig) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *ApplicationSlotConfig) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_ApplicationSlotConfig.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *ApplicationSlotConfig) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ApplicationSlotConfig.Merge(m, src)
}
func (m *ApplicationSlotConfig) XXX_Size() int {
	return m.Size()
}
func (m *ApplicationSlotConfig) XXX_DiscardUnknown() {
	xxx_messageInfo_ApplicationSlotConfig.DiscardUnknown(m)
}

var xxx_messageInfo_ApplicationSlotConfig proto.InternalMessageInfo

const Default_ApplicationSlotConfig_WorkDirStyle ApplicationSlotConfig_WorkDirStyle = ApplicationSlotConfig_APP_STYLE

func (m *ApplicationSlotConfig) GetWorkDirStyle() ApplicationSlotConfig_WorkDirStyle {
	if m != nil && m.WorkDirStyle != nil {
		return *m.WorkDirStyle
	}
	return Default_ApplicationSlotConfig_WorkDirStyle
}

func (m *ApplicationSlotConfig) GetBinaryCacheNamespace() string {
	if m != nil && m.BinaryCacheNamespace != nil {
		return *m.BinaryCacheNamespace
	}
	return ""
}

type ResourceRequest struct {
	Tag                  *string                       `protobuf:"bytes,1,opt,name=tag" json:"tag,omitempty"`
	Options              []*SlotResource               `protobuf:"bytes,2,rep,name=options" json:"options,omitempty"`
	Count                *int32                        `protobuf:"varint,3,opt,name=count" json:"count,omitempty"`
	Declarations         []*Resource                   `protobuf:"bytes,4,rep,name=declarations" json:"declarations,omitempty"`
	AllocateMode         *ResourceRequest_AllocateMode `protobuf:"varint,5,opt,name=allocateMode,enum=hippo.ResourceRequest_AllocateMode,def=2" json:"allocateMode,omitempty"`
	Queue                *string                       `protobuf:"bytes,6,opt,name=queue" json:"queue,omitempty"`
	Priority             *Priority                     `protobuf:"bytes,7,opt,name=priority" json:"priority,omitempty"`
	GroupId              *string                       `protobuf:"bytes,8,opt,name=groupId" json:"groupId,omitempty"`
	MetaTags             []*Parameter                  `protobuf:"bytes,9,rep,name=metaTags" json:"metaTags,omitempty"`
	UseCpuset            *bool                         `protobuf:"varint,10,opt,name=useCpuset,def=0" json:"useCpuset,omitempty"`
	SpreadLevel          *ResourceRequest_SpreadLevel  `protobuf:"varint,11,opt,name=spreadLevel,enum=hippo.ResourceRequest_SpreadLevel,def=1" json:"spreadLevel,omitempty"`
	MaxInstancePerHost   *int32                        `protobuf:"varint,12,opt,name=maxInstancePerHost" json:"maxInstancePerHost,omitempty"`
	MaxInstancePerFrame  *int32                        `protobuf:"varint,13,opt,name=maxInstancePerFrame" json:"maxInstancePerFrame,omitempty"`
	MaxInstancePerRack   *int32                        `protobuf:"varint,14,opt,name=maxInstancePerRack" json:"maxInstancePerRack,omitempty"`
	MaxInstancePerASW    *int32                        `protobuf:"varint,15,opt,name=maxInstancePerASW" json:"maxInstancePerASW,omitempty"`
	MaxInstancePerPSW    *int32                        `protobuf:"varint,16,opt,name=maxInstancePerPSW" json:"maxInstancePerPSW,omitempty"`
	SpecifiedIps         []string                      `protobuf:"bytes,17,rep,name=specifiedIps" json:"specifiedIps,omitempty"`
	ProhibitedIps        []string                      `protobuf:"bytes,18,rep,name=prohibitedIps" json:"prohibitedIps,omitempty"`
	RequirementId        *string                       `protobuf:"bytes,19,opt,name=requirementId" json:"requirementId,omitempty"`
	Strictly             *bool                         `protobuf:"varint,20,opt,name=strictly" json:"strictly,omitempty"`
	CpusetMode           *ResourceRequest_CpusetMode   `protobuf:"varint,21,opt,name=cpusetMode,enum=hippo.ResourceRequest_CpusetMode" json:"cpusetMode,omitempty"`
	UseHostWorkDir       *bool                         `protobuf:"varint,22,opt,name=useHostWorkDir,def=1" json:"useHostWorkDir,omitempty"`
	ErrorMsg             *string                       `protobuf:"bytes,23,opt,name=errorMsg" json:"errorMsg,omitempty"`
	ContainerConfigs     []string                      `protobuf:"bytes,24,rep,name=containerConfigs" json:"containerConfigs,omitempty"`
	RequestNs            *string                       `protobuf:"bytes,25,opt,name=requestNs" json:"requestNs,omitempty"`
	FedPayloads          []*Parameter                  `protobuf:"bytes,26,rep,name=fedPayloads" json:"fedPayloads,omitempty"`
	LaunchTemplate       *ProcessLaunchContext         `protobuf:"bytes,27,opt,name=launchTemplate" json:"launchTemplate,omitempty"`
	LaunchSignature      *int64                        `protobuf:"varint,28,opt,name=launchSignature" json:"launchSignature,omitempty"`
	PackageChecksum      *string                       `protobuf:"bytes,29,opt,name=packageChecksum" json:"packageChecksum,omitempty"`
	XXX_NoUnkeyedLiteral struct{}                      `json:"-"`
	XXX_unrecognized     []byte                        `json:"-"`
	XXX_sizecache        int32                         `json:"-"`
}

func (m *ResourceRequest) Reset()         { *m = ResourceRequest{} }
func (m *ResourceRequest) String() string { return proto.CompactTextString(m) }
func (*ResourceRequest) ProtoMessage()    {}
func (*ResourceRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_ee72d9a89737215c, []int{16}
}
func (m *ResourceRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *ResourceRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_ResourceRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *ResourceRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ResourceRequest.Merge(m, src)
}
func (m *ResourceRequest) XXX_Size() int {
	return m.Size()
}
func (m *ResourceRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_ResourceRequest.DiscardUnknown(m)
}

var xxx_messageInfo_ResourceRequest proto.InternalMessageInfo

const Default_ResourceRequest_AllocateMode ResourceRequest_AllocateMode = ResourceRequest_AUTO
const Default_ResourceRequest_UseCpuset bool = false
const Default_ResourceRequest_SpreadLevel ResourceRequest_SpreadLevel = ResourceRequest_HOST
const Default_ResourceRequest_UseHostWorkDir bool = true

func (m *ResourceRequest) GetTag() string {
	if m != nil && m.Tag != nil {
		return *m.Tag
	}
	return ""
}

func (m *ResourceRequest) GetOptions() []*SlotResource {
	if m != nil {
		return m.Options
	}
	return nil
}

func (m *ResourceRequest) GetCount() int32 {
	if m != nil && m.Count != nil {
		return *m.Count
	}
	return 0
}

func (m *ResourceRequest) GetDeclarations() []*Resource {
	if m != nil {
		return m.Declarations
	}
	return nil
}

func (m *ResourceRequest) GetAllocateMode() ResourceRequest_AllocateMode {
	if m != nil && m.AllocateMode != nil {
		return *m.AllocateMode
	}
	return Default_ResourceRequest_AllocateMode
}

func (m *ResourceRequest) GetQueue() string {
	if m != nil && m.Queue != nil {
		return *m.Queue
	}
	return ""
}

func (m *ResourceRequest) GetPriority() *Priority {
	if m != nil {
		return m.Priority
	}
	return nil
}

func (m *ResourceRequest) GetGroupId() string {
	if m != nil && m.GroupId != nil {
		return *m.GroupId
	}
	return ""
}

func (m *ResourceRequest) GetMetaTags() []*Parameter {
	if m != nil {
		return m.MetaTags
	}
	return nil
}

func (m *ResourceRequest) GetUseCpuset() bool {
	if m != nil && m.UseCpuset != nil {
		return *m.UseCpuset
	}
	return Default_ResourceRequest_UseCpuset
}

func (m *ResourceRequest) GetSpreadLevel() ResourceRequest_SpreadLevel {
	if m != nil && m.SpreadLevel != nil {
		return *m.SpreadLevel
	}
	return Default_ResourceRequest_SpreadLevel
}

func (m *ResourceRequest) GetMaxInstancePerHost() int32 {
	if m != nil && m.MaxInstancePerHost != nil {
		return *m.MaxInstancePerHost
	}
	return 0
}

func (m *ResourceRequest) GetMaxInstancePerFrame() int32 {
	if m != nil && m.MaxInstancePerFrame != nil {
		return *m.MaxInstancePerFrame
	}
	return 0
}

func (m *ResourceRequest) GetMaxInstancePerRack() int32 {
	if m != nil && m.MaxInstancePerRack != nil {
		return *m.MaxInstancePerRack
	}
	return 0
}

func (m *ResourceRequest) GetMaxInstancePerASW() int32 {
	if m != nil && m.MaxInstancePerASW != nil {
		return *m.MaxInstancePerASW
	}
	return 0
}

func (m *ResourceRequest) GetMaxInstancePerPSW() int32 {
	if m != nil && m.MaxInstancePerPSW != nil {
		return *m.MaxInstancePerPSW
	}
	return 0
}

func (m *ResourceRequest) GetSpecifiedIps() []string {
	if m != nil {
		return m.SpecifiedIps
	}
	return nil
}

func (m *ResourceRequest) GetProhibitedIps() []string {
	if m != nil {
		return m.ProhibitedIps
	}
	return nil
}

func (m *ResourceRequest) GetRequirementId() string {
	if m != nil && m.RequirementId != nil {
		return *m.RequirementId
	}
	return ""
}

func (m *ResourceRequest) GetStrictly() bool {
	if m != nil && m.Strictly != nil {
		return *m.Strictly
	}
	return false
}

func (m *ResourceRequest) GetCpusetMode() ResourceRequest_CpusetMode {
	if m != nil && m.CpusetMode != nil {
		return *m.CpusetMode
	}
	return ResourceRequest_NONE
}

func (m *ResourceRequest) GetUseHostWorkDir() bool {
	if m != nil && m.UseHostWorkDir != nil {
		return *m.UseHostWorkDir
	}
	return Default_ResourceRequest_UseHostWorkDir
}

func (m *ResourceRequest) GetErrorMsg() string {
	if m != nil && m.ErrorMsg != nil {
		return *m.ErrorMsg
	}
	return ""
}

func (m *ResourceRequest) GetContainerConfigs() []string {
	if m != nil {
		return m.ContainerConfigs
	}
	return nil
}

func (m *ResourceRequest) GetRequestNs() string {
	if m != nil && m.RequestNs != nil {
		return *m.RequestNs
	}
	return ""
}

func (m *ResourceRequest) GetFedPayloads() []*Parameter {
	if m != nil {
		return m.FedPayloads
	}
	return nil
}

func (m *ResourceRequest) GetLaunchTemplate() *ProcessLaunchContext {
	if m != nil {
		return m.LaunchTemplate
	}
	return nil
}

func (m *ResourceRequest) GetLaunchSignature() int64 {
	if m != nil && m.LaunchSignature != nil {
		return *m.LaunchSignature
	}
	return 0
}

func (m *ResourceRequest) GetPackageChecksum() string {
	if m != nil && m.PackageChecksum != nil {
		return *m.PackageChecksum
	}
	return ""
}

type ApplicationDescription struct {
	ApplicationId           *string                               `protobuf:"bytes,1,opt,name=applicationId" json:"applicationId,omitempty"`
	AppChecksum             *int64                                `protobuf:"varint,2,opt,name=appChecksum" json:"appChecksum,omitempty"`
	User                    *string                               `protobuf:"bytes,3,opt,name=user" json:"user,omitempty"`
	ReplicaCount            *int32                                `protobuf:"varint,4,opt,name=replicaCount,def=1" json:"replicaCount,omitempty"`
	RequiredResource        *SlotResource                         `protobuf:"bytes,5,opt,name=requiredResource" json:"requiredResource,omitempty"`
	ProcessLaunchContext    *ProcessLaunchContext                 `protobuf:"bytes,6,opt,name=processLaunchContext" json:"processLaunchContext,omitempty"`
	OldSlotPriorityKeepTime *int64                                `protobuf:"varint,7,opt,name=oldSlotPriorityKeepTime,def=0" json:"oldSlotPriorityKeepTime,omitempty"`
	ExclusiveMode           *ApplicationDescription_ExclusiveMode `protobuf:"varint,8,opt,name=exclusiveMode,enum=hippo.ApplicationDescription_ExclusiveMode,def=0" json:"exclusiveMode,omitempty"`
	SlotConfig              *ApplicationSlotConfig                `protobuf:"bytes,9,opt,name=slotConfig" json:"slotConfig,omitempty"`
	Queue                   *string                               `protobuf:"bytes,10,opt,name=queue" json:"queue,omitempty"`
	Status                  *ApplicationDescription_Status        `protobuf:"varint,11,opt,name=status,enum=hippo.ApplicationDescription_Status,def=0" json:"status,omitempty"`
	AllocateMode            *ResourceRequest_AllocateMode         `protobuf:"varint,12,opt,name=allocateMode,enum=hippo.ResourceRequest_AllocateMode,def=2" json:"allocateMode,omitempty"`
	Priority                *Priority                             `protobuf:"bytes,13,opt,name=priority" json:"priority,omitempty"`
	ConstraintPolicy        *uint64                               `protobuf:"varint,14,opt,name=constraintPolicy" json:"constraintPolicy,omitempty"`
	GroupId                 *string                               `protobuf:"bytes,15,opt,name=groupId" json:"groupId,omitempty"`
	Declarations            []*Resource                           `protobuf:"bytes,16,rep,name=declarations" json:"declarations,omitempty"`
	UseCpuset               *bool                                 `protobuf:"varint,17,opt,name=useCpuset,def=0" json:"useCpuset,omitempty"`
	CpusetMode              *ResourceRequest_CpusetMode           `protobuf:"varint,18,opt,name=cpusetMode,enum=hippo.ResourceRequest_CpusetMode" json:"cpusetMode,omitempty"`
	ContainerConfigs        []string                              `protobuf:"bytes,19,rep,name=containerConfigs" json:"containerConfigs,omitempty"`
	ReserveTime             *int64                                `protobuf:"varint,20,opt,name=reserveTime,def=0" json:"reserveTime,omitempty"`
	RequestNs               *string                               `protobuf:"bytes,21,opt,name=requestNs" json:"requestNs,omitempty"`
	YarnApplicationId       *string                               `protobuf:"bytes,22,opt,name=yarnApplicationId" json:"yarnApplicationId,omitempty"`
	Labels                  []*Parameter                          `protobuf:"bytes,23,rep,name=labels" json:"labels,omitempty"`
	SubmitTime              *int64                                `protobuf:"varint,24,opt,name=submitTime,def=0" json:"submitTime,omitempty"`
	Version                 *string                               `protobuf:"bytes,25,opt,name=version,def=1.0" json:"version,omitempty"`
	Scheduler               *string                               `protobuf:"bytes,26,opt,name=scheduler,def=hippo" json:"scheduler,omitempty"`
	XXX_NoUnkeyedLiteral    struct{}                              `json:"-"`
	XXX_unrecognized        []byte                                `json:"-"`
	XXX_sizecache           int32                                 `json:"-"`
}

func (m *ApplicationDescription) Reset()         { *m = ApplicationDescription{} }
func (m *ApplicationDescription) String() string { return proto.CompactTextString(m) }
func (*ApplicationDescription) ProtoMessage()    {}
func (*ApplicationDescription) Descriptor() ([]byte, []int) {
	return fileDescriptor_ee72d9a89737215c, []int{17}
}
func (m *ApplicationDescription) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *ApplicationDescription) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_ApplicationDescription.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *ApplicationDescription) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ApplicationDescription.Merge(m, src)
}
func (m *ApplicationDescription) XXX_Size() int {
	return m.Size()
}
func (m *ApplicationDescription) XXX_DiscardUnknown() {
	xxx_messageInfo_ApplicationDescription.DiscardUnknown(m)
}

var xxx_messageInfo_ApplicationDescription proto.InternalMessageInfo

const Default_ApplicationDescription_ReplicaCount int32 = 1
const Default_ApplicationDescription_OldSlotPriorityKeepTime int64 = 0
const Default_ApplicationDescription_ExclusiveMode ApplicationDescription_ExclusiveMode = ApplicationDescription_APP
const Default_ApplicationDescription_Status ApplicationDescription_Status = ApplicationDescription_ACTIVE
const Default_ApplicationDescription_AllocateMode ResourceRequest_AllocateMode = ResourceRequest_AUTO
const Default_ApplicationDescription_UseCpuset bool = false
const Default_ApplicationDescription_ReserveTime int64 = 0
const Default_ApplicationDescription_SubmitTime int64 = 0
const Default_ApplicationDescription_Version string = "1.0"
const Default_ApplicationDescription_Scheduler string = "hippo"

func (m *ApplicationDescription) GetApplicationId() string {
	if m != nil && m.ApplicationId != nil {
		return *m.ApplicationId
	}
	return ""
}

func (m *ApplicationDescription) GetAppChecksum() int64 {
	if m != nil && m.AppChecksum != nil {
		return *m.AppChecksum
	}
	return 0
}

func (m *ApplicationDescription) GetUser() string {
	if m != nil && m.User != nil {
		return *m.User
	}
	return ""
}

func (m *ApplicationDescription) GetReplicaCount() int32 {
	if m != nil && m.ReplicaCount != nil {
		return *m.ReplicaCount
	}
	return Default_ApplicationDescription_ReplicaCount
}

func (m *ApplicationDescription) GetRequiredResource() *SlotResource {
	if m != nil {
		return m.RequiredResource
	}
	return nil
}

func (m *ApplicationDescription) GetProcessLaunchContext() *ProcessLaunchContext {
	if m != nil {
		return m.ProcessLaunchContext
	}
	return nil
}

func (m *ApplicationDescription) GetOldSlotPriorityKeepTime() int64 {
	if m != nil && m.OldSlotPriorityKeepTime != nil {
		return *m.OldSlotPriorityKeepTime
	}
	return Default_ApplicationDescription_OldSlotPriorityKeepTime
}

func (m *ApplicationDescription) GetExclusiveMode() ApplicationDescription_ExclusiveMode {
	if m != nil && m.ExclusiveMode != nil {
		return *m.ExclusiveMode
	}
	return Default_ApplicationDescription_ExclusiveMode
}

func (m *ApplicationDescription) GetSlotConfig() *ApplicationSlotConfig {
	if m != nil {
		return m.SlotConfig
	}
	return nil
}

func (m *ApplicationDescription) GetQueue() string {
	if m != nil && m.Queue != nil {
		return *m.Queue
	}
	return ""
}

func (m *ApplicationDescription) GetStatus() ApplicationDescription_Status {
	if m != nil && m.Status != nil {
		return *m.Status
	}
	return Default_ApplicationDescription_Status
}

func (m *ApplicationDescription) GetAllocateMode() ResourceRequest_AllocateMode {
	if m != nil && m.AllocateMode != nil {
		return *m.AllocateMode
	}
	return Default_ApplicationDescription_AllocateMode
}

func (m *ApplicationDescription) GetPriority() *Priority {
	if m != nil {
		return m.Priority
	}
	return nil
}

func (m *ApplicationDescription) GetConstraintPolicy() uint64 {
	if m != nil && m.ConstraintPolicy != nil {
		return *m.ConstraintPolicy
	}
	return 0
}

func (m *ApplicationDescription) GetGroupId() string {
	if m != nil && m.GroupId != nil {
		return *m.GroupId
	}
	return ""
}

func (m *ApplicationDescription) GetDeclarations() []*Resource {
	if m != nil {
		return m.Declarations
	}
	return nil
}

func (m *ApplicationDescription) GetUseCpuset() bool {
	if m != nil && m.UseCpuset != nil {
		return *m.UseCpuset
	}
	return Default_ApplicationDescription_UseCpuset
}

func (m *ApplicationDescription) GetCpusetMode() ResourceRequest_CpusetMode {
	if m != nil && m.CpusetMode != nil {
		return *m.CpusetMode
	}
	return ResourceRequest_NONE
}

func (m *ApplicationDescription) GetContainerConfigs() []string {
	if m != nil {
		return m.ContainerConfigs
	}
	return nil
}

func (m *ApplicationDescription) GetReserveTime() int64 {
	if m != nil && m.ReserveTime != nil {
		return *m.ReserveTime
	}
	return Default_ApplicationDescription_ReserveTime
}

func (m *ApplicationDescription) GetRequestNs() string {
	if m != nil && m.RequestNs != nil {
		return *m.RequestNs
	}
	return ""
}

func (m *ApplicationDescription) GetYarnApplicationId() string {
	if m != nil && m.YarnApplicationId != nil {
		return *m.YarnApplicationId
	}
	return ""
}

func (m *ApplicationDescription) GetLabels() []*Parameter {
	if m != nil {
		return m.Labels
	}
	return nil
}

func (m *ApplicationDescription) GetSubmitTime() int64 {
	if m != nil && m.SubmitTime != nil {
		return *m.SubmitTime
	}
	return Default_ApplicationDescription_SubmitTime
}

func (m *ApplicationDescription) GetVersion() string {
	if m != nil && m.Version != nil {
		return *m.Version
	}
	return Default_ApplicationDescription_Version
}

func (m *ApplicationDescription) GetScheduler() string {
	if m != nil && m.Scheduler != nil {
		return *m.Scheduler
	}
	return Default_ApplicationDescription_Scheduler
}

type QueueResource struct {
	Resources            []*Resource `protobuf:"bytes,1,rep,name=resources" json:"resources,omitempty"`
	MinCount             *int32      `protobuf:"varint,2,opt,name=minCount" json:"minCount,omitempty"`
	MaxCount             *int32      `protobuf:"varint,3,opt,name=maxCount" json:"maxCount,omitempty"`
	AllocatedSlaves      *int32      `protobuf:"varint,4,opt,name=allocatedSlaves" json:"allocatedSlaves,omitempty"`
	OverAllocateQuota    *int32      `protobuf:"varint,5,opt,name=overAllocateQuota" json:"overAllocateQuota,omitempty"`
	XXX_NoUnkeyedLiteral struct{}    `json:"-"`
	XXX_unrecognized     []byte      `json:"-"`
	XXX_sizecache        int32       `json:"-"`
}

func (m *QueueResource) Reset()         { *m = QueueResource{} }
func (m *QueueResource) String() string { return proto.CompactTextString(m) }
func (*QueueResource) ProtoMessage()    {}
func (*QueueResource) Descriptor() ([]byte, []int) {
	return fileDescriptor_ee72d9a89737215c, []int{18}
}
func (m *QueueResource) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueueResource) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueueResource.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueueResource) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueueResource.Merge(m, src)
}
func (m *QueueResource) XXX_Size() int {
	return m.Size()
}
func (m *QueueResource) XXX_DiscardUnknown() {
	xxx_messageInfo_QueueResource.DiscardUnknown(m)
}

var xxx_messageInfo_QueueResource proto.InternalMessageInfo

func (m *QueueResource) GetResources() []*Resource {
	if m != nil {
		return m.Resources
	}
	return nil
}

func (m *QueueResource) GetMinCount() int32 {
	if m != nil && m.MinCount != nil {
		return *m.MinCount
	}
	return 0
}

func (m *QueueResource) GetMaxCount() int32 {
	if m != nil && m.MaxCount != nil {
		return *m.MaxCount
	}
	return 0
}

func (m *QueueResource) GetAllocatedSlaves() int32 {
	if m != nil && m.AllocatedSlaves != nil {
		return *m.AllocatedSlaves
	}
	return 0
}

func (m *QueueResource) GetOverAllocateQuota() int32 {
	if m != nil && m.OverAllocateQuota != nil {
		return *m.OverAllocateQuota
	}
	return 0
}

type QueueDescription struct {
	Name                 *string                        `protobuf:"bytes,1,opt,name=name" json:"name,omitempty"`
	QueueResource        []*QueueResource               `protobuf:"bytes,2,rep,name=queueResource" json:"queueResource,omitempty"`
	QueueType            *QueueDescription_QueueType    `protobuf:"varint,3,opt,name=queueType,enum=hippo.QueueDescription_QueueType" json:"queueType,omitempty"`
	ScheduleMode         *QueueDescription_ScheduleMode `protobuf:"varint,4,opt,name=scheduleMode,enum=hippo.QueueDescription_ScheduleMode" json:"scheduleMode,omitempty"`
	LeaseRatio           *int32                         `protobuf:"varint,5,opt,name=leaseRatio" json:"leaseRatio,omitempty"`
	XXX_NoUnkeyedLiteral struct{}                       `json:"-"`
	XXX_unrecognized     []byte                         `json:"-"`
	XXX_sizecache        int32                          `json:"-"`
}

func (m *QueueDescription) Reset()         { *m = QueueDescription{} }
func (m *QueueDescription) String() string { return proto.CompactTextString(m) }
func (*QueueDescription) ProtoMessage()    {}
func (*QueueDescription) Descriptor() ([]byte, []int) {
	return fileDescriptor_ee72d9a89737215c, []int{19}
}
func (m *QueueDescription) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueueDescription) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueueDescription.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueueDescription) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueueDescription.Merge(m, src)
}
func (m *QueueDescription) XXX_Size() int {
	return m.Size()
}
func (m *QueueDescription) XXX_DiscardUnknown() {
	xxx_messageInfo_QueueDescription.DiscardUnknown(m)
}

var xxx_messageInfo_QueueDescription proto.InternalMessageInfo

func (m *QueueDescription) GetName() string {
	if m != nil && m.Name != nil {
		return *m.Name
	}
	return ""
}

func (m *QueueDescription) GetQueueResource() []*QueueResource {
	if m != nil {
		return m.QueueResource
	}
	return nil
}

func (m *QueueDescription) GetQueueType() QueueDescription_QueueType {
	if m != nil && m.QueueType != nil {
		return *m.QueueType
	}
	return QueueDescription_STATIC_RESOURCE_QUEUE
}

func (m *QueueDescription) GetScheduleMode() QueueDescription_ScheduleMode {
	if m != nil && m.ScheduleMode != nil {
		return *m.ScheduleMode
	}
	return QueueDescription_SPREADOUT
}

func (m *QueueDescription) GetLeaseRatio() int32 {
	if m != nil && m.LeaseRatio != nil {
		return *m.LeaseRatio
	}
	return 0
}

type PodTraceInfo struct {
	Uid                  *string  `protobuf:"bytes,1,opt,name=uid" json:"uid,omitempty"`
	ResourceTag          *string  `protobuf:"bytes,2,opt,name=resourceTag" json:"resourceTag,omitempty"`
	WorkdirTag           *string  `protobuf:"bytes,3,opt,name=workdirTag" json:"workdirTag,omitempty"`
	FederatedCluster     *string  `protobuf:"bytes,4,opt,name=federatedCluster" json:"federatedCluster,omitempty"`
	ErrorMsg             *string  `protobuf:"bytes,5,opt,name=errorMsg" json:"errorMsg,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *PodTraceInfo) Reset()         { *m = PodTraceInfo{} }
func (m *PodTraceInfo) String() string { return proto.CompactTextString(m) }
func (*PodTraceInfo) ProtoMessage()    {}
func (*PodTraceInfo) Descriptor() ([]byte, []int) {
	return fileDescriptor_ee72d9a89737215c, []int{20}
}
func (m *PodTraceInfo) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *PodTraceInfo) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_PodTraceInfo.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *PodTraceInfo) XXX_Merge(src proto.Message) {
	xxx_messageInfo_PodTraceInfo.Merge(m, src)
}
func (m *PodTraceInfo) XXX_Size() int {
	return m.Size()
}
func (m *PodTraceInfo) XXX_DiscardUnknown() {
	xxx_messageInfo_PodTraceInfo.DiscardUnknown(m)
}

var xxx_messageInfo_PodTraceInfo proto.InternalMessageInfo

func (m *PodTraceInfo) GetUid() string {
	if m != nil && m.Uid != nil {
		return *m.Uid
	}
	return ""
}

func (m *PodTraceInfo) GetResourceTag() string {
	if m != nil && m.ResourceTag != nil {
		return *m.ResourceTag
	}
	return ""
}

func (m *PodTraceInfo) GetWorkdirTag() string {
	if m != nil && m.WorkdirTag != nil {
		return *m.WorkdirTag
	}
	return ""
}

func (m *PodTraceInfo) GetFederatedCluster() string {
	if m != nil && m.FederatedCluster != nil {
		return *m.FederatedCluster
	}
	return ""
}

func (m *PodTraceInfo) GetErrorMsg() string {
	if m != nil && m.ErrorMsg != nil {
		return *m.ErrorMsg
	}
	return ""
}

type ResourceResponse struct {
	ResourceTag          *string         `protobuf:"bytes,1,opt,name=resourceTag" json:"resourceTag,omitempty"`
	AssignedSlots        []*AssignedSlot `protobuf:"bytes,2,rep,name=assignedSlots" json:"assignedSlots,omitempty"`
	ErrorMsg             *string         `protobuf:"bytes,3,opt,name=errorMsg" json:"errorMsg,omitempty"`
	PendingPods          []*PodTraceInfo `protobuf:"bytes,4,rep,name=pendingPods" json:"pendingPods,omitempty"`
	PendingUpdatePods    []*PodTraceInfo `protobuf:"bytes,5,rep,name=pendingUpdatePods" json:"pendingUpdatePods,omitempty"`
	XXX_NoUnkeyedLiteral struct{}        `json:"-"`
	XXX_unrecognized     []byte          `json:"-"`
	XXX_sizecache        int32           `json:"-"`
}

func (m *ResourceResponse) Reset()         { *m = ResourceResponse{} }
func (m *ResourceResponse) String() string { return proto.CompactTextString(m) }
func (*ResourceResponse) ProtoMessage()    {}
func (*ResourceResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_ee72d9a89737215c, []int{21}
}
func (m *ResourceResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *ResourceResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_ResourceResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *ResourceResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ResourceResponse.Merge(m, src)
}
func (m *ResourceResponse) XXX_Size() int {
	return m.Size()
}
func (m *ResourceResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_ResourceResponse.DiscardUnknown(m)
}

var xxx_messageInfo_ResourceResponse proto.InternalMessageInfo

func (m *ResourceResponse) GetResourceTag() string {
	if m != nil && m.ResourceTag != nil {
		return *m.ResourceTag
	}
	return ""
}

func (m *ResourceResponse) GetAssignedSlots() []*AssignedSlot {
	if m != nil {
		return m.AssignedSlots
	}
	return nil
}

func (m *ResourceResponse) GetErrorMsg() string {
	if m != nil && m.ErrorMsg != nil {
		return *m.ErrorMsg
	}
	return ""
}

func (m *ResourceResponse) GetPendingPods() []*PodTraceInfo {
	if m != nil {
		return m.PendingPods
	}
	return nil
}

func (m *ResourceResponse) GetPendingUpdatePods() []*PodTraceInfo {
	if m != nil {
		return m.PendingUpdatePods
	}
	return nil
}

type SlaveStatus struct {
	Status               *SlaveStatus_Status `protobuf:"varint,1,opt,name=status,enum=hippo.SlaveStatus_Status" json:"status,omitempty"`
	XXX_NoUnkeyedLiteral struct{}            `json:"-"`
	XXX_unrecognized     []byte              `json:"-"`
	XXX_sizecache        int32               `json:"-"`
}

func (m *SlaveStatus) Reset()         { *m = SlaveStatus{} }
func (m *SlaveStatus) String() string { return proto.CompactTextString(m) }
func (*SlaveStatus) ProtoMessage()    {}
func (*SlaveStatus) Descriptor() ([]byte, []int) {
	return fileDescriptor_ee72d9a89737215c, []int{22}
}
func (m *SlaveStatus) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *SlaveStatus) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_SlaveStatus.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *SlaveStatus) XXX_Merge(src proto.Message) {
	xxx_messageInfo_SlaveStatus.Merge(m, src)
}
func (m *SlaveStatus) XXX_Size() int {
	return m.Size()
}
func (m *SlaveStatus) XXX_DiscardUnknown() {
	xxx_messageInfo_SlaveStatus.DiscardUnknown(m)
}

var xxx_messageInfo_SlaveStatus proto.InternalMessageInfo

func (m *SlaveStatus) GetStatus() SlaveStatus_Status {
	if m != nil && m.Status != nil {
		return *m.Status
	}
	return SlaveStatus_UNKNOWN
}

type SlaveHealth struct {
	IsHealthy            *bool                   `protobuf:"varint,1,opt,name=isHealthy,def=1" json:"isHealthy,omitempty"`
	Dp2Status            *SlaveHealth_HealthCode `protobuf:"varint,2,opt,name=dp2Status,enum=hippo.SlaveHealth_HealthCode,def=1" json:"dp2Status,omitempty"`
	EnvGuardStatus       *SlaveHealth_HealthCode `protobuf:"varint,3,opt,name=envGuardStatus,enum=hippo.SlaveHealth_HealthCode,def=1" json:"envGuardStatus,omitempty"`
	CommonStatus         *SlaveHealth_HealthCode `protobuf:"varint,4,opt,name=commonStatus,enum=hippo.SlaveHealth_HealthCode,def=1" json:"commonStatus,omitempty"`
	XXX_NoUnkeyedLiteral struct{}                `json:"-"`
	XXX_unrecognized     []byte                  `json:"-"`
	XXX_sizecache        int32                   `json:"-"`
}

func (m *SlaveHealth) Reset()         { *m = SlaveHealth{} }
func (m *SlaveHealth) String() string { return proto.CompactTextString(m) }
func (*SlaveHealth) ProtoMessage()    {}
func (*SlaveHealth) Descriptor() ([]byte, []int) {
	return fileDescriptor_ee72d9a89737215c, []int{23}
}
func (m *SlaveHealth) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *SlaveHealth) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_SlaveHealth.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *SlaveHealth) XXX_Merge(src proto.Message) {
	xxx_messageInfo_SlaveHealth.Merge(m, src)
}
func (m *SlaveHealth) XXX_Size() int {
	return m.Size()
}
func (m *SlaveHealth) XXX_DiscardUnknown() {
	xxx_messageInfo_SlaveHealth.DiscardUnknown(m)
}

var xxx_messageInfo_SlaveHealth proto.InternalMessageInfo

const Default_SlaveHealth_IsHealthy bool = true
const Default_SlaveHealth_Dp2Status SlaveHealth_HealthCode = SlaveHealth_HC_UNKNOWN
const Default_SlaveHealth_EnvGuardStatus SlaveHealth_HealthCode = SlaveHealth_HC_UNKNOWN
const Default_SlaveHealth_CommonStatus SlaveHealth_HealthCode = SlaveHealth_HC_UNKNOWN

func (m *SlaveHealth) GetIsHealthy() bool {
	if m != nil && m.IsHealthy != nil {
		return *m.IsHealthy
	}
	return Default_SlaveHealth_IsHealthy
}

func (m *SlaveHealth) GetDp2Status() SlaveHealth_HealthCode {
	if m != nil && m.Dp2Status != nil {
		return *m.Dp2Status
	}
	return Default_SlaveHealth_Dp2Status
}

func (m *SlaveHealth) GetEnvGuardStatus() SlaveHealth_HealthCode {
	if m != nil && m.EnvGuardStatus != nil {
		return *m.EnvGuardStatus
	}
	return Default_SlaveHealth_EnvGuardStatus
}

func (m *SlaveHealth) GetCommonStatus() SlaveHealth_HealthCode {
	if m != nil && m.CommonStatus != nil {
		return *m.CommonStatus
	}
	return Default_SlaveHealth_CommonStatus
}

type SystemStatus struct {
	Status               *SystemStatus_Status `protobuf:"varint,1,opt,name=status,enum=hippo.SystemStatus_Status" json:"status,omitempty"`
	XXX_NoUnkeyedLiteral struct{}             `json:"-"`
	XXX_unrecognized     []byte               `json:"-"`
	XXX_sizecache        int32                `json:"-"`
}

func (m *SystemStatus) Reset()         { *m = SystemStatus{} }
func (m *SystemStatus) String() string { return proto.CompactTextString(m) }
func (*SystemStatus) ProtoMessage()    {}
func (*SystemStatus) Descriptor() ([]byte, []int) {
	return fileDescriptor_ee72d9a89737215c, []int{24}
}
func (m *SystemStatus) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *SystemStatus) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_SystemStatus.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *SystemStatus) XXX_Merge(src proto.Message) {
	xxx_messageInfo_SystemStatus.Merge(m, src)
}
func (m *SystemStatus) XXX_Size() int {
	return m.Size()
}
func (m *SystemStatus) XXX_DiscardUnknown() {
	xxx_messageInfo_SystemStatus.DiscardUnknown(m)
}

var xxx_messageInfo_SystemStatus proto.InternalMessageInfo

func (m *SystemStatus) GetStatus() SystemStatus_Status {
	if m != nil && m.Status != nil {
		return *m.Status
	}
	return SystemStatus_ACTIVE
}

type ProcessStatus struct {
	IsDaemon             *bool                 `protobuf:"varint,1,opt,name=isDaemon" json:"isDaemon,omitempty"`
	Status               *ProcessStatus_Status `protobuf:"varint,2,opt,name=status,enum=hippo.ProcessStatus_Status" json:"status,omitempty"`
	ProcessName          *string               `protobuf:"bytes,3,opt,name=processName" json:"processName,omitempty"`
	RestartCount         *int32                `protobuf:"varint,4,opt,name=restartCount" json:"restartCount,omitempty"`
	StartTime            *int64                `protobuf:"varint,5,opt,name=startTime" json:"startTime,omitempty"`
	ExitCode             *int32                `protobuf:"varint,6,opt,name=exitCode" json:"exitCode,omitempty"`
	Pid                  *int32                `protobuf:"varint,7,opt,name=pid" json:"pid,omitempty"`
	InstanceId           *int64                `protobuf:"varint,8,opt,name=instanceId" json:"instanceId,omitempty"`
	OtherInfos           []*Parameter          `protobuf:"bytes,9,rep,name=otherInfos" json:"otherInfos,omitempty"`
	XXX_NoUnkeyedLiteral struct{}              `json:"-"`
	XXX_unrecognized     []byte                `json:"-"`
	XXX_sizecache        int32                 `json:"-"`
}

func (m *ProcessStatus) Reset()         { *m = ProcessStatus{} }
func (m *ProcessStatus) String() string { return proto.CompactTextString(m) }
func (*ProcessStatus) ProtoMessage()    {}
func (*ProcessStatus) Descriptor() ([]byte, []int) {
	return fileDescriptor_ee72d9a89737215c, []int{25}
}
func (m *ProcessStatus) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *ProcessStatus) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_ProcessStatus.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *ProcessStatus) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ProcessStatus.Merge(m, src)
}
func (m *ProcessStatus) XXX_Size() int {
	return m.Size()
}
func (m *ProcessStatus) XXX_DiscardUnknown() {
	xxx_messageInfo_ProcessStatus.DiscardUnknown(m)
}

var xxx_messageInfo_ProcessStatus proto.InternalMessageInfo

func (m *ProcessStatus) GetIsDaemon() bool {
	if m != nil && m.IsDaemon != nil {
		return *m.IsDaemon
	}
	return false
}

func (m *ProcessStatus) GetStatus() ProcessStatus_Status {
	if m != nil && m.Status != nil {
		return *m.Status
	}
	return ProcessStatus_PS_UNKNOWN
}

func (m *ProcessStatus) GetProcessName() string {
	if m != nil && m.ProcessName != nil {
		return *m.ProcessName
	}
	return ""
}

func (m *ProcessStatus) GetRestartCount() int32 {
	if m != nil && m.RestartCount != nil {
		return *m.RestartCount
	}
	return 0
}

func (m *ProcessStatus) GetStartTime() int64 {
	if m != nil && m.StartTime != nil {
		return *m.StartTime
	}
	return 0
}

func (m *ProcessStatus) GetExitCode() int32 {
	if m != nil && m.ExitCode != nil {
		return *m.ExitCode
	}
	return 0
}

func (m *ProcessStatus) GetPid() int32 {
	if m != nil && m.Pid != nil {
		return *m.Pid
	}
	return 0
}

func (m *ProcessStatus) GetInstanceId() int64 {
	if m != nil && m.InstanceId != nil {
		return *m.InstanceId
	}
	return 0
}

func (m *ProcessStatus) GetOtherInfos() []*Parameter {
	if m != nil {
		return m.OtherInfos
	}
	return nil
}

type PackageDetail struct {
	Taskid               *int64   `protobuf:"varint,1,opt,name=taskid" json:"taskid,omitempty"`
	Status               *string  `protobuf:"bytes,2,opt,name=status" json:"status,omitempty"`
	StartTime            *int64   `protobuf:"varint,3,opt,name=startTime" json:"startTime,omitempty"`
	CostTime             *int64   `protobuf:"varint,4,opt,name=costTime" json:"costTime,omitempty"`
	DownloadSize         *int64   `protobuf:"varint,5,opt,name=downloadSize" json:"downloadSize,omitempty"`
	TotalSize            *int64   `protobuf:"varint,6,opt,name=totalSize" json:"totalSize,omitempty"`
	SrcBaseUri           *string  `protobuf:"bytes,7,opt,name=srcBaseUri" json:"srcBaseUri,omitempty"`
	ErrMsg               *string  `protobuf:"bytes,8,opt,name=errMsg" json:"errMsg,omitempty"`
	PackageName          *string  `protobuf:"bytes,9,opt,name=packageName" json:"packageName,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *PackageDetail) Reset()         { *m = PackageDetail{} }
func (m *PackageDetail) String() string { return proto.CompactTextString(m) }
func (*PackageDetail) ProtoMessage()    {}
func (*PackageDetail) Descriptor() ([]byte, []int) {
	return fileDescriptor_ee72d9a89737215c, []int{26}
}
func (m *PackageDetail) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *PackageDetail) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_PackageDetail.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *PackageDetail) XXX_Merge(src proto.Message) {
	xxx_messageInfo_PackageDetail.Merge(m, src)
}
func (m *PackageDetail) XXX_Size() int {
	return m.Size()
}
func (m *PackageDetail) XXX_DiscardUnknown() {
	xxx_messageInfo_PackageDetail.DiscardUnknown(m)
}

var xxx_messageInfo_PackageDetail proto.InternalMessageInfo

func (m *PackageDetail) GetTaskid() int64 {
	if m != nil && m.Taskid != nil {
		return *m.Taskid
	}
	return 0
}

func (m *PackageDetail) GetStatus() string {
	if m != nil && m.Status != nil {
		return *m.Status
	}
	return ""
}

func (m *PackageDetail) GetStartTime() int64 {
	if m != nil && m.StartTime != nil {
		return *m.StartTime
	}
	return 0
}

func (m *PackageDetail) GetCostTime() int64 {
	if m != nil && m.CostTime != nil {
		return *m.CostTime
	}
	return 0
}

func (m *PackageDetail) GetDownloadSize() int64 {
	if m != nil && m.DownloadSize != nil {
		return *m.DownloadSize
	}
	return 0
}

func (m *PackageDetail) GetTotalSize() int64 {
	if m != nil && m.TotalSize != nil {
		return *m.TotalSize
	}
	return 0
}

func (m *PackageDetail) GetSrcBaseUri() string {
	if m != nil && m.SrcBaseUri != nil {
		return *m.SrcBaseUri
	}
	return ""
}

func (m *PackageDetail) GetErrMsg() string {
	if m != nil && m.ErrMsg != nil {
		return *m.ErrMsg
	}
	return ""
}

func (m *PackageDetail) GetPackageName() string {
	if m != nil && m.PackageName != nil {
		return *m.PackageName
	}
	return ""
}

type SlotPayload struct {
	Id                   *SlotId      `protobuf:"bytes,1,opt,name=id" json:"id,omitempty"`
	Payloads             []*Parameter `protobuf:"bytes,2,rep,name=payloads" json:"payloads,omitempty"`
	XXX_NoUnkeyedLiteral struct{}     `json:"-"`
	XXX_unrecognized     []byte       `json:"-"`
	XXX_sizecache        int32        `json:"-"`
}

func (m *SlotPayload) Reset()         { *m = SlotPayload{} }
func (m *SlotPayload) String() string { return proto.CompactTextString(m) }
func (*SlotPayload) ProtoMessage()    {}
func (*SlotPayload) Descriptor() ([]byte, []int) {
	return fileDescriptor_ee72d9a89737215c, []int{27}
}
func (m *SlotPayload) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *SlotPayload) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_SlotPayload.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *SlotPayload) XXX_Merge(src proto.Message) {
	xxx_messageInfo_SlotPayload.Merge(m, src)
}
func (m *SlotPayload) XXX_Size() int {
	return m.Size()
}
func (m *SlotPayload) XXX_DiscardUnknown() {
	xxx_messageInfo_SlotPayload.DiscardUnknown(m)
}

var xxx_messageInfo_SlotPayload proto.InternalMessageInfo

func (m *SlotPayload) GetId() *SlotId {
	if m != nil {
		return m.Id
	}
	return nil
}

func (m *SlotPayload) GetPayloads() []*Parameter {
	if m != nil {
		return m.Payloads
	}
	return nil
}

type AssignedSlot struct {
	Id                               *SlotId          `protobuf:"bytes,1,opt,name=id" json:"id,omitempty"`
	Reclaim                          *bool            `protobuf:"varint,2,opt,name=reclaim" json:"reclaim,omitempty"`
	ApplicationId                    *string          `protobuf:"bytes,3,opt,name=applicationId" json:"applicationId,omitempty"`
	AppChecksum                      *int64           `protobuf:"varint,11,opt,name=appChecksum" json:"appChecksum,omitempty"`
	SlotResource                     *SlotResource    `protobuf:"bytes,4,opt,name=slotResource" json:"slotResource,omitempty"`
	ProcessStatus                    []*ProcessStatus `protobuf:"bytes,5,rep,name=processStatus" json:"processStatus,omitempty"`
	SlaveStatus                      *SlaveStatus     `protobuf:"bytes,6,opt,name=slaveStatus" json:"slaveStatus,omitempty"`
	DataStatus                       []*DataStatus    `protobuf:"bytes,7,rep,name=dataStatus" json:"dataStatus,omitempty"`
	LaunchSignature                  *int64           `protobuf:"varint,8,opt,name=launchSignature" json:"launchSignature,omitempty"`
	PackageChecksum                  *string          `protobuf:"bytes,9,opt,name=packageChecksum" json:"packageChecksum,omitempty"`
	PackageStatus                    *PackageStatus   `protobuf:"bytes,10,opt,name=packageStatus" json:"packageStatus,omitempty"`
	SystemSlot                       *bool            `protobuf:"varint,12,opt,name=systemSlot" json:"systemSlot,omitempty"`
	NoLongerMatchQueue               *bool            `protobuf:"varint,13,opt,name=noLongerMatchQueue,def=0" json:"noLongerMatchQueue,omitempty"`
	NoLongerMatchResourceRequirement *bool            `protobuf:"varint,14,opt,name=noLongerMatchResourceRequirement,def=0" json:"noLongerMatchResourceRequirement,omitempty"`
	Payloads                         []*Parameter     `protobuf:"bytes,15,rep,name=payloads" json:"payloads,omitempty"`
	DeclareResources                 *SlotResource    `protobuf:"bytes,16,opt,name=declareResources" json:"declareResources,omitempty"`
	NoLongerMatchWorkDirTag          *bool            `protobuf:"varint,17,opt,name=noLongerMatchWorkDirTag,def=0" json:"noLongerMatchWorkDirTag,omitempty"`
	PreDeployPackageChecksum         *string          `protobuf:"bytes,18,opt,name=preDeployPackageChecksum" json:"preDeployPackageChecksum,omitempty"`
	PreDeployPackageStatus           *PackageStatus   `protobuf:"bytes,19,opt,name=preDeployPackageStatus" json:"preDeployPackageStatus,omitempty"`
	Priority                         *Priority        `protobuf:"bytes,20,opt,name=priority" json:"priority,omitempty"`
	GroupId                          *string          `protobuf:"bytes,21,opt,name=groupId" json:"groupId,omitempty"`
	MetaTags                         []*Parameter     `protobuf:"bytes,22,rep,name=metaTags" json:"metaTags,omitempty"`
	RequirementId                    *string          `protobuf:"bytes,23,opt,name=requirementId" json:"requirementId,omitempty"`
	YarnContainerId                  *string          `protobuf:"bytes,24,opt,name=yarnContainerId" json:"yarnContainerId,omitempty"`
	SlotPreference                   *SlotPreference  `protobuf:"bytes,25,opt,name=slotPreference" json:"slotPreference,omitempty"`
	PackageDetails                   []*PackageDetail `protobuf:"bytes,26,rep,name=packageDetails" json:"packageDetails,omitempty"`
	Uid                              *string          `protobuf:"bytes,27,opt,name=uid" json:"uid,omitempty"`
	K8SPodUID                        *string          `protobuf:"bytes,28,opt,name=k8sPodUID" json:"k8sPodUID,omitempty"`
	K8SPodName                       *string          `protobuf:"bytes,29,opt,name=k8sPodName" json:"k8sPodName,omitempty"`
	K8SNamespace                     *string          `protobuf:"bytes,30,opt,name=k8sNamespace" json:"k8sNamespace,omitempty"`
	Ip                               *string          `protobuf:"bytes,31,opt,name=ip" json:"ip,omitempty"`
	XXX_NoUnkeyedLiteral             struct{}         `json:"-"`
	XXX_unrecognized                 []byte           `json:"-"`
	XXX_sizecache                    int32            `json:"-"`
}

func (m *AssignedSlot) Reset()         { *m = AssignedSlot{} }
func (m *AssignedSlot) String() string { return proto.CompactTextString(m) }
func (*AssignedSlot) ProtoMessage()    {}
func (*AssignedSlot) Descriptor() ([]byte, []int) {
	return fileDescriptor_ee72d9a89737215c, []int{28}
}
func (m *AssignedSlot) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *AssignedSlot) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_AssignedSlot.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *AssignedSlot) XXX_Merge(src proto.Message) {
	xxx_messageInfo_AssignedSlot.Merge(m, src)
}
func (m *AssignedSlot) XXX_Size() int {
	return m.Size()
}
func (m *AssignedSlot) XXX_DiscardUnknown() {
	xxx_messageInfo_AssignedSlot.DiscardUnknown(m)
}

var xxx_messageInfo_AssignedSlot proto.InternalMessageInfo

const Default_AssignedSlot_NoLongerMatchQueue bool = false
const Default_AssignedSlot_NoLongerMatchResourceRequirement bool = false
const Default_AssignedSlot_NoLongerMatchWorkDirTag bool = false

func (m *AssignedSlot) GetId() *SlotId {
	if m != nil {
		return m.Id
	}
	return nil
}

func (m *AssignedSlot) GetReclaim() bool {
	if m != nil && m.Reclaim != nil {
		return *m.Reclaim
	}
	return false
}

func (m *AssignedSlot) GetApplicationId() string {
	if m != nil && m.ApplicationId != nil {
		return *m.ApplicationId
	}
	return ""
}

func (m *AssignedSlot) GetAppChecksum() int64 {
	if m != nil && m.AppChecksum != nil {
		return *m.AppChecksum
	}
	return 0
}

func (m *AssignedSlot) GetSlotResource() *SlotResource {
	if m != nil {
		return m.SlotResource
	}
	return nil
}

func (m *AssignedSlot) GetProcessStatus() []*ProcessStatus {
	if m != nil {
		return m.ProcessStatus
	}
	return nil
}

func (m *AssignedSlot) GetSlaveStatus() *SlaveStatus {
	if m != nil {
		return m.SlaveStatus
	}
	return nil
}

func (m *AssignedSlot) GetDataStatus() []*DataStatus {
	if m != nil {
		return m.DataStatus
	}
	return nil
}

func (m *AssignedSlot) GetLaunchSignature() int64 {
	if m != nil && m.LaunchSignature != nil {
		return *m.LaunchSignature
	}
	return 0
}

func (m *AssignedSlot) GetPackageChecksum() string {
	if m != nil && m.PackageChecksum != nil {
		return *m.PackageChecksum
	}
	return ""
}

func (m *AssignedSlot) GetPackageStatus() *PackageStatus {
	if m != nil {
		return m.PackageStatus
	}
	return nil
}

func (m *AssignedSlot) GetSystemSlot() bool {
	if m != nil && m.SystemSlot != nil {
		return *m.SystemSlot
	}
	return false
}

func (m *AssignedSlot) GetNoLongerMatchQueue() bool {
	if m != nil && m.NoLongerMatchQueue != nil {
		return *m.NoLongerMatchQueue
	}
	return Default_AssignedSlot_NoLongerMatchQueue
}

func (m *AssignedSlot) GetNoLongerMatchResourceRequirement() bool {
	if m != nil && m.NoLongerMatchResourceRequirement != nil {
		return *m.NoLongerMatchResourceRequirement
	}
	return Default_AssignedSlot_NoLongerMatchResourceRequirement
}

func (m *AssignedSlot) GetPayloads() []*Parameter {
	if m != nil {
		return m.Payloads
	}
	return nil
}

func (m *AssignedSlot) GetDeclareResources() *SlotResource {
	if m != nil {
		return m.DeclareResources
	}
	return nil
}

func (m *AssignedSlot) GetNoLongerMatchWorkDirTag() bool {
	if m != nil && m.NoLongerMatchWorkDirTag != nil {
		return *m.NoLongerMatchWorkDirTag
	}
	return Default_AssignedSlot_NoLongerMatchWorkDirTag
}

func (m *AssignedSlot) GetPreDeployPackageChecksum() string {
	if m != nil && m.PreDeployPackageChecksum != nil {
		return *m.PreDeployPackageChecksum
	}
	return ""
}

func (m *AssignedSlot) GetPreDeployPackageStatus() *PackageStatus {
	if m != nil {
		return m.PreDeployPackageStatus
	}
	return nil
}

func (m *AssignedSlot) GetPriority() *Priority {
	if m != nil {
		return m.Priority
	}
	return nil
}

func (m *AssignedSlot) GetGroupId() string {
	if m != nil && m.GroupId != nil {
		return *m.GroupId
	}
	return ""
}

func (m *AssignedSlot) GetMetaTags() []*Parameter {
	if m != nil {
		return m.MetaTags
	}
	return nil
}

func (m *AssignedSlot) GetRequirementId() string {
	if m != nil && m.RequirementId != nil {
		return *m.RequirementId
	}
	return ""
}

func (m *AssignedSlot) GetYarnContainerId() string {
	if m != nil && m.YarnContainerId != nil {
		return *m.YarnContainerId
	}
	return ""
}

func (m *AssignedSlot) GetSlotPreference() *SlotPreference {
	if m != nil {
		return m.SlotPreference
	}
	return nil
}

func (m *AssignedSlot) GetPackageDetails() []*PackageDetail {
	if m != nil {
		return m.PackageDetails
	}
	return nil
}

func (m *AssignedSlot) GetUid() string {
	if m != nil && m.Uid != nil {
		return *m.Uid
	}
	return ""
}

func (m *AssignedSlot) GetK8SPodUID() string {
	if m != nil && m.K8SPodUID != nil {
		return *m.K8SPodUID
	}
	return ""
}

func (m *AssignedSlot) GetK8SPodName() string {
	if m != nil && m.K8SPodName != nil {
		return *m.K8SPodName
	}
	return ""
}

func (m *AssignedSlot) GetK8SNamespace() string {
	if m != nil && m.K8SNamespace != nil {
		return *m.K8SNamespace
	}
	return ""
}

func (m *AssignedSlot) GetIp() string {
	if m != nil && m.Ip != nil {
		return *m.Ip
	}
	return ""
}

type HistoryInfo struct {
	Apps                 []*HistoryApp `protobuf:"bytes,1,rep,name=apps" json:"apps,omitempty"`
	XXX_NoUnkeyedLiteral struct{}      `json:"-"`
	XXX_unrecognized     []byte        `json:"-"`
	XXX_sizecache        int32         `json:"-"`
}

func (m *HistoryInfo) Reset()         { *m = HistoryInfo{} }
func (m *HistoryInfo) String() string { return proto.CompactTextString(m) }
func (*HistoryInfo) ProtoMessage()    {}
func (*HistoryInfo) Descriptor() ([]byte, []int) {
	return fileDescriptor_ee72d9a89737215c, []int{29}
}
func (m *HistoryInfo) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *HistoryInfo) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_HistoryInfo.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *HistoryInfo) XXX_Merge(src proto.Message) {
	xxx_messageInfo_HistoryInfo.Merge(m, src)
}
func (m *HistoryInfo) XXX_Size() int {
	return m.Size()
}
func (m *HistoryInfo) XXX_DiscardUnknown() {
	xxx_messageInfo_HistoryInfo.DiscardUnknown(m)
}

var xxx_messageInfo_HistoryInfo proto.InternalMessageInfo

func (m *HistoryInfo) GetApps() []*HistoryApp {
	if m != nil {
		return m.Apps
	}
	return nil
}

type HistoryApp struct {
	App                  *string       `protobuf:"bytes,1,req,name=app" json:"app,omitempty"`
	Tags                 []*HistoryTag `protobuf:"bytes,2,rep,name=tags" json:"tags,omitempty"`
	XXX_NoUnkeyedLiteral struct{}      `json:"-"`
	XXX_unrecognized     []byte        `json:"-"`
	XXX_sizecache        int32         `json:"-"`
}

func (m *HistoryApp) Reset()         { *m = HistoryApp{} }
func (m *HistoryApp) String() string { return proto.CompactTextString(m) }
func (*HistoryApp) ProtoMessage()    {}
func (*HistoryApp) Descriptor() ([]byte, []int) {
	return fileDescriptor_ee72d9a89737215c, []int{30}
}
func (m *HistoryApp) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *HistoryApp) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_HistoryApp.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *HistoryApp) XXX_Merge(src proto.Message) {
	xxx_messageInfo_HistoryApp.Merge(m, src)
}
func (m *HistoryApp) XXX_Size() int {
	return m.Size()
}
func (m *HistoryApp) XXX_DiscardUnknown() {
	xxx_messageInfo_HistoryApp.DiscardUnknown(m)
}

var xxx_messageInfo_HistoryApp proto.InternalMessageInfo

func (m *HistoryApp) GetApp() string {
	if m != nil && m.App != nil {
		return *m.App
	}
	return ""
}

func (m *HistoryApp) GetTags() []*HistoryTag {
	if m != nil {
		return m.Tags
	}
	return nil
}

type HistoryTag struct {
	Tag                  *string       `protobuf:"bytes,1,req,name=tag" json:"tag,omitempty"`
	Pods                 []*HistoryPod `protobuf:"bytes,2,rep,name=pods" json:"pods,omitempty"`
	MaxInstancePerHost   *int32        `protobuf:"varint,3,req,name=maxInstancePerHost" json:"maxInstancePerHost,omitempty"`
	XXX_NoUnkeyedLiteral struct{}      `json:"-"`
	XXX_unrecognized     []byte        `json:"-"`
	XXX_sizecache        int32         `json:"-"`
}

func (m *HistoryTag) Reset()         { *m = HistoryTag{} }
func (m *HistoryTag) String() string { return proto.CompactTextString(m) }
func (*HistoryTag) ProtoMessage()    {}
func (*HistoryTag) Descriptor() ([]byte, []int) {
	return fileDescriptor_ee72d9a89737215c, []int{31}
}
func (m *HistoryTag) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *HistoryTag) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_HistoryTag.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *HistoryTag) XXX_Merge(src proto.Message) {
	xxx_messageInfo_HistoryTag.Merge(m, src)
}
func (m *HistoryTag) XXX_Size() int {
	return m.Size()
}
func (m *HistoryTag) XXX_DiscardUnknown() {
	xxx_messageInfo_HistoryTag.DiscardUnknown(m)
}

var xxx_messageInfo_HistoryTag proto.InternalMessageInfo

func (m *HistoryTag) GetTag() string {
	if m != nil && m.Tag != nil {
		return *m.Tag
	}
	return ""
}

func (m *HistoryTag) GetPods() []*HistoryPod {
	if m != nil {
		return m.Pods
	}
	return nil
}

func (m *HistoryTag) GetMaxInstancePerHost() int32 {
	if m != nil && m.MaxInstancePerHost != nil {
		return *m.MaxInstancePerHost
	}
	return 0
}

type HistoryPod struct {
	Uid                  *string  `protobuf:"bytes,1,req,name=uid" json:"uid,omitempty"`
	DeclareTime          *int64   `protobuf:"varint,2,req,name=declareTime" json:"declareTime,omitempty"`
	ExitTime             *int64   `protobuf:"varint,3,req,name=exitTime" json:"exitTime,omitempty"`
	Id                   *int32   `protobuf:"varint,4,req,name=id" json:"id,omitempty"`
	SlaveAddress         *string  `protobuf:"bytes,5,req,name=slaveAddress" json:"slaveAddress,omitempty"`
	DiskId               *string  `protobuf:"bytes,6,req,name=diskId" json:"diskId,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *HistoryPod) Reset()         { *m = HistoryPod{} }
func (m *HistoryPod) String() string { return proto.CompactTextString(m) }
func (*HistoryPod) ProtoMessage()    {}
func (*HistoryPod) Descriptor() ([]byte, []int) {
	return fileDescriptor_ee72d9a89737215c, []int{32}
}
func (m *HistoryPod) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *HistoryPod) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_HistoryPod.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *HistoryPod) XXX_Merge(src proto.Message) {
	xxx_messageInfo_HistoryPod.Merge(m, src)
}
func (m *HistoryPod) XXX_Size() int {
	return m.Size()
}
func (m *HistoryPod) XXX_DiscardUnknown() {
	xxx_messageInfo_HistoryPod.DiscardUnknown(m)
}

var xxx_messageInfo_HistoryPod proto.InternalMessageInfo

func (m *HistoryPod) GetUid() string {
	if m != nil && m.Uid != nil {
		return *m.Uid
	}
	return ""
}

func (m *HistoryPod) GetDeclareTime() int64 {
	if m != nil && m.DeclareTime != nil {
		return *m.DeclareTime
	}
	return 0
}

func (m *HistoryPod) GetExitTime() int64 {
	if m != nil && m.ExitTime != nil {
		return *m.ExitTime
	}
	return 0
}

func (m *HistoryPod) GetId() int32 {
	if m != nil && m.Id != nil {
		return *m.Id
	}
	return 0
}

func (m *HistoryPod) GetSlaveAddress() string {
	if m != nil && m.SlaveAddress != nil {
		return *m.SlaveAddress
	}
	return ""
}

func (m *HistoryPod) GetDiskId() string {
	if m != nil && m.DiskId != nil {
		return *m.DiskId
	}
	return ""
}

type ProcessLaunchContext struct {
	RequiredPackages     []*PackageInfo `protobuf:"bytes,1,rep,name=requiredPackages" json:"requiredPackages,omitempty"`
	Processes            []*ProcessInfo `protobuf:"bytes,2,rep,name=processes" json:"processes,omitempty"`
	RequiredDatas        []*DataInfo    `protobuf:"bytes,3,rep,name=requiredDatas" json:"requiredDatas,omitempty"`
	PreDeployPackages    []*PackageInfo `protobuf:"bytes,4,rep,name=preDeployPackages" json:"preDeployPackages,omitempty"`
	RequirementId        *string        `protobuf:"bytes,5,opt,name=requirementId" json:"requirementId,omitempty"`
	ExtendInfos          []*Parameter   `protobuf:"bytes,6,rep,name=extendInfos" json:"extendInfos,omitempty"`
	XXX_NoUnkeyedLiteral struct{}       `json:"-"`
	XXX_unrecognized     []byte         `json:"-"`
	XXX_sizecache        int32          `json:"-"`
}

func (m *ProcessLaunchContext) Reset()         { *m = ProcessLaunchContext{} }
func (m *ProcessLaunchContext) String() string { return proto.CompactTextString(m) }
func (*ProcessLaunchContext) ProtoMessage()    {}
func (*ProcessLaunchContext) Descriptor() ([]byte, []int) {
	return fileDescriptor_ee72d9a89737215c, []int{33}
}
func (m *ProcessLaunchContext) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *ProcessLaunchContext) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_ProcessLaunchContext.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *ProcessLaunchContext) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ProcessLaunchContext.Merge(m, src)
}
func (m *ProcessLaunchContext) XXX_Size() int {
	return m.Size()
}
func (m *ProcessLaunchContext) XXX_DiscardUnknown() {
	xxx_messageInfo_ProcessLaunchContext.DiscardUnknown(m)
}

var xxx_messageInfo_ProcessLaunchContext proto.InternalMessageInfo

func (m *ProcessLaunchContext) GetRequiredPackages() []*PackageInfo {
	if m != nil {
		return m.RequiredPackages
	}
	return nil
}

func (m *ProcessLaunchContext) GetProcesses() []*ProcessInfo {
	if m != nil {
		return m.Processes
	}
	return nil
}

func (m *ProcessLaunchContext) GetRequiredDatas() []*DataInfo {
	if m != nil {
		return m.RequiredDatas
	}
	return nil
}

func (m *ProcessLaunchContext) GetPreDeployPackages() []*PackageInfo {
	if m != nil {
		return m.PreDeployPackages
	}
	return nil
}

func (m *ProcessLaunchContext) GetRequirementId() string {
	if m != nil && m.RequirementId != nil {
		return *m.RequirementId
	}
	return ""
}

func (m *ProcessLaunchContext) GetExtendInfos() []*Parameter {
	if m != nil {
		return m.ExtendInfos
	}
	return nil
}

type ProcessLaunchExtraInfo struct {
	QuotaIds             []*Parameter `protobuf:"bytes,1,rep,name=quotaIds" json:"quotaIds,omitempty"`
	CgroupPaths          []*Parameter `protobuf:"bytes,2,rep,name=cgroupPaths" json:"cgroupPaths,omitempty"`
	ExtendInfos          []*Parameter `protobuf:"bytes,3,rep,name=extendInfos" json:"extendInfos,omitempty"`
	XXX_NoUnkeyedLiteral struct{}     `json:"-"`
	XXX_unrecognized     []byte       `json:"-"`
	XXX_sizecache        int32        `json:"-"`
}

func (m *ProcessLaunchExtraInfo) Reset()         { *m = ProcessLaunchExtraInfo{} }
func (m *ProcessLaunchExtraInfo) String() string { return proto.CompactTextString(m) }
func (*ProcessLaunchExtraInfo) ProtoMessage()    {}
func (*ProcessLaunchExtraInfo) Descriptor() ([]byte, []int) {
	return fileDescriptor_ee72d9a89737215c, []int{34}
}
func (m *ProcessLaunchExtraInfo) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *ProcessLaunchExtraInfo) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_ProcessLaunchExtraInfo.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *ProcessLaunchExtraInfo) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ProcessLaunchExtraInfo.Merge(m, src)
}
func (m *ProcessLaunchExtraInfo) XXX_Size() int {
	return m.Size()
}
func (m *ProcessLaunchExtraInfo) XXX_DiscardUnknown() {
	xxx_messageInfo_ProcessLaunchExtraInfo.DiscardUnknown(m)
}

var xxx_messageInfo_ProcessLaunchExtraInfo proto.InternalMessageInfo

func (m *ProcessLaunchExtraInfo) GetQuotaIds() []*Parameter {
	if m != nil {
		return m.QuotaIds
	}
	return nil
}

func (m *ProcessLaunchExtraInfo) GetCgroupPaths() []*Parameter {
	if m != nil {
		return m.CgroupPaths
	}
	return nil
}

func (m *ProcessLaunchExtraInfo) GetExtendInfos() []*Parameter {
	if m != nil {
		return m.ExtendInfos
	}
	return nil
}

type PackageInfo struct {
	PackageURI           *string                        `protobuf:"bytes,1,opt,name=packageURI" json:"packageURI,omitempty"`
	Type                 *PackageInfo_PackageType       `protobuf:"varint,2,opt,name=type,enum=hippo.PackageInfo_PackageType" json:"type,omitempty"`
	Visibility           *PackageInfo_PackageVisibility `protobuf:"varint,3,opt,name=visibility,enum=hippo.PackageInfo_PackageVisibility,def=1" json:"visibility,omitempty"`
	XXX_NoUnkeyedLiteral struct{}                       `json:"-"`
	XXX_unrecognized     []byte                         `json:"-"`
	XXX_sizecache        int32                          `json:"-"`
}

func (m *PackageInfo) Reset()         { *m = PackageInfo{} }
func (m *PackageInfo) String() string { return proto.CompactTextString(m) }
func (*PackageInfo) ProtoMessage()    {}
func (*PackageInfo) Descriptor() ([]byte, []int) {
	return fileDescriptor_ee72d9a89737215c, []int{35}
}
func (m *PackageInfo) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *PackageInfo) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_PackageInfo.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *PackageInfo) XXX_Merge(src proto.Message) {
	xxx_messageInfo_PackageInfo.Merge(m, src)
}
func (m *PackageInfo) XXX_Size() int {
	return m.Size()
}
func (m *PackageInfo) XXX_DiscardUnknown() {
	xxx_messageInfo_PackageInfo.DiscardUnknown(m)
}

var xxx_messageInfo_PackageInfo proto.InternalMessageInfo

const Default_PackageInfo_Visibility PackageInfo_PackageVisibility = PackageInfo_PUBLIC

func (m *PackageInfo) GetPackageURI() string {
	if m != nil && m.PackageURI != nil {
		return *m.PackageURI
	}
	return ""
}

func (m *PackageInfo) GetType() PackageInfo_PackageType {
	if m != nil && m.Type != nil {
		return *m.Type
	}
	return PackageInfo_UNKNOWN_PackageType
}

func (m *PackageInfo) GetVisibility() PackageInfo_PackageVisibility {
	if m != nil && m.Visibility != nil {
		return *m.Visibility
	}
	return Default_PackageInfo_Visibility
}

type TrackData struct {
	Path                 *string  `protobuf:"bytes,1,opt,name=path" json:"path,omitempty"`
	MatchPattern         *string  `protobuf:"bytes,2,opt,name=matchPattern" json:"matchPattern,omitempty"`
	LogPattern           *string  `protobuf:"bytes,3,opt,name=logPattern" json:"logPattern,omitempty"`
	KeepTime             *int64   `protobuf:"varint,4,opt,name=keepTime,def=3600" json:"keepTime,omitempty"`
	LimitSize            *int32   `protobuf:"varint,5,opt,name=limitSize,def=1024" json:"limitSize,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *TrackData) Reset()         { *m = TrackData{} }
func (m *TrackData) String() string { return proto.CompactTextString(m) }
func (*TrackData) ProtoMessage()    {}
func (*TrackData) Descriptor() ([]byte, []int) {
	return fileDescriptor_ee72d9a89737215c, []int{36}
}
func (m *TrackData) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *TrackData) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_TrackData.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *TrackData) XXX_Merge(src proto.Message) {
	xxx_messageInfo_TrackData.Merge(m, src)
}
func (m *TrackData) XXX_Size() int {
	return m.Size()
}
func (m *TrackData) XXX_DiscardUnknown() {
	xxx_messageInfo_TrackData.DiscardUnknown(m)
}

var xxx_messageInfo_TrackData proto.InternalMessageInfo

const Default_TrackData_KeepTime int64 = 3600
const Default_TrackData_LimitSize int32 = 1024

func (m *TrackData) GetPath() string {
	if m != nil && m.Path != nil {
		return *m.Path
	}
	return ""
}

func (m *TrackData) GetMatchPattern() string {
	if m != nil && m.MatchPattern != nil {
		return *m.MatchPattern
	}
	return ""
}

func (m *TrackData) GetLogPattern() string {
	if m != nil && m.LogPattern != nil {
		return *m.LogPattern
	}
	return ""
}

func (m *TrackData) GetKeepTime() int64 {
	if m != nil && m.KeepTime != nil {
		return *m.KeepTime
	}
	return Default_TrackData_KeepTime
}

func (m *TrackData) GetLimitSize() int32 {
	if m != nil && m.LimitSize != nil {
		return *m.LimitSize
	}
	return Default_TrackData_LimitSize
}

type ProcessInfo struct {
	IsDaemon             *bool        `protobuf:"varint,1,opt,name=isDaemon,def=0" json:"isDaemon,omitempty"`
	ProcessName          *string      `protobuf:"bytes,2,opt,name=processName" json:"processName,omitempty"`
	Cmd                  *string      `protobuf:"bytes,3,opt,name=cmd" json:"cmd,omitempty"`
	Envs                 []*Parameter `protobuf:"bytes,4,rep,name=envs" json:"envs,omitempty"`
	Args                 []*Parameter `protobuf:"bytes,5,rep,name=args" json:"args,omitempty"`
	InstanceId           *int64       `protobuf:"varint,6,opt,name=instanceId" json:"instanceId,omitempty"`
	StopTimeout          *int64       `protobuf:"varint,7,opt,name=stopTimeout,def=100" json:"stopTimeout,omitempty"`
	RestartInterval      *int64       `protobuf:"varint,8,opt,name=restartInterval,def=10" json:"restartInterval,omitempty"`
	RestartCountLimit    *int64       `protobuf:"varint,9,opt,name=restartCountLimit,def=10" json:"restartCountLimit,omitempty"`
	ProcStopSig          *int32       `protobuf:"varint,10,opt,name=procStopSig,def=10" json:"procStopSig,omitempty"`
	OtherInfos           []*Parameter `protobuf:"bytes,11,rep,name=otherInfos" json:"otherInfos,omitempty"`
	XXX_NoUnkeyedLiteral struct{}     `json:"-"`
	XXX_unrecognized     []byte       `json:"-"`
	XXX_sizecache        int32        `json:"-"`
}

func (m *ProcessInfo) Reset()         { *m = ProcessInfo{} }
func (m *ProcessInfo) String() string { return proto.CompactTextString(m) }
func (*ProcessInfo) ProtoMessage()    {}
func (*ProcessInfo) Descriptor() ([]byte, []int) {
	return fileDescriptor_ee72d9a89737215c, []int{37}
}
func (m *ProcessInfo) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *ProcessInfo) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_ProcessInfo.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *ProcessInfo) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ProcessInfo.Merge(m, src)
}
func (m *ProcessInfo) XXX_Size() int {
	return m.Size()
}
func (m *ProcessInfo) XXX_DiscardUnknown() {
	xxx_messageInfo_ProcessInfo.DiscardUnknown(m)
}

var xxx_messageInfo_ProcessInfo proto.InternalMessageInfo

const Default_ProcessInfo_IsDaemon bool = false
const Default_ProcessInfo_StopTimeout int64 = 100
const Default_ProcessInfo_RestartInterval int64 = 10
const Default_ProcessInfo_RestartCountLimit int64 = 10
const Default_ProcessInfo_ProcStopSig int32 = 10

func (m *ProcessInfo) GetIsDaemon() bool {
	if m != nil && m.IsDaemon != nil {
		return *m.IsDaemon
	}
	return Default_ProcessInfo_IsDaemon
}

func (m *ProcessInfo) GetProcessName() string {
	if m != nil && m.ProcessName != nil {
		return *m.ProcessName
	}
	return ""
}

func (m *ProcessInfo) GetCmd() string {
	if m != nil && m.Cmd != nil {
		return *m.Cmd
	}
	return ""
}

func (m *ProcessInfo) GetEnvs() []*Parameter {
	if m != nil {
		return m.Envs
	}
	return nil
}

func (m *ProcessInfo) GetArgs() []*Parameter {
	if m != nil {
		return m.Args
	}
	return nil
}

func (m *ProcessInfo) GetInstanceId() int64 {
	if m != nil && m.InstanceId != nil {
		return *m.InstanceId
	}
	return 0
}

func (m *ProcessInfo) GetStopTimeout() int64 {
	if m != nil && m.StopTimeout != nil {
		return *m.StopTimeout
	}
	return Default_ProcessInfo_StopTimeout
}

func (m *ProcessInfo) GetRestartInterval() int64 {
	if m != nil && m.RestartInterval != nil {
		return *m.RestartInterval
	}
	return Default_ProcessInfo_RestartInterval
}

func (m *ProcessInfo) GetRestartCountLimit() int64 {
	if m != nil && m.RestartCountLimit != nil {
		return *m.RestartCountLimit
	}
	return Default_ProcessInfo_RestartCountLimit
}

func (m *ProcessInfo) GetProcStopSig() int32 {
	if m != nil && m.ProcStopSig != nil {
		return *m.ProcStopSig
	}
	return Default_ProcessInfo_ProcStopSig
}

func (m *ProcessInfo) GetOtherInfos() []*Parameter {
	if m != nil {
		return m.OtherInfos
	}
	return nil
}

type Parameter struct {
	Key                  *string  `protobuf:"bytes,1,opt,name=key" json:"key,omitempty"`
	Value                *string  `protobuf:"bytes,2,opt,name=value" json:"value,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *Parameter) Reset()         { *m = Parameter{} }
func (m *Parameter) String() string { return proto.CompactTextString(m) }
func (*Parameter) ProtoMessage()    {}
func (*Parameter) Descriptor() ([]byte, []int) {
	return fileDescriptor_ee72d9a89737215c, []int{38}
}
func (m *Parameter) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *Parameter) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_Parameter.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *Parameter) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Parameter.Merge(m, src)
}
func (m *Parameter) XXX_Size() int {
	return m.Size()
}
func (m *Parameter) XXX_DiscardUnknown() {
	xxx_messageInfo_Parameter.DiscardUnknown(m)
}

var xxx_messageInfo_Parameter proto.InternalMessageInfo

func (m *Parameter) GetKey() string {
	if m != nil && m.Key != nil {
		return *m.Key
	}
	return ""
}

func (m *Parameter) GetValue() string {
	if m != nil && m.Value != nil {
		return *m.Value
	}
	return ""
}

type DataInfo struct {
	Name                 *string                         `protobuf:"bytes,1,opt,name=name" json:"name,omitempty"`
	Src                  *string                         `protobuf:"bytes,2,opt,name=src" json:"src,omitempty"`
	Dst                  *string                         `protobuf:"bytes,3,opt,name=dst" json:"dst,omitempty"`
	Version              *int32                          `protobuf:"varint,4,opt,name=version" json:"version,omitempty"`
	AttemptId            *int64                          `protobuf:"varint,5,opt,name=attemptId" json:"attemptId,omitempty"`
	ExpireTime           *int64                          `protobuf:"varint,6,opt,name=expireTime,def=259200" json:"expireTime,omitempty"`
	Visibility           *DataInfo_DataVisibility        `protobuf:"varint,7,opt,name=visibility,enum=hippo.DataInfo_DataVisibility,def=2" json:"visibility,omitempty"`
	RetryCountLimit      *int32                          `protobuf:"varint,8,opt,name=retryCountLimit,def=0" json:"retryCountLimit,omitempty"`
	NormalizeType        *DataInfo_DataPathNormalizeType `protobuf:"varint,9,opt,name=normalizeType,enum=hippo.DataInfo_DataPathNormalizeType,def=1" json:"normalizeType,omitempty"`
	XXX_NoUnkeyedLiteral struct{}                        `json:"-"`
	XXX_unrecognized     []byte                          `json:"-"`
	XXX_sizecache        int32                           `json:"-"`
}

func (m *DataInfo) Reset()         { *m = DataInfo{} }
func (m *DataInfo) String() string { return proto.CompactTextString(m) }
func (*DataInfo) ProtoMessage()    {}
func (*DataInfo) Descriptor() ([]byte, []int) {
	return fileDescriptor_ee72d9a89737215c, []int{39}
}
func (m *DataInfo) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *DataInfo) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_DataInfo.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *DataInfo) XXX_Merge(src proto.Message) {
	xxx_messageInfo_DataInfo.Merge(m, src)
}
func (m *DataInfo) XXX_Size() int {
	return m.Size()
}
func (m *DataInfo) XXX_DiscardUnknown() {
	xxx_messageInfo_DataInfo.DiscardUnknown(m)
}

var xxx_messageInfo_DataInfo proto.InternalMessageInfo

const Default_DataInfo_ExpireTime int64 = 259200
const Default_DataInfo_Visibility DataInfo_DataVisibility = DataInfo_PRIVATE
const Default_DataInfo_RetryCountLimit int32 = 0
const Default_DataInfo_NormalizeType DataInfo_DataPathNormalizeType = DataInfo_NONE

func (m *DataInfo) GetName() string {
	if m != nil && m.Name != nil {
		return *m.Name
	}
	return ""
}

func (m *DataInfo) GetSrc() string {
	if m != nil && m.Src != nil {
		return *m.Src
	}
	return ""
}

func (m *DataInfo) GetDst() string {
	if m != nil && m.Dst != nil {
		return *m.Dst
	}
	return ""
}

func (m *DataInfo) GetVersion() int32 {
	if m != nil && m.Version != nil {
		return *m.Version
	}
	return 0
}

func (m *DataInfo) GetAttemptId() int64 {
	if m != nil && m.AttemptId != nil {
		return *m.AttemptId
	}
	return 0
}

func (m *DataInfo) GetExpireTime() int64 {
	if m != nil && m.ExpireTime != nil {
		return *m.ExpireTime
	}
	return Default_DataInfo_ExpireTime
}

func (m *DataInfo) GetVisibility() DataInfo_DataVisibility {
	if m != nil && m.Visibility != nil {
		return *m.Visibility
	}
	return Default_DataInfo_Visibility
}

func (m *DataInfo) GetRetryCountLimit() int32 {
	if m != nil && m.RetryCountLimit != nil {
		return *m.RetryCountLimit
	}
	return Default_DataInfo_RetryCountLimit
}

func (m *DataInfo) GetNormalizeType() DataInfo_DataPathNormalizeType {
	if m != nil && m.NormalizeType != nil {
		return *m.NormalizeType
	}
	return Default_DataInfo_NormalizeType
}

type DataStatus struct {
	Name                 *string                  `protobuf:"bytes,1,opt,name=name" json:"name,omitempty"`
	Src                  *string                  `protobuf:"bytes,2,opt,name=src" json:"src,omitempty"`
	Dst                  *string                  `protobuf:"bytes,3,opt,name=dst" json:"dst,omitempty"`
	CurVersion           *int32                   `protobuf:"varint,4,opt,name=curVersion" json:"curVersion,omitempty"`
	TargetVersion        *int32                   `protobuf:"varint,5,opt,name=targetVersion" json:"targetVersion,omitempty"`
	DeployStatus         *DataStatus_DeployStatus `protobuf:"varint,6,opt,name=deployStatus,enum=hippo.DataStatus_DeployStatus" json:"deployStatus,omitempty"`
	LastErrorInfo        *ErrorInfo               `protobuf:"bytes,7,opt,name=lastErrorInfo" json:"lastErrorInfo,omitempty"`
	AttemptId            *int64                   `protobuf:"varint,8,opt,name=attemptId" json:"attemptId,omitempty"`
	Visibility           *DataInfo_DataVisibility `protobuf:"varint,9,opt,name=visibility,enum=hippo.DataInfo_DataVisibility" json:"visibility,omitempty"`
	RetryCount           *int32                   `protobuf:"varint,10,opt,name=retryCount" json:"retryCount,omitempty"`
	XXX_NoUnkeyedLiteral struct{}                 `json:"-"`
	XXX_unrecognized     []byte                   `json:"-"`
	XXX_sizecache        int32                    `json:"-"`
}

func (m *DataStatus) Reset()         { *m = DataStatus{} }
func (m *DataStatus) String() string { return proto.CompactTextString(m) }
func (*DataStatus) ProtoMessage()    {}
func (*DataStatus) Descriptor() ([]byte, []int) {
	return fileDescriptor_ee72d9a89737215c, []int{40}
}
func (m *DataStatus) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *DataStatus) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_DataStatus.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *DataStatus) XXX_Merge(src proto.Message) {
	xxx_messageInfo_DataStatus.Merge(m, src)
}
func (m *DataStatus) XXX_Size() int {
	return m.Size()
}
func (m *DataStatus) XXX_DiscardUnknown() {
	xxx_messageInfo_DataStatus.DiscardUnknown(m)
}

var xxx_messageInfo_DataStatus proto.InternalMessageInfo

func (m *DataStatus) GetName() string {
	if m != nil && m.Name != nil {
		return *m.Name
	}
	return ""
}

func (m *DataStatus) GetSrc() string {
	if m != nil && m.Src != nil {
		return *m.Src
	}
	return ""
}

func (m *DataStatus) GetDst() string {
	if m != nil && m.Dst != nil {
		return *m.Dst
	}
	return ""
}

func (m *DataStatus) GetCurVersion() int32 {
	if m != nil && m.CurVersion != nil {
		return *m.CurVersion
	}
	return 0
}

func (m *DataStatus) GetTargetVersion() int32 {
	if m != nil && m.TargetVersion != nil {
		return *m.TargetVersion
	}
	return 0
}

func (m *DataStatus) GetDeployStatus() DataStatus_DeployStatus {
	if m != nil && m.DeployStatus != nil {
		return *m.DeployStatus
	}
	return DataStatus_UNKNOWN
}

func (m *DataStatus) GetLastErrorInfo() *ErrorInfo {
	if m != nil {
		return m.LastErrorInfo
	}
	return nil
}

func (m *DataStatus) GetAttemptId() int64 {
	if m != nil && m.AttemptId != nil {
		return *m.AttemptId
	}
	return 0
}

func (m *DataStatus) GetVisibility() DataInfo_DataVisibility {
	if m != nil && m.Visibility != nil {
		return *m.Visibility
	}
	return DataInfo_UNKNOWN_DataVisibility
}

func (m *DataStatus) GetRetryCount() int32 {
	if m != nil && m.RetryCount != nil {
		return *m.RetryCount
	}
	return 0
}

type PackageStatus struct {
	Status               *PackageStatus_Status `protobuf:"varint,1,opt,name=status,enum=hippo.PackageStatus_Status" json:"status,omitempty"`
	XXX_NoUnkeyedLiteral struct{}              `json:"-"`
	XXX_unrecognized     []byte                `json:"-"`
	XXX_sizecache        int32                 `json:"-"`
}

func (m *PackageStatus) Reset()         { *m = PackageStatus{} }
func (m *PackageStatus) String() string { return proto.CompactTextString(m) }
func (*PackageStatus) ProtoMessage()    {}
func (*PackageStatus) Descriptor() ([]byte, []int) {
	return fileDescriptor_ee72d9a89737215c, []int{41}
}
func (m *PackageStatus) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *PackageStatus) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_PackageStatus.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *PackageStatus) XXX_Merge(src proto.Message) {
	xxx_messageInfo_PackageStatus.Merge(m, src)
}
func (m *PackageStatus) XXX_Size() int {
	return m.Size()
}
func (m *PackageStatus) XXX_DiscardUnknown() {
	xxx_messageInfo_PackageStatus.DiscardUnknown(m)
}

var xxx_messageInfo_PackageStatus proto.InternalMessageInfo

func (m *PackageStatus) GetStatus() PackageStatus_Status {
	if m != nil && m.Status != nil {
		return *m.Status
	}
	return PackageStatus_IS_UNKNOWN
}

type LoadInfo struct {
	Name                 *string  `protobuf:"bytes,1,opt,name=name" json:"name,omitempty"`
	Value                *float64 `protobuf:"fixed64,2,opt,name=value" json:"value,omitempty"`
	Tags                 *string  `protobuf:"bytes,3,opt,name=tags" json:"tags,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *LoadInfo) Reset()         { *m = LoadInfo{} }
func (m *LoadInfo) String() string { return proto.CompactTextString(m) }
func (*LoadInfo) ProtoMessage()    {}
func (*LoadInfo) Descriptor() ([]byte, []int) {
	return fileDescriptor_ee72d9a89737215c, []int{42}
}
func (m *LoadInfo) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *LoadInfo) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_LoadInfo.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *LoadInfo) XXX_Merge(src proto.Message) {
	xxx_messageInfo_LoadInfo.Merge(m, src)
}
func (m *LoadInfo) XXX_Size() int {
	return m.Size()
}
func (m *LoadInfo) XXX_DiscardUnknown() {
	xxx_messageInfo_LoadInfo.DiscardUnknown(m)
}

var xxx_messageInfo_LoadInfo proto.InternalMessageInfo

func (m *LoadInfo) GetName() string {
	if m != nil && m.Name != nil {
		return *m.Name
	}
	return ""
}

func (m *LoadInfo) GetValue() float64 {
	if m != nil && m.Value != nil {
		return *m.Value
	}
	return 0
}

func (m *LoadInfo) GetTags() string {
	if m != nil && m.Tags != nil {
		return *m.Tags
	}
	return ""
}

type ContainerLoadInfo struct {
	ContainerName        *string     `protobuf:"bytes,1,opt,name=containerName" json:"containerName,omitempty"`
	ContainerIp          *string     `protobuf:"bytes,2,opt,name=containerIp" json:"containerIp,omitempty"`
	Service              *string     `protobuf:"bytes,3,opt,name=service" json:"service,omitempty"`
	UpdateTime           *int64      `protobuf:"varint,4,opt,name=updateTime" json:"updateTime,omitempty"`
	LoadInfo             []*LoadInfo `protobuf:"bytes,5,rep,name=loadInfo" json:"loadInfo,omitempty"`
	XXX_NoUnkeyedLiteral struct{}    `json:"-"`
	XXX_unrecognized     []byte      `json:"-"`
	XXX_sizecache        int32       `json:"-"`
}

func (m *ContainerLoadInfo) Reset()         { *m = ContainerLoadInfo{} }
func (m *ContainerLoadInfo) String() string { return proto.CompactTextString(m) }
func (*ContainerLoadInfo) ProtoMessage()    {}
func (*ContainerLoadInfo) Descriptor() ([]byte, []int) {
	return fileDescriptor_ee72d9a89737215c, []int{43}
}
func (m *ContainerLoadInfo) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *ContainerLoadInfo) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_ContainerLoadInfo.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *ContainerLoadInfo) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ContainerLoadInfo.Merge(m, src)
}
func (m *ContainerLoadInfo) XXX_Size() int {
	return m.Size()
}
func (m *ContainerLoadInfo) XXX_DiscardUnknown() {
	xxx_messageInfo_ContainerLoadInfo.DiscardUnknown(m)
}

var xxx_messageInfo_ContainerLoadInfo proto.InternalMessageInfo

func (m *ContainerLoadInfo) GetContainerName() string {
	if m != nil && m.ContainerName != nil {
		return *m.ContainerName
	}
	return ""
}

func (m *ContainerLoadInfo) GetContainerIp() string {
	if m != nil && m.ContainerIp != nil {
		return *m.ContainerIp
	}
	return ""
}

func (m *ContainerLoadInfo) GetService() string {
	if m != nil && m.Service != nil {
		return *m.Service
	}
	return ""
}

func (m *ContainerLoadInfo) GetUpdateTime() int64 {
	if m != nil && m.UpdateTime != nil {
		return *m.UpdateTime
	}
	return 0
}

func (m *ContainerLoadInfo) GetLoadInfo() []*LoadInfo {
	if m != nil {
		return m.LoadInfo
	}
	return nil
}

type SlotLoadInfo struct {
	SlotId               *int32               `protobuf:"varint,1,opt,name=slotId" json:"slotId,omitempty"`
	AppId                *string              `protobuf:"bytes,2,opt,name=appId" json:"appId,omitempty"`
	AppRole              *string              `protobuf:"bytes,3,opt,name=appRole" json:"appRole,omitempty"`
	CpuSetMode           *string              `protobuf:"bytes,4,opt,name=cpuSetMode" json:"cpuSetMode,omitempty"`
	Priority             *string              `protobuf:"bytes,5,opt,name=priority" json:"priority,omitempty"`
	IsPod                *bool                `protobuf:"varint,6,opt,name=isPod" json:"isPod,omitempty"`
	UpdateTime           *int64               `protobuf:"varint,7,opt,name=updateTime" json:"updateTime,omitempty"`
	Loadinfo             []*LoadInfo          `protobuf:"bytes,8,rep,name=loadinfo" json:"loadinfo,omitempty"`
	ContainerLoadInfo    []*ContainerLoadInfo `protobuf:"bytes,9,rep,name=containerLoadInfo" json:"containerLoadInfo,omitempty"`
	XXX_NoUnkeyedLiteral struct{}             `json:"-"`
	XXX_unrecognized     []byte               `json:"-"`
	XXX_sizecache        int32                `json:"-"`
}

func (m *SlotLoadInfo) Reset()         { *m = SlotLoadInfo{} }
func (m *SlotLoadInfo) String() string { return proto.CompactTextString(m) }
func (*SlotLoadInfo) ProtoMessage()    {}
func (*SlotLoadInfo) Descriptor() ([]byte, []int) {
	return fileDescriptor_ee72d9a89737215c, []int{44}
}
func (m *SlotLoadInfo) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *SlotLoadInfo) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_SlotLoadInfo.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *SlotLoadInfo) XXX_Merge(src proto.Message) {
	xxx_messageInfo_SlotLoadInfo.Merge(m, src)
}
func (m *SlotLoadInfo) XXX_Size() int {
	return m.Size()
}
func (m *SlotLoadInfo) XXX_DiscardUnknown() {
	xxx_messageInfo_SlotLoadInfo.DiscardUnknown(m)
}

var xxx_messageInfo_SlotLoadInfo proto.InternalMessageInfo

func (m *SlotLoadInfo) GetSlotId() int32 {
	if m != nil && m.SlotId != nil {
		return *m.SlotId
	}
	return 0
}

func (m *SlotLoadInfo) GetAppId() string {
	if m != nil && m.AppId != nil {
		return *m.AppId
	}
	return ""
}

func (m *SlotLoadInfo) GetAppRole() string {
	if m != nil && m.AppRole != nil {
		return *m.AppRole
	}
	return ""
}

func (m *SlotLoadInfo) GetCpuSetMode() string {
	if m != nil && m.CpuSetMode != nil {
		return *m.CpuSetMode
	}
	return ""
}

func (m *SlotLoadInfo) GetPriority() string {
	if m != nil && m.Priority != nil {
		return *m.Priority
	}
	return ""
}

func (m *SlotLoadInfo) GetIsPod() bool {
	if m != nil && m.IsPod != nil {
		return *m.IsPod
	}
	return false
}

func (m *SlotLoadInfo) GetUpdateTime() int64 {
	if m != nil && m.UpdateTime != nil {
		return *m.UpdateTime
	}
	return 0
}

func (m *SlotLoadInfo) GetLoadinfo() []*LoadInfo {
	if m != nil {
		return m.Loadinfo
	}
	return nil
}

func (m *SlotLoadInfo) GetContainerLoadInfo() []*ContainerLoadInfo {
	if m != nil {
		return m.ContainerLoadInfo
	}
	return nil
}

type SlaveLoadInfo struct {
	SlaveAddr            *string         `protobuf:"bytes,1,opt,name=slaveAddr" json:"slaveAddr,omitempty"`
	ClusterName          *string         `protobuf:"bytes,2,opt,name=clusterName" json:"clusterName,omitempty"`
	ServiceName          *string         `protobuf:"bytes,3,opt,name=serviceName" json:"serviceName,omitempty"`
	MachineType          *string         `protobuf:"bytes,4,opt,name=machineType" json:"machineType,omitempty"`
	UpdateTime           *int64          `protobuf:"varint,5,opt,name=updateTime" json:"updateTime,omitempty"`
	LoadInfo             []*LoadInfo     `protobuf:"bytes,6,rep,name=loadInfo" json:"loadInfo,omitempty"`
	SlotLoadInfo         []*SlotLoadInfo `protobuf:"bytes,7,rep,name=slotLoadInfo" json:"slotLoadInfo,omitempty"`
	XXX_NoUnkeyedLiteral struct{}        `json:"-"`
	XXX_unrecognized     []byte          `json:"-"`
	XXX_sizecache        int32           `json:"-"`
}

func (m *SlaveLoadInfo) Reset()         { *m = SlaveLoadInfo{} }
func (m *SlaveLoadInfo) String() string { return proto.CompactTextString(m) }
func (*SlaveLoadInfo) ProtoMessage()    {}
func (*SlaveLoadInfo) Descriptor() ([]byte, []int) {
	return fileDescriptor_ee72d9a89737215c, []int{45}
}
func (m *SlaveLoadInfo) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *SlaveLoadInfo) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_SlaveLoadInfo.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *SlaveLoadInfo) XXX_Merge(src proto.Message) {
	xxx_messageInfo_SlaveLoadInfo.Merge(m, src)
}
func (m *SlaveLoadInfo) XXX_Size() int {
	return m.Size()
}
func (m *SlaveLoadInfo) XXX_DiscardUnknown() {
	xxx_messageInfo_SlaveLoadInfo.DiscardUnknown(m)
}

var xxx_messageInfo_SlaveLoadInfo proto.InternalMessageInfo

func (m *SlaveLoadInfo) GetSlaveAddr() string {
	if m != nil && m.SlaveAddr != nil {
		return *m.SlaveAddr
	}
	return ""
}

func (m *SlaveLoadInfo) GetClusterName() string {
	if m != nil && m.ClusterName != nil {
		return *m.ClusterName
	}
	return ""
}

func (m *SlaveLoadInfo) GetServiceName() string {
	if m != nil && m.ServiceName != nil {
		return *m.ServiceName
	}
	return ""
}

func (m *SlaveLoadInfo) GetMachineType() string {
	if m != nil && m.MachineType != nil {
		return *m.MachineType
	}
	return ""
}

func (m *SlaveLoadInfo) GetUpdateTime() int64 {
	if m != nil && m.UpdateTime != nil {
		return *m.UpdateTime
	}
	return 0
}

func (m *SlaveLoadInfo) GetLoadInfo() []*LoadInfo {
	if m != nil {
		return m.LoadInfo
	}
	return nil
}

func (m *SlaveLoadInfo) GetSlotLoadInfo() []*SlotLoadInfo {
	if m != nil {
		return m.SlotLoadInfo
	}
	return nil
}

type SlaveNodeLoadInfo struct {
	SlaveLoadInfo        *SlaveLoadInfo `protobuf:"bytes,1,opt,name=slaveLoadInfo" json:"slaveLoadInfo,omitempty"`
	XXX_NoUnkeyedLiteral struct{}       `json:"-"`
	XXX_unrecognized     []byte         `json:"-"`
	XXX_sizecache        int32          `json:"-"`
}

func (m *SlaveNodeLoadInfo) Reset()         { *m = SlaveNodeLoadInfo{} }
func (m *SlaveNodeLoadInfo) String() string { return proto.CompactTextString(m) }
func (*SlaveNodeLoadInfo) ProtoMessage()    {}
func (*SlaveNodeLoadInfo) Descriptor() ([]byte, []int) {
	return fileDescriptor_ee72d9a89737215c, []int{46}
}
func (m *SlaveNodeLoadInfo) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *SlaveNodeLoadInfo) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_SlaveNodeLoadInfo.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *SlaveNodeLoadInfo) XXX_Merge(src proto.Message) {
	xxx_messageInfo_SlaveNodeLoadInfo.Merge(m, src)
}
func (m *SlaveNodeLoadInfo) XXX_Size() int {
	return m.Size()
}
func (m *SlaveNodeLoadInfo) XXX_DiscardUnknown() {
	xxx_messageInfo_SlaveNodeLoadInfo.DiscardUnknown(m)
}

var xxx_messageInfo_SlaveNodeLoadInfo proto.InternalMessageInfo

func (m *SlaveNodeLoadInfo) GetSlaveLoadInfo() *SlaveLoadInfo {
	if m != nil {
		return m.SlaveLoadInfo
	}
	return nil
}

type SetLoggerLevelRequest struct {
	Logger               *string                         `protobuf:"bytes,1,req,name=logger" json:"logger,omitempty"`
	Level                *SetLoggerLevelRequest_LogLevel `protobuf:"varint,2,req,name=level,enum=hippo.SetLoggerLevelRequest_LogLevel" json:"level,omitempty"`
	XXX_NoUnkeyedLiteral struct{}                        `json:"-"`
	XXX_unrecognized     []byte                          `json:"-"`
	XXX_sizecache        int32                           `json:"-"`
}

func (m *SetLoggerLevelRequest) Reset()         { *m = SetLoggerLevelRequest{} }
func (m *SetLoggerLevelRequest) String() string { return proto.CompactTextString(m) }
func (*SetLoggerLevelRequest) ProtoMessage()    {}
func (*SetLoggerLevelRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_ee72d9a89737215c, []int{47}
}
func (m *SetLoggerLevelRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *SetLoggerLevelRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_SetLoggerLevelRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *SetLoggerLevelRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_SetLoggerLevelRequest.Merge(m, src)
}
func (m *SetLoggerLevelRequest) XXX_Size() int {
	return m.Size()
}
func (m *SetLoggerLevelRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_SetLoggerLevelRequest.DiscardUnknown(m)
}

var xxx_messageInfo_SetLoggerLevelRequest proto.InternalMessageInfo

func (m *SetLoggerLevelRequest) GetLogger() string {
	if m != nil && m.Logger != nil {
		return *m.Logger
	}
	return ""
}

func (m *SetLoggerLevelRequest) GetLevel() SetLoggerLevelRequest_LogLevel {
	if m != nil && m.Level != nil {
		return *m.Level
	}
	return SetLoggerLevelRequest_DISABLE
}

type SetLoggerLevelResponse struct {
	ErrorInfo            *ErrorInfo `protobuf:"bytes,1,opt,name=errorInfo" json:"errorInfo,omitempty"`
	XXX_NoUnkeyedLiteral struct{}   `json:"-"`
	XXX_unrecognized     []byte     `json:"-"`
	XXX_sizecache        int32      `json:"-"`
}

func (m *SetLoggerLevelResponse) Reset()         { *m = SetLoggerLevelResponse{} }
func (m *SetLoggerLevelResponse) String() string { return proto.CompactTextString(m) }
func (*SetLoggerLevelResponse) ProtoMessage()    {}
func (*SetLoggerLevelResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_ee72d9a89737215c, []int{48}
}
func (m *SetLoggerLevelResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *SetLoggerLevelResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_SetLoggerLevelResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *SetLoggerLevelResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_SetLoggerLevelResponse.Merge(m, src)
}
func (m *SetLoggerLevelResponse) XXX_Size() int {
	return m.Size()
}
func (m *SetLoggerLevelResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_SetLoggerLevelResponse.DiscardUnknown(m)
}

var xxx_messageInfo_SetLoggerLevelResponse proto.InternalMessageInfo

func (m *SetLoggerLevelResponse) GetErrorInfo() *ErrorInfo {
	if m != nil {
		return m.ErrorInfo
	}
	return nil
}

type ClusterDescription struct {
	ClusterId            *string      `protobuf:"bytes,1,req,name=clusterId" json:"clusterId,omitempty"`
	DriverClass          *string      `protobuf:"bytes,2,opt,name=driverClass" json:"driverClass,omitempty"`
	Endpoint             *string      `protobuf:"bytes,3,opt,name=endpoint" json:"endpoint,omitempty"`
	ServiceAddr          *string      `protobuf:"bytes,4,opt,name=serviceAddr" json:"serviceAddr,omitempty"`
	SlaveRunMode         *string      `protobuf:"bytes,5,opt,name=slaveRunMode" json:"slaveRunMode,omitempty"`
	Conquered            *bool        `protobuf:"varint,6,opt,name=conquered,def=0" json:"conquered,omitempty"`
	NeedHeartBeat        *bool        `protobuf:"varint,7,opt,name=needHeartBeat,def=0" json:"needHeartBeat,omitempty"`
	Specs                []*Parameter `protobuf:"bytes,20,rep,name=specs" json:"specs,omitempty"`
	AddedTime            *int64       `protobuf:"varint,21,opt,name=addedTime" json:"addedTime,omitempty"`
	State                *string      `protobuf:"bytes,22,opt,name=state,def=online" json:"state,omitempty"`
	XXX_NoUnkeyedLiteral struct{}     `json:"-"`
	XXX_unrecognized     []byte       `json:"-"`
	XXX_sizecache        int32        `json:"-"`
}

func (m *ClusterDescription) Reset()         { *m = ClusterDescription{} }
func (m *ClusterDescription) String() string { return proto.CompactTextString(m) }
func (*ClusterDescription) ProtoMessage()    {}
func (*ClusterDescription) Descriptor() ([]byte, []int) {
	return fileDescriptor_ee72d9a89737215c, []int{49}
}
func (m *ClusterDescription) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *ClusterDescription) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_ClusterDescription.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *ClusterDescription) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ClusterDescription.Merge(m, src)
}
func (m *ClusterDescription) XXX_Size() int {
	return m.Size()
}
func (m *ClusterDescription) XXX_DiscardUnknown() {
	xxx_messageInfo_ClusterDescription.DiscardUnknown(m)
}

var xxx_messageInfo_ClusterDescription proto.InternalMessageInfo

const Default_ClusterDescription_Conquered bool = false
const Default_ClusterDescription_NeedHeartBeat bool = false
const Default_ClusterDescription_State string = "online"

func (m *ClusterDescription) GetClusterId() string {
	if m != nil && m.ClusterId != nil {
		return *m.ClusterId
	}
	return ""
}

func (m *ClusterDescription) GetDriverClass() string {
	if m != nil && m.DriverClass != nil {
		return *m.DriverClass
	}
	return ""
}

func (m *ClusterDescription) GetEndpoint() string {
	if m != nil && m.Endpoint != nil {
		return *m.Endpoint
	}
	return ""
}

func (m *ClusterDescription) GetServiceAddr() string {
	if m != nil && m.ServiceAddr != nil {
		return *m.ServiceAddr
	}
	return ""
}

func (m *ClusterDescription) GetSlaveRunMode() string {
	if m != nil && m.SlaveRunMode != nil {
		return *m.SlaveRunMode
	}
	return ""
}

func (m *ClusterDescription) GetConquered() bool {
	if m != nil && m.Conquered != nil {
		return *m.Conquered
	}
	return Default_ClusterDescription_Conquered
}

func (m *ClusterDescription) GetNeedHeartBeat() bool {
	if m != nil && m.NeedHeartBeat != nil {
		return *m.NeedHeartBeat
	}
	return Default_ClusterDescription_NeedHeartBeat
}

func (m *ClusterDescription) GetSpecs() []*Parameter {
	if m != nil {
		return m.Specs
	}
	return nil
}

func (m *ClusterDescription) GetAddedTime() int64 {
	if m != nil && m.AddedTime != nil {
		return *m.AddedTime
	}
	return 0
}

func (m *ClusterDescription) GetState() string {
	if m != nil && m.State != nil {
		return *m.State
	}
	return Default_ClusterDescription_State
}

type DiskInfo struct {
	DiskId               *string  `protobuf:"bytes,1,req,name=diskId" json:"diskId,omitempty"`
	WorkDir              *string  `protobuf:"bytes,2,opt,name=workDir" json:"workDir,omitempty"`
	DiskSize             *int32   `protobuf:"varint,3,opt,name=diskSize" json:"diskSize,omitempty"`
	MountPoint           *string  `protobuf:"bytes,4,opt,name=mountPoint" json:"mountPoint,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *DiskInfo) Reset()         { *m = DiskInfo{} }
func (m *DiskInfo) String() string { return proto.CompactTextString(m) }
func (*DiskInfo) ProtoMessage()    {}
func (*DiskInfo) Descriptor() ([]byte, []int) {
	return fileDescriptor_ee72d9a89737215c, []int{50}
}
func (m *DiskInfo) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *DiskInfo) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_DiskInfo.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *DiskInfo) XXX_Merge(src proto.Message) {
	xxx_messageInfo_DiskInfo.Merge(m, src)
}
func (m *DiskInfo) XXX_Size() int {
	return m.Size()
}
func (m *DiskInfo) XXX_DiscardUnknown() {
	xxx_messageInfo_DiskInfo.DiscardUnknown(m)
}

var xxx_messageInfo_DiskInfo proto.InternalMessageInfo

func (m *DiskInfo) GetDiskId() string {
	if m != nil && m.DiskId != nil {
		return *m.DiskId
	}
	return ""
}

func (m *DiskInfo) GetWorkDir() string {
	if m != nil && m.WorkDir != nil {
		return *m.WorkDir
	}
	return ""
}

func (m *DiskInfo) GetDiskSize() int32 {
	if m != nil && m.DiskSize != nil {
		return *m.DiskSize
	}
	return 0
}

func (m *DiskInfo) GetMountPoint() string {
	if m != nil && m.MountPoint != nil {
		return *m.MountPoint
	}
	return ""
}

func init() {
	proto.RegisterEnum("hippo.Operator", Operator_name, Operator_value)
	proto.RegisterEnum("hippo.PreferenceTag", PreferenceTag_name, PreferenceTag_value)
	proto.RegisterEnum("hippo.SlaveState", SlaveState_name, SlaveState_value)
	proto.RegisterEnum("hippo.PreferenceDescription_PreferenceType", PreferenceDescription_PreferenceType_name, PreferenceDescription_PreferenceType_value)
	proto.RegisterEnum("hippo.Resource_Type", Resource_Type_name, Resource_Type_value)
	proto.RegisterEnum("hippo.Priority_Level", Priority_Level_name, Priority_Level_value)
	proto.RegisterEnum("hippo.Visibility_VisibilityScope", Visibility_VisibilityScope_name, Visibility_VisibilityScope_value)
	proto.RegisterEnum("hippo.Visibility_VisibilityOperator", Visibility_VisibilityOperator_name, Visibility_VisibilityOperator_value)
	proto.RegisterEnum("hippo.ApplicationSlotConfig_WorkDirStyle", ApplicationSlotConfig_WorkDirStyle_name, ApplicationSlotConfig_WorkDirStyle_value)
	proto.RegisterEnum("hippo.ResourceRequest_AllocateMode", ResourceRequest_AllocateMode_name, ResourceRequest_AllocateMode_value)
	proto.RegisterEnum("hippo.ResourceRequest_SpreadLevel", ResourceRequest_SpreadLevel_name, ResourceRequest_SpreadLevel_value)
	proto.RegisterEnum("hippo.ResourceRequest_CpusetMode", ResourceRequest_CpusetMode_name, ResourceRequest_CpusetMode_value)
	proto.RegisterEnum("hippo.ApplicationDescription_ExclusiveMode", ApplicationDescription_ExclusiveMode_name, ApplicationDescription_ExclusiveMode_value)
	proto.RegisterEnum("hippo.ApplicationDescription_Status", ApplicationDescription_Status_name, ApplicationDescription_Status_value)
	proto.RegisterEnum("hippo.QueueDescription_ScheduleMode", QueueDescription_ScheduleMode_name, QueueDescription_ScheduleMode_value)
	proto.RegisterEnum("hippo.QueueDescription_QueueType", QueueDescription_QueueType_name, QueueDescription_QueueType_value)
	proto.RegisterEnum("hippo.SlaveStatus_Status", SlaveStatus_Status_name, SlaveStatus_Status_value)
	proto.RegisterEnum("hippo.SlaveHealth_HealthCode", SlaveHealth_HealthCode_name, SlaveHealth_HealthCode_value)
	proto.RegisterEnum("hippo.SystemStatus_Status", SystemStatus_Status_name, SystemStatus_Status_value)
	proto.RegisterEnum("hippo.ProcessStatus_Status", ProcessStatus_Status_name, ProcessStatus_Status_value)
	proto.RegisterEnum("hippo.PackageInfo_PackageType", PackageInfo_PackageType_name, PackageInfo_PackageType_value)
	proto.RegisterEnum("hippo.PackageInfo_PackageVisibility", PackageInfo_PackageVisibility_name, PackageInfo_PackageVisibility_value)
	proto.RegisterEnum("hippo.DataInfo_DataVisibility", DataInfo_DataVisibility_name, DataInfo_DataVisibility_value)
	proto.RegisterEnum("hippo.DataInfo_DataPathNormalizeType", DataInfo_DataPathNormalizeType_name, DataInfo_DataPathNormalizeType_value)
	proto.RegisterEnum("hippo.DataStatus_DeployStatus", DataStatus_DeployStatus_name, DataStatus_DeployStatus_value)
	proto.RegisterEnum("hippo.PackageStatus_Status", PackageStatus_Status_name, PackageStatus_Status_value)
	proto.RegisterEnum("hippo.SetLoggerLevelRequest_LogLevel", SetLoggerLevelRequest_LogLevel_name, SetLoggerLevelRequest_LogLevel_value)
	proto.RegisterType((*ErrorInfo)(nil), "hippo.ErrorInfo")
	proto.RegisterType((*SlotId)(nil), "hippo.SlotId")
	proto.RegisterType((*GenericResponse)(nil), "hippo.GenericResponse")
	proto.RegisterType((*PreferenceDescription)(nil), "hippo.PreferenceDescription")
	proto.RegisterType((*Resource)(nil), "hippo.Resource")
	proto.RegisterType((*Priority)(nil), "hippo.Priority")
	proto.RegisterType((*SlotResource)(nil), "hippo.SlotResource")
	proto.RegisterType((*SlaveResource)(nil), "hippo.SlaveResource")
	proto.RegisterType((*GrantedResource)(nil), "hippo.GrantedResource")
	proto.RegisterType((*SlaveRuntimeConfig)(nil), "hippo.SlaveRuntimeConfig")
	proto.RegisterType((*SlaveDescription)(nil), "hippo.SlaveDescription")
	proto.RegisterType((*SlaveSchedulability)(nil), "hippo.SlaveSchedulability")
	proto.RegisterType((*SlotPreference)(nil), "hippo.SlotPreference")
	proto.RegisterType((*SlotPreferenceConfig)(nil), "hippo.SlotPreferenceConfig")
	proto.RegisterType((*Visibility)(nil), "hippo.Visibility")
	proto.RegisterType((*ApplicationSlotConfig)(nil), "hippo.ApplicationSlotConfig")
	proto.RegisterType((*ResourceRequest)(nil), "hippo.ResourceRequest")
	proto.RegisterType((*ApplicationDescription)(nil), "hippo.ApplicationDescription")
	proto.RegisterType((*QueueResource)(nil), "hippo.QueueResource")
	proto.RegisterType((*QueueDescription)(nil), "hippo.QueueDescription")
	proto.RegisterType((*PodTraceInfo)(nil), "hippo.PodTraceInfo")
	proto.RegisterType((*ResourceResponse)(nil), "hippo.ResourceResponse")
	proto.RegisterType((*SlaveStatus)(nil), "hippo.SlaveStatus")
	proto.RegisterType((*SlaveHealth)(nil), "hippo.SlaveHealth")
	proto.RegisterType((*SystemStatus)(nil), "hippo.SystemStatus")
	proto.RegisterType((*ProcessStatus)(nil), "hippo.ProcessStatus")
	proto.RegisterType((*PackageDetail)(nil), "hippo.PackageDetail")
	proto.RegisterType((*SlotPayload)(nil), "hippo.SlotPayload")
	proto.RegisterType((*AssignedSlot)(nil), "hippo.AssignedSlot")
	proto.RegisterType((*HistoryInfo)(nil), "hippo.HistoryInfo")
	proto.RegisterType((*HistoryApp)(nil), "hippo.HistoryApp")
	proto.RegisterType((*HistoryTag)(nil), "hippo.HistoryTag")
	proto.RegisterType((*HistoryPod)(nil), "hippo.HistoryPod")
	proto.RegisterType((*ProcessLaunchContext)(nil), "hippo.ProcessLaunchContext")
	proto.RegisterType((*ProcessLaunchExtraInfo)(nil), "hippo.ProcessLaunchExtraInfo")
	proto.RegisterType((*PackageInfo)(nil), "hippo.PackageInfo")
	proto.RegisterType((*TrackData)(nil), "hippo.TrackData")
	proto.RegisterType((*ProcessInfo)(nil), "hippo.ProcessInfo")
	proto.RegisterType((*Parameter)(nil), "hippo.Parameter")
	proto.RegisterType((*DataInfo)(nil), "hippo.DataInfo")
	proto.RegisterType((*DataStatus)(nil), "hippo.DataStatus")
	proto.RegisterType((*PackageStatus)(nil), "hippo.PackageStatus")
	proto.RegisterType((*LoadInfo)(nil), "hippo.LoadInfo")
	proto.RegisterType((*ContainerLoadInfo)(nil), "hippo.ContainerLoadInfo")
	proto.RegisterType((*SlotLoadInfo)(nil), "hippo.SlotLoadInfo")
	proto.RegisterType((*SlaveLoadInfo)(nil), "hippo.SlaveLoadInfo")
	proto.RegisterType((*SlaveNodeLoadInfo)(nil), "hippo.SlaveNodeLoadInfo")
	proto.RegisterType((*SetLoggerLevelRequest)(nil), "hippo.SetLoggerLevelRequest")
	proto.RegisterType((*SetLoggerLevelResponse)(nil), "hippo.SetLoggerLevelResponse")
	proto.RegisterType((*ClusterDescription)(nil), "hippo.ClusterDescription")
	proto.RegisterType((*DiskInfo)(nil), "hippo.DiskInfo")
}

func init() { proto.RegisterFile("Common.proto", fileDescriptor_ee72d9a89737215c) }

var fileDescriptor_ee72d9a89737215c = []byte{
	// 5644 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0xa4, 0x7b, 0xcd, 0x73, 0xdc, 0xc8,
	0x79, 0x37, 0xe7, 0x93, 0x33, 0xcf, 0x70, 0x48, 0xb0, 0x45, 0x71, 0x67, 0xf5, 0x65, 0x2e, 0x56,
	0xeb, 0x57, 0xde, 0x5d, 0xcb, 0x14, 0xe5, 0xf5, 0xbb, 0x1e, 0x7b, 0xbd, 0x0b, 0xcd, 0x80, 0x22,
	0xa2, 0xe1, 0x0c, 0xd4, 0x18, 0x4a, 0xbb, 0xbe, 0xb0, 0xa0, 0x41, 0x8b, 0x42, 0x38, 0x03, 0x60,
	0x01, 0x0c, 0x2d, 0xba, 0x52, 0x2e, 0x5f, 0x92, 0xdc, 0x52, 0xbe, 0xa4, 0x2a, 0xa9, 0xfc, 0x01,
	0xf9, 0x38, 0x24, 0x97, 0x9c, 0x52, 0x95, 0x8b, 0xe3, 0x43, 0x4e, 0xa9, 0xdc, 0x7c, 0x48, 0x25,
	0x95, 0x72, 0x0e, 0xa9, 0xa4, 0x72, 0xcf, 0x31, 0xa9, 0xfe, 0x00, 0xd0, 0xc0, 0xcc, 0x48, 0xda,
	0x0d, 0x0f, 0xd2, 0xf4, 0xaf, 0x9f, 0xfe, 0x7c, 0xba, 0x9f, 0xaf, 0x7e, 0x00, 0x1b, 0x3d, 0x7f,
	0x36, 0xf3, 0xbd, 0xbb, 0x41, 0xe8, 0xc7, 0x3e, 0xaa, 0xbd, 0x70, 0x83, 0xc0, 0xbf, 0xb6, 0xa5,
	0x87, 0xa1, 0x1f, 0xf6, 0x7c, 0x87, 0x70, 0x5c, 0x25, 0xd0, 0x64, 0x90, 0xe1, 0x3d, 0xf7, 0x51,
	0x17, 0x9a, 0x24, 0xa9, 0xef, 0x94, 0xf6, 0x4a, 0x77, 0x36, 0x0f, 0x94, 0xbb, 0xac, 0xe1, 0xdd,
	0xb4, 0x5d, 0x17, 0x74, 0x8c, 0x47, 0xf8, 0x74, 0x38, 0x1a, 0xea, 0x38, 0x23, 0x47, 0x37, 0xa0,
	0xc1, 0x0a, 0xc7, 0xd1, 0x59, 0xa7, 0xbc, 0x57, 0xba, 0xd3, 0xec, 0xae, 0xe1, 0x14, 0x51, 0x7f,
	0x51, 0x86, 0xba, 0x35, 0xf5, 0x63, 0xc3, 0x41, 0x2a, 0x6c, 0x44, 0x53, 0xfb, 0x82, 0x68, 0x8e,
	0x13, 0x92, 0x28, 0x62, 0xe3, 0x34, 0x71, 0x0e, 0x43, 0x9b, 0x50, 0x76, 0x1d, 0xd6, 0x4d, 0x0d,
	0x97, 0x5d, 0x07, 0xed, 0x41, 0xcb, 0x21, 0x93, 0xa9, 0x1d, 0x92, 0xb1, 0x3b, 0x23, 0x9d, 0xca,
	0x5e, 0xe9, 0x4e, 0x05, 0xcb, 0x10, 0xba, 0x03, 0x5b, 0x21, 0x89, 0xe2, 0xe7, 0xf3, 0xe9, 0x51,
	0x1c, 0x07, 0xa6, 0x1f, 0xc6, 0x9d, 0x2a, 0x6b, 0x5e, 0x84, 0xd1, 0x6d, 0x68, 0xb3, 0xb1, 0x52,
	0xba, 0x1a, 0xa3, 0xcb, 0x83, 0xe8, 0x06, 0x34, 0xcf, 0x3f, 0x8e, 0x4c, 0xdf, 0x39, 0x31, 0xfa,
	0x9d, 0x3a, 0x9b, 0x62, 0x06, 0xa0, 0x5b, 0x00, 0xbc, 0x30, 0xb4, 0x67, 0xa4, 0xb3, 0xce, 0xaa,
	0x25, 0x84, 0xae, 0xf1, 0xfc, 0xe3, 0x88, 0xfe, 0x8c, 0x02, 0x7b, 0x42, 0x3a, 0x0d, 0xbe, 0x46,
	0x19, 0x53, 0x35, 0xd8, 0x7a, 0x48, 0x3c, 0x12, 0xba, 0x13, 0x4c, 0xa2, 0xc0, 0xf7, 0x22, 0x82,
	0xee, 0x8a, 0xfd, 0xa7, 0xcc, 0x60, 0xfb, 0xd2, 0xca, 0xef, 0x3f, 0xc5, 0x71, 0x46, 0xa2, 0xfe,
	0x7e, 0x05, 0xae, 0x9a, 0x21, 0x79, 0x4e, 0x42, 0xe2, 0x4d, 0x48, 0x9f, 0x44, 0x93, 0xd0, 0x0d,
	0x62, 0xd7, 0xf7, 0xde, 0x68, 0x93, 0x0d, 0xa8, 0xc6, 0x97, 0x01, 0x61, 0xdb, 0xbc, 0x79, 0xf0,
	0x81, 0x18, 0x68, 0x69, 0x7f, 0x12, 0x3a, 0xbe, 0x0c, 0x48, 0xb7, 0x61, 0x62, 0xfd, 0xf0, 0x54,
	0x1b, 0x7e, 0x81, 0x59, 0x17, 0xe8, 0x1d, 0x58, 0x9f, 0x12, 0x3b, 0x22, 0xc7, 0x11, 0xe3, 0x4d,
	0xbb, 0xbb, 0x7e, 0xff, 0x7b, 0xfb, 0xf4, 0x0f, 0x27, 0x38, 0x65, 0x61, 0x48, 0x22, 0x7f, 0x1e,
	0x4e, 0xc8, 0xd8, 0x3e, 0x63, 0xcc, 0x69, 0x62, 0x19, 0x42, 0xd7, 0xa0, 0xe1, 0xb8, 0xd1, 0x39,
	0xdb, 0xd2, 0x1a, 0xab, 0x4e, 0xcb, 0xe8, 0x9b, 0xd0, 0x9a, 0x47, 0x24, 0xec, 0x93, 0xe7, 0xae,
	0x47, 0x1c, 0xc6, 0x90, 0x46, 0xb7, 0x1a, 0x87, 0x73, 0x82, 0xe5, 0x0a, 0xca, 0x98, 0x9f, 0xf8,
	0xe1, 0x79, 0xdf, 0x0d, 0xe9, 0x20, 0x82, 0x31, 0x19, 0xa2, 0x3e, 0x81, 0xcd, 0xfc, 0x52, 0xd0,
	0x06, 0xa4, 0x8b, 0x51, 0xd6, 0xd0, 0x16, 0xb4, 0x58, 0x89, 0xfe, 0xa3, 0x63, 0xa5, 0x84, 0x10,
	0x6c, 0x32, 0xe0, 0x81, 0x3e, 0x1e, 0xeb, 0x78, 0x38, 0x1a, 0x2b, 0x65, 0xb4, 0x0d, 0x6d, 0x41,
	0x34, 0x3a, 0x32, 0x1e, 0x18, 0x63, 0xa5, 0xa2, 0xfe, 0x5e, 0x19, 0x1a, 0x58, 0xac, 0x05, 0xed,
	0x8b, 0x8d, 0xe5, 0x37, 0x68, 0x47, 0x6c, 0x6c, 0x52, 0x7d, 0x97, 0xed, 0x60, 0xdd, 0xea, 0x69,
	0x03, 0x0d, 0x8b, 0xfd, 0x43, 0x50, 0xf5, 0xe8, 0xb2, 0xd9, 0xc5, 0xc1, 0xec, 0x37, 0xda, 0x85,
	0xba, 0x3d, 0xf3, 0xe7, 0x5e, 0xcc, 0xb6, 0xb4, 0x86, 0x45, 0x49, 0xfd, 0x93, 0x12, 0x54, 0xd9,
	0xcc, 0x01, 0x44, 0x27, 0xca, 0x1a, 0x6a, 0x40, 0x75, 0xac, 0x7f, 0x3e, 0x56, 0x4a, 0x48, 0x81,
	0x0d, 0xfd, 0xf3, 0xde, 0xe0, 0xa4, 0xaf, 0x9f, 0x32, 0xa4, 0x8c, 0x36, 0x01, 0x1e, 0x9f, 0xe8,
	0x27, 0xfa, 0xe9, 0x50, 0x3b, 0xd6, 0x95, 0x0a, 0x6a, 0x43, 0x93, 0x51, 0x58, 0xc6, 0x13, 0x5d,
	0xa9, 0x26, 0x4b, 0xd6, 0x31, 0xa7, 0xaf, 0xf1, 0xe5, 0xf1, 0x95, 0x71, 0xa8, 0x4e, 0xbb, 0xe0,
	0x43, 0x9d, 0xf6, 0x8e, 0x4d, 0x65, 0x1d, 0x75, 0x60, 0x47, 0xb4, 0xc9, 0x53, 0x36, 0xd4, 0x7f,
	0x2e, 0x41, 0xc3, 0x0c, 0x5d, 0x3f, 0x74, 0xe3, 0x4b, 0x74, 0x07, 0xda, 0x33, 0xfb, 0xb7, 0xfd,
	0x30, 0x01, 0xd8, 0x8e, 0xd4, 0xba, 0xe5, 0xfb, 0x07, 0x38, 0x5f, 0x81, 0xfe, 0x1f, 0xb4, 0x67,
	0xae, 0x27, 0x51, 0xb2, 0xbb, 0xdf, 0x2d, 0xed, 0xe3, 0x3c, 0xae, 0xfe, 0x0c, 0x6a, 0x03, 0x72,
	0x41, 0xa6, 0xe8, 0x2a, 0x34, 0x4e, 0x86, 0x7d, 0xfd, 0xd0, 0x18, 0xea, 0xca, 0xff, 0x24, 0x7f,
	0x25, 0xb6, 0x29, 0x5f, 0x58, 0x63, 0xfd, 0x98, 0x6f, 0x8a, 0x89, 0x47, 0x7d, 0x65, 0x8f, 0x72,
	0x71, 0x38, 0x1a, 0xd2, 0xc2, 0xe9, 0xb1, 0x66, 0x8d, 0x75, 0xac, 0x7c, 0x86, 0xae, 0x64, 0xd8,
	0xd3, 0x11, 0x7e, 0xa4, 0x63, 0xe5, 0xe7, 0x25, 0xd4, 0xa4, 0xfb, 0x68, 0x8d, 0x95, 0x9f, 0x97,
	0xd1, 0x0e, 0x28, 0x49, 0xbd, 0x39, 0xd0, 0xc6, 0x87, 0x23, 0x7c, 0xac, 0xbc, 0xa3, 0x7e, 0x02,
	0x1b, 0x54, 0x8e, 0xa5, 0xbc, 0xfe, 0x36, 0x34, 0x93, 0x33, 0x4c, 0x6f, 0x59, 0xe5, 0x4e, 0xeb,
	0x60, 0xab, 0xc0, 0x70, 0x9c, 0x51, 0xa8, 0xbf, 0x2c, 0x41, 0xdb, 0xa2, 0x97, 0xf0, 0x6b, 0x76,
	0x80, 0x3e, 0x81, 0xed, 0x90, 0x44, 0x24, 0xbc, 0x20, 0x0e, 0x4e, 0x9b, 0x95, 0x97, 0x37, 0x5b,
	0xa4, 0x44, 0x3d, 0xd8, 0x89, 0x2e, 0x23, 0xbc, 0xd0, 0x43, 0x65, 0x79, 0x0f, 0x4b, 0x89, 0xd5,
	0xcf, 0x60, 0xeb, 0x61, 0x68, 0x7b, 0x71, 0x86, 0x7d, 0xd5, 0x6d, 0xf8, 0xef, 0x0a, 0x20, 0xbe,
	0x0d, 0x73, 0x2f, 0x76, 0x67, 0xa4, 0xe7, 0x7b, 0xcf, 0xdd, 0x33, 0x74, 0x1d, 0x6a, 0x17, 0xf6,
	0xd4, 0x75, 0xd8, 0x39, 0x69, 0x74, 0x6b, 0xcf, 0xed, 0x69, 0x44, 0x30, 0xc7, 0xd0, 0x3e, 0x6c,
	0x4f, 0x82, 0xf9, 0x49, 0x64, 0x9f, 0x11, 0xcb, 0x7e, 0x4e, 0xb0, 0x1d, 0xbb, 0xbe, 0x38, 0x26,
	0xe5, 0x8f, 0xf7, 0xf1, 0x62, 0x25, 0x3d, 0x54, 0x64, 0x6a, 0x47, 0xb1, 0x3b, 0x39, 0x26, 0x33,
	0x3f, 0xbc, 0xe4, 0x17, 0x89, 0x1d, 0xaa, 0x1c, 0x8e, 0x3e, 0x81, 0xb7, 0xce, 0xe6, 0x36, 0x5b,
	0x12, 0x71, 0x7a, 0xc1, 0xfc, 0xd0, 0x0f, 0x87, 0xbe, 0x67, 0x86, 0xbe, 0xc3, 0x95, 0x48, 0xb7,
	0xf2, 0xf1, 0xfe, 0x3e, 0x5e, 0x45, 0x83, 0xbe, 0x0f, 0x3b, 0xc4, 0xb3, 0x9f, 0x4d, 0x09, 0xef,
	0x2e, 0x3d, 0xc3, 0x35, 0x79, 0x15, 0x4b, 0x49, 0xd0, 0xb7, 0x61, 0x73, 0x1e, 0x91, 0xa4, 0x38,
	0x1a, 0x1d, 0x0b, 0xd1, 0x26, 0x1a, 0x15, 0x2a, 0xd1, 0x3d, 0x50, 0x78, 0x37, 0xa3, 0xd1, 0xf1,
	0x23, 0x77, 0x3a, 0xd5, 0xa6, 0x53, 0x26, 0xe4, 0xd2, 0x06, 0x0b, 0xd5, 0xe8, 0x33, 0xe8, 0xcc,
	0xd8, 0x98, 0x6c, 0x73, 0x7a, 0xf6, 0x74, 0x62, 0x78, 0x83, 0x70, 0xfe, 0xc4, 0x25, 0x3f, 0x61,
	0x6a, 0x29, 0x11, 0xa3, 0x2b, 0xa9, 0xb2, 0x41, 0x7b, 0xfe, 0xd4, 0x11, 0x3b, 0xd9, 0x5c, 0x32,
	0x68, 0x56, 0x8d, 0x3a, 0xb0, 0x3e, 0x61, 0x2c, 0x8d, 0x3a, 0xb0, 0x57, 0xb9, 0xd3, 0xc4, 0x49,
	0x51, 0xfd, 0x9b, 0x1a, 0x28, 0x8c, 0xf3, 0xb2, 0xb6, 0xea, 0xc0, 0xba, 0x9d, 0x53, 0x54, 0x49,
	0x11, 0x7d, 0x03, 0x9a, 0xd1, 0xd4, 0x8f, 0x7b, 0x4c, 0x0e, 0x0a, 0x99, 0x70, 0x0f, 0x67, 0x18,
	0xea, 0x0a, 0x6d, 0x9e, 0x9c, 0x32, 0xc6, 0xe3, 0x56, 0x2a, 0x74, 0x73, 0x77, 0x0d, 0xe7, 0x49,
	0xd1, 0xbb, 0xd0, 0x74, 0xa3, 0xd1, 0xf3, 0xe7, 0x53, 0xd7, 0x23, 0x8c, 0xd1, 0xe9, 0x8a, 0x32,
	0x1c, 0x5d, 0x87, 0x75, 0xd6, 0xca, 0x70, 0x18, 0x3f, 0x2b, 0xf4, 0xf8, 0x24, 0x08, 0x7a, 0x1f,
	0x14, 0x8f, 0x10, 0x47, 0xd0, 0x52, 0xc1, 0x10, 0x75, 0xea, 0x7b, 0x95, 0x3b, 0x35, 0xbc, 0x80,
	0xa3, 0x4f, 0xa1, 0x1d, 0xca, 0xa7, 0x9d, 0x31, 0xae, 0x75, 0xf0, 0x76, 0x6e, 0xa6, 0x32, 0x01,
	0xce, 0xd3, 0x53, 0xc3, 0xc5, 0xe7, 0x1d, 0x62, 0x62, 0x47, 0xbe, 0x27, 0xac, 0x8a, 0x3c, 0x88,
	0xee, 0x40, 0x7d, 0x6a, 0x3f, 0x23, 0xd3, 0xa8, 0xd3, 0x64, 0xd7, 0x30, 0x31, 0x20, 0x4c, 0x3b,
	0xb4, 0x67, 0x24, 0x26, 0x21, 0x16, 0xf5, 0xe8, 0x5d, 0x00, 0xa6, 0x9c, 0xf9, 0x4d, 0x02, 0x7e,
	0xd0, 0xef, 0xed, 0xef, 0x63, 0x09, 0x46, 0xdf, 0x81, 0x5a, 0x14, 0xdb, 0x31, 0xe9, 0xb4, 0x98,
	0x32, 0xdb, 0x96, 0x67, 0x6b, 0xd1, 0x8a, 0x6e, 0x7d, 0x34, 0x1c, 0x18, 0x43, 0x1d, 0x73, 0x3a,
	0xf4, 0x11, 0x6c, 0x5c, 0xb8, 0x91, 0xfb, 0xcc, 0x9d, 0xba, 0xb1, 0x4b, 0xa2, 0xce, 0x06, 0x9b,
	0x45, 0xd2, 0xee, 0x49, 0x52, 0x75, 0x89, 0x73, 0x64, 0xd4, 0x3c, 0x88, 0x26, 0x2f, 0x88, 0xd3,
	0xf7, 0x67, 0xb6, 0xeb, 0x75, 0xda, 0xdc, 0x3c, 0x90, 0x20, 0xf4, 0x09, 0xb4, 0x82, 0x54, 0x75,
	0x47, 0x9d, 0x4d, 0xd6, 0xef, 0xf5, 0x74, 0x3e, 0x7e, 0x9c, 0x29, 0x76, 0xb1, 0x7f, 0x32, 0x3d,
	0x7a, 0x00, 0x9b, 0xac, 0xb7, 0xf9, 0xd4, 0xe6, 0x13, 0xe8, 0x6c, 0xb1, 0xfd, 0xbf, 0x96, 0x5b,
	0x51, 0x8e, 0x02, 0x17, 0x5a, 0xa8, 0xcf, 0xe0, 0xca, 0x12, 0x32, 0x7a, 0x8e, 0x04, 0x21, 0x09,
	0xf9, 0x01, 0xee, 0x72, 0x73, 0x1b, 0x67, 0x38, 0xb5, 0x60, 0xd2, 0xde, 0xa6, 0x5c, 0xd3, 0xa7,
	0x16, 0x8c, 0x54, 0xa1, 0x1e, 0xc3, 0x66, 0x7e, 0x31, 0xe8, 0x07, 0xb0, 0x4e, 0x17, 0x12, 0xdb,
	0x67, 0x05, 0x8b, 0x42, 0xb2, 0x64, 0xec, 0xb3, 0x2e, 0x37, 0x5c, 0x86, 0x23, 0x7c, 0xac, 0x0d,
	0x70, 0xd2, 0x42, 0x9d, 0xc1, 0xce, 0xb2, 0xbd, 0xa1, 0x57, 0x2e, 0xb0, 0xe3, 0x98, 0x84, 0x5e,
	0x72, 0xe5, 0x44, 0x51, 0x1e, 0xae, 0xfc, 0x95, 0x87, 0xfb, 0xbb, 0x32, 0x40, 0xc6, 0x63, 0xf4,
	0x29, 0xd4, 0xa2, 0x89, 0x9f, 0x9a, 0x42, 0xef, 0x2c, 0x9c, 0x02, 0xe9, 0xa7, 0x45, 0x09, 0xbb,
	0xf5, 0x87, 0x83, 0xd1, 0x03, 0x6d, 0x80, 0x79, 0x3b, 0xf4, 0x31, 0x94, 0xfd, 0x40, 0xcc, 0xe3,
	0xf6, 0xab, 0x5a, 0x8f, 0x02, 0x12, 0xda, 0xb1, 0x1f, 0x76, 0xcb, 0xc6, 0x10, 0x97, 0xfd, 0x40,
	0x5e, 0x60, 0x25, 0xbf, 0xc0, 0x9b, 0x50, 0x9b, 0xba, 0x33, 0x57, 0x38, 0x08, 0xdd, 0xf5, 0x7b,
	0xfb, 0xdc, 0x54, 0xe5, 0xa8, 0xfa, 0x14, 0xb6, 0x0a, 0x93, 0xa2, 0x46, 0x05, 0x9f, 0x96, 0xb2,
	0xc6, 0xed, 0x45, 0x63, 0x84, 0x8d, 0xf1, 0x17, 0x4a, 0x89, 0xda, 0x52, 0xd4, 0xaa, 0xb2, 0x4c,
	0xad, 0xa7, 0x2b, 0x65, 0x56, 0xb4, 0x98, 0xf1, 0x68, 0x7c, 0xae, 0x54, 0x28, 0x2d, 0xd6, 0xad,
	0xd1, 0x09, 0xee, 0xe9, 0x4a, 0x55, 0xbd, 0x03, 0x68, 0x71, 0xbe, 0xa8, 0x0e, 0x65, 0x63, 0xa8,
	0xac, 0xd1, 0x31, 0x86, 0xa3, 0xf1, 0xa9, 0x31, 0x54, 0x4a, 0xea, 0xaf, 0x4b, 0x70, 0x55, 0x0b,
	0x82, 0xa9, 0x3b, 0xa1, 0x77, 0xd0, 0xb3, 0x98, 0xb4, 0x63, 0x6c, 0xfb, 0x1c, 0x36, 0x84, 0x35,
	0x6b, 0xc5, 0x97, 0xd3, 0x64, 0x5f, 0xbf, 0x25, 0x76, 0x66, 0x69, 0x9b, 0xbb, 0x4f, 0xa5, 0x06,
	0xdd, 0xa6, 0x66, 0x9a, 0xa7, 0xd6, 0xf8, 0x8b, 0x81, 0x8e, 0x73, 0x3d, 0xa1, 0x03, 0xd8, 0x79,
	0xe6, 0x7a, 0x76, 0x78, 0xd9, 0xb3, 0x27, 0x2f, 0x48, 0xe6, 0xba, 0x70, 0x93, 0x74, 0x69, 0x9d,
	0xba, 0x0f, 0x1b, 0x72, 0xe7, 0x74, 0xf9, 0x69, 0xf7, 0xca, 0x1a, 0x35, 0x24, 0x69, 0x71, 0xac,
	0x3d, 0x14, 0x50, 0x49, 0xfd, 0x55, 0x0b, 0xb6, 0x52, 0x71, 0x4c, 0xbe, 0x9c, 0x93, 0x28, 0x46,
	0x0a, 0x54, 0x92, 0xb3, 0xdd, 0xc4, 0xf4, 0x27, 0xfa, 0x36, 0xac, 0xfb, 0x4c, 0x33, 0x24, 0xa6,
	0xcd, 0x15, 0xe9, 0x9a, 0xa7, 0xcd, 0x13, 0x1a, 0xb4, 0x03, 0xb5, 0x89, 0x64, 0x28, 0xf3, 0x02,
	0xba, 0x0f, 0x1b, 0xdc, 0x41, 0xb4, 0x79, 0x4f, 0xd5, 0xe5, 0x56, 0x49, 0x8e, 0x08, 0x1d, 0xc3,
	0x86, 0x3d, 0x9d, 0xfa, 0x13, 0x3b, 0x26, 0xc7, 0xd4, 0x09, 0xae, 0xb1, 0xfd, 0x7d, 0xb7, 0xd8,
	0x88, 0xcf, 0xfc, 0xae, 0x26, 0x91, 0x76, 0xab, 0xda, 0xc9, 0x78, 0x84, 0x73, 0xcd, 0xe9, 0xcc,
	0xbe, 0x9c, 0x93, 0x39, 0x11, 0x1e, 0x24, 0x2f, 0xa0, 0x0f, 0xa0, 0x11, 0x24, 0x36, 0x02, 0x57,
	0x02, 0x5b, 0xe9, 0x15, 0xe3, 0x30, 0x4e, 0x09, 0xe8, 0x39, 0x3e, 0x0b, 0xfd, 0x79, 0x60, 0x38,
	0x42, 0xde, 0x27, 0x45, 0xf4, 0x21, 0x34, 0x66, 0x24, 0xb6, 0xc7, 0xf6, 0xd9, 0x6a, 0x59, 0x9f,
	0x52, 0x50, 0x21, 0x35, 0x8f, 0x48, 0x2f, 0x98, 0x47, 0x24, 0x66, 0xc2, 0x3e, 0x53, 0x76, 0x29,
	0x8e, 0x7e, 0x0b, 0x5a, 0x51, 0x10, 0x12, 0xdb, 0x61, 0x36, 0xb6, 0x90, 0xf9, 0xea, 0x8a, 0xd5,
	0x5b, 0x19, 0x65, 0xb7, 0x7a, 0x34, 0xb2, 0xc6, 0x58, 0x6e, 0x8c, 0xee, 0x02, 0x9a, 0xd9, 0x2f,
	0x0d, 0x2f, 0x8a, 0x6d, 0x6f, 0x42, 0x4c, 0x12, 0x1e, 0xf9, 0x51, 0xdc, 0xd9, 0x60, 0x2c, 0x5a,
	0x52, 0x83, 0xf6, 0xe1, 0x4a, 0x1e, 0x3d, 0xa4, 0x8b, 0x60, 0x9a, 0xa0, 0x86, 0x97, 0x55, 0x2d,
	0x8e, 0x80, 0xed, 0xc9, 0x79, 0x67, 0x73, 0xd9, 0x08, 0xb4, 0x06, 0x7d, 0x08, 0xdb, 0x79, 0x54,
	0xb3, 0x9e, 0x32, 0x2d, 0x50, 0xc3, 0x8b, 0x15, 0x8b, 0xd4, 0xa6, 0xf5, 0xb4, 0xa3, 0x2c, 0xa3,
	0x36, 0xad, 0xa7, 0xcc, 0xe1, 0x0e, 0xc8, 0xc4, 0x7d, 0xee, 0x12, 0xc7, 0x08, 0xa2, 0xce, 0x36,
	0x33, 0x7b, 0x72, 0x18, 0x55, 0xe0, 0x41, 0xe8, 0xbf, 0x70, 0x9f, 0xb9, 0x31, 0x27, 0x42, 0x8c,
	0x28, 0x0f, 0x52, 0xaa, 0x90, 0x7c, 0x39, 0x77, 0x43, 0x32, 0x23, 0x5e, 0x6c, 0x38, 0x9d, 0x2b,
	0x5c, 0xcd, 0xe7, 0x40, 0xea, 0x2c, 0x47, 0x71, 0xe8, 0x4e, 0xe2, 0xe9, 0x65, 0x67, 0x87, 0x72,
	0x13, 0xa7, 0x65, 0xa4, 0x01, 0x4c, 0x18, 0x3f, 0xd9, 0x11, 0xbe, 0x9a, 0x13, 0xbd, 0x45, 0x26,
	0xf6, 0x52, 0x42, 0x2c, 0x35, 0x42, 0x1f, 0x32, 0xbb, 0x94, 0xf2, 0x45, 0x5c, 0xf0, 0xce, 0xae,
	0xa4, 0xb0, 0x0a, 0x75, 0x74, 0x32, 0x69, 0xec, 0xe7, 0x2d, 0xee, 0xb9, 0x27, 0x65, 0x6a, 0x22,
	0x4d, 0x7c, 0x2f, 0xb6, 0x5d, 0x8f, 0x84, 0x3d, 0x61, 0x13, 0x76, 0xd8, 0xba, 0x17, 0x70, 0x74,
	0x83, 0x7a, 0x11, 0x6c, 0x5e, 0xc3, 0xa8, 0xf3, 0x36, 0x0f, 0xba, 0xa4, 0x00, 0x3a, 0x80, 0xd6,
	0x73, 0xe2, 0x98, 0xf6, 0xe5, 0xd4, 0xb7, 0x9d, 0xa8, 0x73, 0x6d, 0xc5, 0x91, 0x97, 0x89, 0x50,
	0x0f, 0x36, 0xa7, 0xf6, 0xdc, 0x9b, 0xbc, 0x18, 0x93, 0x59, 0x30, 0xa5, 0x76, 0xcc, 0x75, 0x76,
	0xe1, 0xae, 0xa7, 0x17, 0xce, 0x9f, 0x90, 0x28, 0x1a, 0x30, 0x9a, 0x9e, 0xef, 0xc5, 0xe4, 0x65,
	0x8c, 0x0b, 0x4d, 0xd0, 0x1d, 0xd8, 0xe2, 0x88, 0xe5, 0x9e, 0x79, 0x76, 0x3c, 0x0f, 0x49, 0xe7,
	0x06, 0x8b, 0x40, 0x15, 0x61, 0x4a, 0x19, 0xd8, 0x93, 0x73, 0x6a, 0x42, 0xbf, 0x20, 0x93, 0xf3,
	0x68, 0x3e, 0xeb, 0xdc, 0x64, 0xcb, 0x28, 0xc2, 0xea, 0x77, 0x60, 0x43, 0x96, 0x1e, 0xa8, 0x05,
	0xeb, 0xc7, 0x5a, 0xef, 0x88, 0x7a, 0xb3, 0xcc, 0x71, 0xb5, 0x06, 0x23, 0xea, 0xcd, 0x37, 0x80,
	0x89, 0x15, 0xa5, 0xac, 0x3e, 0x82, 0x96, 0x74, 0xe1, 0x28, 0xfd, 0xc9, 0x70, 0x60, 0x1c, 0x1b,
	0x63, 0x4e, 0x4f, 0xef, 0x9f, 0x42, 0xfd, 0xd7, 0xda, 0x21, 0xa6, 0x6e, 0x7e, 0x99, 0x82, 0x58,
	0xeb, 0x3d, 0x52, 0x2a, 0x68, 0x1d, 0x2a, 0x9a, 0xf5, 0x54, 0xa9, 0xd2, 0x1f, 0xa6, 0xf5, 0x54,
	0xa9, 0xa9, 0x3f, 0x02, 0xc8, 0x18, 0x4f, 0x29, 0x87, 0x23, 0x36, 0x70, 0x13, 0x6a, 0xd6, 0x91,
	0x86, 0x75, 0xa5, 0x24, 0x74, 0x97, 0x8e, 0x9f, 0xe8, 0x7d, 0xae, 0xd8, 0xb2, 0x98, 0x41, 0x45,
	0xfd, 0x17, 0x80, 0x5d, 0x49, 0xd9, 0xc8, 0xb6, 0xfc, 0x6d, 0x68, 0xdb, 0x59, 0x8d, 0xe1, 0x08,
	0xb9, 0x9e, 0x07, 0xa9, 0xb9, 0x67, 0x07, 0x41, 0xba, 0x49, 0x65, 0x1e, 0xd0, 0x93, 0x20, 0x84,
	0xa0, 0x3a, 0x8f, 0x48, 0x28, 0x94, 0x37, 0xfb, 0x8d, 0xde, 0x83, 0x8d, 0x90, 0xb0, 0x6e, 0xb8,
	0x43, 0x50, 0x4d, 0x1c, 0x82, 0x1c, 0x8c, 0x3e, 0x05, 0x45, 0x5c, 0x96, 0xd4, 0x41, 0x65, 0x82,
	0x7c, 0x85, 0x1e, 0x59, 0x20, 0x46, 0x23, 0xd8, 0x09, 0x96, 0x1c, 0x0c, 0x26, 0xc5, 0x5f, 0x73,
	0x76, 0x96, 0x36, 0x44, 0x3f, 0x80, 0xb7, 0xfc, 0xa9, 0xc3, 0x0d, 0x31, 0x2e, 0xd7, 0x1f, 0x11,
	0x12, 0xb0, 0x58, 0xe6, 0x7a, 0xe2, 0x54, 0xac, 0xa2, 0x40, 0x4f, 0xa0, 0x4d, 0x5e, 0x4e, 0xa6,
	0xf3, 0xc8, 0xbd, 0xe0, 0x4a, 0xa9, 0x91, 0x0b, 0xd8, 0x2d, 0xe7, 0xc3, 0x5d, 0x5d, 0x6e, 0xd2,
	0xad, 0x68, 0xa6, 0x89, 0xf3, 0xdd, 0xa0, 0x1f, 0x02, 0x44, 0xa9, 0x95, 0xc0, 0x3c, 0xba, 0xd6,
	0xc1, 0x8d, 0x57, 0x59, 0x12, 0x58, 0xa2, 0xcf, 0x54, 0x1b, 0xc8, 0xaa, 0xad, 0x0f, 0x75, 0xea,
	0x06, 0xcc, 0x23, 0xa1, 0x3b, 0x6e, 0xbf, 0x7a, 0x92, 0x16, 0xa3, 0xed, 0xd6, 0xb5, 0xde, 0xd8,
	0x78, 0xa2, 0x63, 0xd1, 0x76, 0x41, 0x0b, 0x6f, 0xfc, 0xdf, 0xb4, 0xb0, 0xac, 0x6f, 0xdb, 0xaf,
	0xd3, 0xb7, 0x5c, 0x5e, 0x45, 0x71, 0x68, 0xbb, 0x5e, 0x6c, 0xfa, 0x53, 0x77, 0x72, 0xc9, 0x54,
	0x4a, 0x15, 0x2f, 0xe0, 0xb2, 0x6e, 0xde, 0xca, 0xeb, 0xe6, 0xa2, 0xf1, 0xa1, 0xbc, 0x89, 0xf1,
	0x91, 0x53, 0xd1, 0xdb, 0x2b, 0x54, 0x74, 0x5e, 0xb8, 0xa3, 0xaf, 0x23, 0xdc, 0x97, 0x89, 0xe4,
	0x2b, 0x2b, 0x44, 0xf2, 0xbb, 0x2c, 0x6c, 0x4b, 0xc2, 0x0b, 0x1e, 0x79, 0xdf, 0x49, 0x4e, 0xab,
	0x8c, 0xe6, 0xe5, 0xf6, 0xd5, 0xa2, 0xdc, 0xfe, 0x10, 0xb6, 0x2f, 0xed, 0xd0, 0xd3, 0x72, 0x52,
	0x61, 0x97, 0x51, 0x2d, 0x56, 0x48, 0xfe, 0xeb, 0x5b, 0xaf, 0xf1, 0x5f, 0xdf, 0x01, 0x88, 0xe6,
	0xcf, 0x66, 0x6e, 0xcc, 0x66, 0xd6, 0x49, 0x66, 0x26, 0x81, 0xe8, 0x26, 0xac, 0x5f, 0x90, 0x30,
	0x72, 0x7d, 0x8f, 0xab, 0x93, 0x6e, 0xe5, 0xde, 0xdd, 0x7d, 0x9c, 0x60, 0x79, 0xc7, 0xed, 0xda,
	0x72, 0xc7, 0x4d, 0xfd, 0x00, 0xda, 0xb9, 0xbb, 0xc4, 0xc4, 0xa9, 0x69, 0x2a, 0x6b, 0xf4, 0xc7,
	0x58, 0x7b, 0xc8, 0xa5, 0x34, 0x13, 0xa0, 0x65, 0xf5, 0x10, 0xea, 0xfc, 0x4c, 0x53, 0x7b, 0x9e,
	0x9f, 0x6a, 0x6e, 0xdb, 0x1f, 0xe2, 0xd1, 0x8f, 0xf5, 0xa1, 0x52, 0xa2, 0x82, 0x5b, 0xc8, 0x55,
	0xa5, 0x4c, 0x0b, 0x8f, 0x8c, 0xc1, 0xc0, 0x18, 0x3e, 0x54, 0x2a, 0x94, 0x8a, 0x16, 0xf4, 0xbe,
	0x52, 0x55, 0xff, 0xa1, 0x04, 0xed, 0xc7, 0xf4, 0x46, 0x7d, 0xdd, 0x38, 0xe1, 0x35, 0x68, 0xcc,
	0x5c, 0x4f, 0x8a, 0x9b, 0xe0, 0xb4, 0xcc, 0xea, 0xec, 0x97, 0x3d, 0xc9, 0x64, 0x4e, 0xcb, 0x54,
	0x83, 0x25, 0x77, 0xc7, 0x61, 0xbe, 0x6e, 0x94, 0xbc, 0xa3, 0x14, 0x60, 0xca, 0x56, 0xff, 0x82,
	0x84, 0xc9, 0xed, 0x7b, 0x3c, 0xf7, 0x63, 0x5b, 0xbc, 0xa5, 0x2c, 0x56, 0xa8, 0x7f, 0x50, 0x01,
	0x85, 0x2d, 0x48, 0xd6, 0x15, 0x49, 0xd8, 0xbb, 0x24, 0x85, 0xbd, 0xbb, 0xd0, 0xfe, 0x52, 0x5e,
	0xb8, 0xf0, 0x00, 0x12, 0x27, 0x34, 0xb7, 0x29, 0x38, 0x4f, 0x8a, 0x3e, 0x85, 0x26, 0x03, 0xc6,
	0x97, 0x01, 0x0f, 0x04, 0x65, 0x57, 0xa3, 0x38, 0x36, 0x07, 0x28, 0x21, 0xce, 0xda, 0xa0, 0x23,
	0xd8, 0x48, 0x18, 0xcf, 0xae, 0x57, 0x35, 0x27, 0xc4, 0x16, 0xfa, 0xb0, 0x24, 0x5a, 0x9c, 0x6b,
	0x89, 0x6e, 0xe5, 0x82, 0x2b, 0x7c, 0x5b, 0x24, 0x44, 0xfd, 0x16, 0x6c, 0xc8, 0xad, 0xa9, 0x82,
	0xb5, 0x4c, 0xac, 0x6b, 0xfd, 0xd1, 0xc9, 0x98, 0x9f, 0x18, 0xd3, 0x18, 0xe8, 0x27, 0xa6, 0x52,
	0x52, 0xc7, 0xd0, 0x4c, 0x27, 0x8b, 0xde, 0x86, 0xab, 0xd6, 0x58, 0x1b, 0x1b, 0xbd, 0xd3, 0xc4,
	0xb3, 0x3c, 0x65, 0xc1, 0x7d, 0x65, 0x0d, 0x5d, 0x83, 0xdd, 0xfe, 0x17, 0x43, 0xed, 0x78, 0xb1,
	0x8e, 0xbd, 0x0a, 0xf0, 0xb0, 0xb8, 0x40, 0xca, 0xea, 0x5f, 0x94, 0x60, 0xc3, 0xf4, 0x9d, 0x71,
	0x68, 0x4f, 0x08, 0x7b, 0xfc, 0x53, 0xa0, 0x32, 0x77, 0x13, 0x75, 0x4d, 0x7f, 0x16, 0x9f, 0x6c,
	0xca, 0x8b, 0x4f, 0x36, 0xe2, 0xb9, 0xc5, 0xe1, 0xcf, 0x2d, 0x95, 0xec, 0xb9, 0x85, 0x23, 0x54,
	0xd2, 0x3c, 0x27, 0x0e, 0xf5, 0x74, 0x89, 0xd3, 0x9b, 0xce, 0xa3, 0x98, 0x84, 0xe2, 0xe5, 0x67,
	0x01, 0xcf, 0x19, 0x91, 0xb5, 0xbc, 0x11, 0xa9, 0xfe, 0x6e, 0x19, 0x94, 0x4c, 0xb8, 0x89, 0xd7,
	0xb2, 0xc2, 0xf4, 0x4a, 0x8b, 0xd3, 0xfb, 0x3e, 0xb4, 0xed, 0x28, 0x72, 0xcf, 0x3c, 0xe2, 0xf0,
	0xd8, 0x5c, 0xde, 0x9b, 0xd4, 0xa4, 0x3a, 0x9c, 0xa7, 0xcc, 0xcd, 0xa6, 0x52, 0x30, 0x69, 0x3f,
	0x82, 0x56, 0x40, 0x3c, 0xc7, 0xf5, 0xce, 0x4c, 0xdf, 0x49, 0x1c, 0xcb, 0xa4, 0x53, 0x79, 0x4f,
	0xb1, 0x4c, 0x87, 0x34, 0xd8, 0x16, 0xc5, 0x93, 0xc0, 0xb1, 0x63, 0xc2, 0x1a, 0xd7, 0x56, 0x37,
	0x5e, 0xa4, 0x56, 0xa7, 0xd0, 0x4a, 0x23, 0x6f, 0xf3, 0x08, 0xdd, 0x4b, 0xb5, 0x2d, 0x8f, 0x03,
	0xbc, 0x5d, 0x8c, 0xce, 0xcd, 0x23, 0xa1, 0x62, 0x13, 0xd5, 0xaa, 0xbe, 0x9f, 0x0a, 0x28, 0x66,
	0x41, 0x3e, 0x1a, 0x8e, 0x9e, 0x0e, 0xb9, 0x05, 0xd9, 0xd7, 0xb5, 0x3e, 0xb7, 0x20, 0xb5, 0x01,
	0x15, 0x5b, 0x65, 0xf5, 0x17, 0x15, 0x31, 0xdc, 0x11, 0xb1, 0xa7, 0xf1, 0x0b, 0xa4, 0x42, 0xd3,
	0x8d, 0xf8, 0xef, 0x4b, 0x11, 0xa2, 0xe7, 0xfe, 0x40, 0x06, 0xa3, 0x87, 0xd0, 0x74, 0x82, 0x03,
	0x3e, 0x84, 0x88, 0xdb, 0xdc, 0x94, 0x67, 0xc5, 0xe9, 0xee, 0xf2, 0xff, 0xf8, 0x7b, 0xf2, 0x51,
	0xef, 0x54, 0x4c, 0x04, 0x67, 0x6d, 0xd1, 0x63, 0xd8, 0x24, 0xde, 0xc5, 0xc3, 0xb9, 0x1d, 0x3a,
	0xa2, 0xb7, 0xca, 0x57, 0xed, 0xad, 0xd0, 0x01, 0x35, 0x2b, 0x26, 0xec, 0x4d, 0x5c, 0x74, 0x58,
	0xfd, 0xaa, 0x1d, 0xe6, 0x9a, 0xab, 0x21, 0x40, 0x46, 0x47, 0xf7, 0xed, 0xa8, 0x77, 0x3a, 0x7a,
	0xa4, 0xac, 0xa1, 0x4d, 0x90, 0x1a, 0x29, 0x25, 0xb4, 0x0d, 0xed, 0xa3, 0xde, 0xe9, 0x70, 0x74,
	0x6a, 0xe2, 0x51, 0x4f, 0xb7, 0x2c, 0xa5, 0x8c, 0xb6, 0xa0, 0x75, 0xd4, 0x3b, 0xc5, 0x66, 0xef,
	0xf4, 0x50, 0x33, 0x06, 0x4a, 0x05, 0xed, 0x80, 0x72, 0xd4, 0x3b, 0xed, 0x1d, 0xe9, 0xbd, 0x47,
	0xa7, 0x63, 0xe3, 0x58, 0xa7, 0x62, 0xa0, 0x2a, 0xc8, 0x4e, 0x86, 0x47, 0xba, 0x36, 0x18, 0x1f,
	0x29, 0x35, 0xd5, 0x81, 0x0d, 0xeb, 0x32, 0x8a, 0xc9, 0x4c, 0x2c, 0xe9, 0xa0, 0x70, 0x02, 0xd2,
	0x68, 0xa6, 0x44, 0x54, 0x3c, 0x02, 0x7b, 0xaf, 0xd3, 0x51, 0xea, 0xaf, 0x2a, 0xd0, 0x16, 0xd6,
	0xad, 0xa0, 0xbc, 0x06, 0x0d, 0x37, 0xea, 0xdb, 0x64, 0xe6, 0xf3, 0x78, 0x61, 0x03, 0xa7, 0x65,
	0x74, 0x3f, 0x9d, 0x03, 0xe7, 0x77, 0xc1, 0x3e, 0x5e, 0x3a, 0x09, 0x7a, 0x79, 0x85, 0xa5, 0xcc,
	0xde, 0x7b, 0xf9, 0x15, 0x93, 0x21, 0xea, 0x51, 0x87, 0x24, 0x8a, 0xed, 0x30, 0x96, 0x8c, 0x7d,
	0x9c, 0xc3, 0xa8, 0xe1, 0xc1, 0x4a, 0xcc, 0x02, 0x60, 0xe1, 0x79, 0x9c, 0x01, 0xec, 0x0e, 0xbf,
	0x74, 0x63, 0x96, 0xcd, 0x50, 0xe7, 0x7a, 0x2e, 0x29, 0x53, 0x69, 0x17, 0xb8, 0x0e, 0xb3, 0xbe,
	0x6b, 0x98, 0xfe, 0xa4, 0xb2, 0xcc, 0x15, 0x3e, 0xbd, 0x88, 0xb5, 0x54, 0xb0, 0x84, 0xa0, 0x7d,
	0x00, 0x3f, 0x7e, 0x41, 0xd8, 0xcb, 0xfb, 0xea, 0x80, 0x8b, 0x44, 0xa3, 0xfe, 0x2c, 0xdd, 0xe8,
	0x4d, 0x00, 0xd3, 0x3a, 0xcd, 0xae, 0x1b, 0x2f, 0xe3, 0x93, 0xe1, 0x90, 0xaa, 0x7e, 0x76, 0x42,
	0x68, 0x59, 0xb7, 0xc6, 0x1a, 0x1e, 0x53, 0x88, 0x9d, 0x10, 0xd3, 0x3a, 0xb5, 0xc6, 0x23, 0xd3,
	0xe4, 0xe6, 0x01, 0x6f, 0xc3, 0x00, 0x6a, 0x22, 0x50, 0x8d, 0x61, 0x5a, 0xec, 0xf8, 0xe8, 0x7d,
	0xf1, 0x6a, 0x6b, 0x9d, 0x8e, 0x75, 0x7c, 0x6c, 0x0c, 0xb5, 0xb1, 0xde, 0x57, 0xea, 0xea, 0x1f,
	0x96, 0xa1, 0x6d, 0x72, 0xbf, 0xb3, 0x4f, 0x62, 0xdb, 0x9d, 0xa2, 0x5d, 0xa8, 0xc7, 0x76, 0x74,
	0x2e, 0xc4, 0x7c, 0x05, 0x8b, 0x12, 0xc5, 0x25, 0x16, 0x36, 0x53, 0x2e, 0xe5, 0xf6, 0xb7, 0xb2,
	0x64, 0x7f, 0x27, 0x7e, 0xc4, 0x2b, 0xab, 0xac, 0x32, 0x2d, 0x53, 0xee, 0x39, 0xfe, 0x4f, 0x3c,
	0xea, 0x85, 0x5b, 0xee, 0x4f, 0x13, 0xe6, 0xe4, 0x30, 0xda, 0x7b, 0xec, 0xc7, 0xf6, 0x94, 0x11,
	0xd4, 0x79, 0xef, 0x29, 0x40, 0xf9, 0x11, 0x85, 0x93, 0x07, 0x76, 0x44, 0x4e, 0x42, 0x37, 0x79,
	0xca, 0xcf, 0x10, 0x3a, 0x67, 0x12, 0x32, 0xf9, 0xcc, 0xe3, 0x62, 0xa2, 0xc4, 0x4e, 0x16, 0x5f,
	0x34, 0x3b, 0x59, 0x4d, 0x71, 0xb2, 0x32, 0x48, 0xfd, 0x31, 0x15, 0x6b, 0x7e, 0x2c, 0x82, 0x04,
	0xe8, 0x26, 0x4b, 0x36, 0xe1, 0xe9, 0x16, 0x6d, 0xc9, 0x41, 0x34, 0x1c, 0x96, 0x7b, 0xf2, 0x21,
	0x34, 0x82, 0x24, 0xe6, 0x50, 0x5e, 0x15, 0x66, 0x4b, 0x28, 0xd4, 0x3f, 0x6d, 0xc1, 0x86, 0xac,
	0x57, 0x5e, 0xd7, 0x7b, 0x07, 0xd6, 0x43, 0xea, 0x03, 0xb8, 0xdc, 0x09, 0x6e, 0xe0, 0xa4, 0xb8,
	0xe8, 0x48, 0x57, 0xde, 0xc0, 0x91, 0x6e, 0x2d, 0x3a, 0xd2, 0xff, 0x1f, 0x36, 0x22, 0xc9, 0xdd,
	0x65, 0x9c, 0x5a, 0xe1, 0x09, 0xe7, 0x08, 0xa9, 0x25, 0x16, 0xc8, 0x57, 0x58, 0xe8, 0xaa, 0x9d,
	0x65, 0xd7, 0x1b, 0xe7, 0x49, 0xd1, 0x77, 0xa1, 0x15, 0x65, 0x4a, 0x48, 0x38, 0xce, 0x68, 0x51,
	0x3d, 0x61, 0x99, 0x0c, 0xdd, 0x03, 0x70, 0xec, 0xd8, 0x16, 0x8d, 0xd6, 0x73, 0x2f, 0x47, 0xfd,
	0xb4, 0x02, 0x4b, 0x44, 0xcb, 0x62, 0x33, 0x8d, 0x37, 0x8e, 0xcd, 0x34, 0x97, 0xc6, 0x66, 0xd8,
	0xc2, 0x39, 0x24, 0x66, 0x02, 0xb9, 0x37, 0x45, 0x53, 0xae, 0xc3, 0x79, 0x52, 0x76, 0x6a, 0xb9,
	0xec, 0x9d, 0xfa, 0x3c, 0xda, 0xd9, 0xc0, 0x12, 0x82, 0x3e, 0x02, 0xe4, 0xf9, 0x03, 0xdf, 0x3b,
	0x23, 0xe1, 0xb1, 0x1d, 0x4f, 0x5e, 0x30, 0xcb, 0x8e, 0x79, 0xa5, 0xa9, 0xb3, 0xb7, 0x84, 0x00,
	0x3d, 0x86, 0xbd, 0x1c, 0x2a, 0x7b, 0x7a, 0x22, 0x28, 0xc8, 0xbc, 0xd4, 0xb4, 0x93, 0xd7, 0x92,
	0xe7, 0xce, 0xf5, 0xd6, 0xeb, 0xce, 0x35, 0xfa, 0x14, 0x14, 0x91, 0x6e, 0x95, 0x25, 0x0d, 0x28,
	0xaf, 0x88, 0xa9, 0x14, 0x89, 0xd1, 0xa7, 0xf0, 0x56, 0x6e, 0x4a, 0x4f, 0xb3, 0x34, 0x9d, 0x9c,
	0xab, 0xbb, 0x8a, 0x0a, 0x75, 0xa1, 0x13, 0x84, 0xa4, 0x4f, 0x82, 0xa9, 0x7f, 0x69, 0x16, 0x18,
	0x89, 0x18, 0x23, 0x57, 0xd6, 0xa3, 0x01, 0xec, 0x16, 0xeb, 0x04, 0x6b, 0xaf, 0xbc, 0x82, 0xb5,
	0x2b, 0xda, 0xe4, 0xe2, 0x09, 0x3b, 0x5f, 0x21, 0x7e, 0x7f, 0x75, 0x75, 0xfc, 0x7e, 0xf7, 0xb5,
	0xf1, 0xfb, 0x85, 0xb0, 0xf0, 0x5b, 0xcb, 0xc2, 0xc2, 0x77, 0x60, 0x8b, 0xba, 0xd4, 0xbd, 0xc4,
	0x8d, 0x37, 0x1c, 0xe6, 0x18, 0x37, 0x71, 0x11, 0x46, 0x9f, 0xc0, 0x66, 0x94, 0x7b, 0x18, 0x64,
	0x1e, 0x72, 0xeb, 0xe0, 0xea, 0xd2, 0x17, 0x55, 0x5c, 0x20, 0x46, 0x3f, 0x84, 0xcd, 0x40, 0x56,
	0x2d, 0x49, 0x3c, 0xb6, 0xb0, 0x93, 0xbc, 0x12, 0x17, 0x68, 0x13, 0x5f, 0xe3, 0x7a, 0xe6, 0x6b,
	0xe4, 0xf2, 0xed, 0x6e, 0xbc, 0x3a, 0xdf, 0xee, 0xe6, 0x6b, 0xf3, 0xed, 0x6e, 0x2d, 0xe6, 0xdb,
	0xb1, 0x9c, 0xc2, 0xa0, 0xf3, 0x0d, 0x56, 0x53, 0x76, 0x03, 0xf5, 0xbb, 0xd0, 0x3a, 0x72, 0xa3,
	0xd8, 0x0f, 0x2f, 0x99, 0xfb, 0xf3, 0x1e, 0x54, 0xed, 0x20, 0x48, 0x5c, 0xeb, 0x44, 0xea, 0x08,
	0x0a, 0x2d, 0x08, 0x30, 0xab, 0x56, 0x75, 0x80, 0x0c, 0xa3, 0xeb, 0xb0, 0x83, 0xa0, 0x53, 0xda,
	0x2b, 0xd3, 0x75, 0xd8, 0x41, 0x40, 0xbb, 0x89, 0x29, 0x43, 0xcb, 0xcb, 0xba, 0x19, 0xdb, 0x67,
	0x98, 0x55, 0xab, 0xf3, 0xb4, 0x1b, 0x7a, 0xb4, 0xd3, 0x17, 0xb0, 0x72, 0xf2, 0x02, 0xf6, 0x1e,
	0x54, 0x03, 0xdf, 0x59, 0xd1, 0x8d, 0xe9, 0x3b, 0x98, 0x55, 0xaf, 0x78, 0x63, 0xa9, 0xec, 0x95,
	0x97, 0xbf, 0xb1, 0xa8, 0x7f, 0x56, 0x4a, 0xc7, 0x35, 0x7d, 0x27, 0x73, 0xf9, 0xca, 0x92, 0xcb,
	0x27, 0x27, 0x5a, 0x96, 0xf7, 0xca, 0xc5, 0x44, 0x4b, 0x61, 0x54, 0x09, 0x8b, 0x80, 0x56, 0xa7,
	0x65, 0x91, 0xb6, 0x59, 0x65, 0xc3, 0x53, 0xe5, 0x56, 0xcc, 0x42, 0xac, 0xb1, 0x81, 0xf2, 0x59,
	0x88, 0xbb, 0x50, 0x77, 0xdc, 0xe8, 0xdc, 0x70, 0x3a, 0x75, 0x56, 0x2b, 0x4a, 0xea, 0x3f, 0x95,
	0x61, 0x67, 0x59, 0x84, 0x15, 0xfd, 0x28, 0x8b, 0xee, 0x8a, 0x43, 0x96, 0x30, 0x0d, 0xe5, 0xcf,
	0x1e, 0x73, 0xa2, 0x16, 0x68, 0xd1, 0x3e, 0x34, 0x85, 0xae, 0x4a, 0x33, 0xa7, 0x50, 0x5e, 0xa5,
	0xf1, 0x34, 0xcb, 0x94, 0x08, 0x7d, 0x94, 0x5e, 0x3d, 0x87, 0x6a, 0xa1, 0x62, 0xb6, 0x14, 0xc5,
	0x58, 0x93, 0x3c, 0x15, 0xfa, 0x0c, 0xb6, 0x8b, 0x02, 0x24, 0x71, 0x16, 0x97, 0xcd, 0x74, 0x91,
	0x78, 0xf1, 0xce, 0xd7, 0x96, 0xdd, 0xf9, 0x03, 0x68, 0x91, 0x97, 0x31, 0xf1, 0x1c, 0x6e, 0x99,
	0xd6, 0x57, 0xbd, 0x8b, 0x48, 0x44, 0xea, 0x5f, 0x96, 0x60, 0x37, 0xb7, 0xbb, 0xfa, 0xcb, 0x38,
	0x64, 0xab, 0xa0, 0x62, 0xe9, 0xcb, 0xb9, 0x1f, 0xdb, 0x86, 0x93, 0xec, 0xeb, 0x12, 0xb1, 0x94,
	0x50, 0xd0, 0xc1, 0x27, 0x4c, 0xa0, 0x99, 0x76, 0xfc, 0x62, 0xb5, 0x81, 0x24, 0x13, 0x15, 0x27,
	0x5c, 0x79, 0x93, 0x09, 0xff, 0x7b, 0x19, 0x5a, 0xd2, 0x6e, 0x51, 0x89, 0x20, 0x64, 0xca, 0x09,
	0x36, 0x84, 0xef, 0x2f, 0x21, 0xe8, 0x20, 0x97, 0xdc, 0x7a, 0x6b, 0x71, 0xbf, 0x93, 0xdf, 0x2c,
	0x04, 0xc4, 0xb3, 0x30, 0x07, 0x00, 0x69, 0x4e, 0xca, 0xa5, 0x70, 0x37, 0x6f, 0xaf, 0x6e, 0x99,
	0x3d, 0xe6, 0x77, 0xeb, 0xe6, 0xc9, 0x83, 0x81, 0xd1, 0xc3, 0x52, 0x7b, 0xd5, 0x4d, 0x27, 0xcc,
	0x02, 0x37, 0x6f, 0xc1, 0x15, 0x61, 0xff, 0x9f, 0x4a, 0xb0, 0xb2, 0x46, 0xed, 0xf8, 0x93, 0xa1,
	0x75, 0x62, 0x9a, 0x23, 0x2c, 0x5e, 0x7c, 0x0e, 0x8d, 0x81, 0xae, 0x94, 0xd1, 0x3a, 0x54, 0xfa,
	0x06, 0xe6, 0xef, 0x37, 0xd8, 0x3c, 0x56, 0xaa, 0xd4, 0x65, 0xd7, 0x70, 0xef, 0x88, 0x3a, 0x6c,
	0x35, 0xea, 0x70, 0x1a, 0xc7, 0xda, 0x43, 0x5d, 0xa9, 0xab, 0x8f, 0x60, 0x7b, 0x61, 0x4e, 0xe8,
	0x26, 0xbc, 0x5d, 0x18, 0x30, 0xab, 0x14, 0x11, 0x26, 0x36, 0x69, 0x1e, 0x93, 0x34, 0xb1, 0xf1,
	0x44, 0x1b, 0x53, 0xaf, 0xff, 0xcf, 0x4b, 0xd0, 0x1c, 0x87, 0xf6, 0xe4, 0x9c, 0x9e, 0x62, 0x84,
	0xa0, 0x1a, 0xd8, 0xf1, 0x8b, 0x24, 0x44, 0x47, 0x7f, 0xd3, 0x6b, 0x3d, 0xa3, 0xca, 0xd9, 0x14,
	0xf9, 0x15, 0xdc, 0x67, 0xc8, 0x61, 0x2c, 0xfe, 0xe5, 0x9f, 0x99, 0xb9, 0x0c, 0x0c, 0x09, 0x41,
	0x7b, 0xd0, 0x38, 0x4f, 0x9e, 0x40, 0x98, 0xef, 0xd0, 0xad, 0xde, 0xff, 0xde, 0xfe, 0x3e, 0x4e,
	0x51, 0xa4, 0x42, 0x93, 0x25, 0x64, 0xa4, 0xee, 0x43, 0xad, 0x5b, 0xbd, 0xb7, 0x7f, 0xf0, 0x5d,
	0x9c, 0xc1, 0xea, 0x5f, 0x55, 0xa0, 0x25, 0x5d, 0x5a, 0xf4, 0x4e, 0xd1, 0x4d, 0x4d, 0xac, 0x8a,
	0xcc, 0x5b, 0x2d, 0x38, 0x9e, 0xe5, 0x45, 0xc7, 0x53, 0x81, 0xca, 0x64, 0x96, 0x98, 0xdb, 0xf4,
	0x27, 0xba, 0x0d, 0x55, 0xe2, 0x5d, 0x24, 0x97, 0x77, 0xf1, 0xa4, 0xb2, 0x5a, 0x4a, 0x65, 0x87,
	0x67, 0x89, 0x99, 0xbc, 0x84, 0x8a, 0xd6, 0x16, 0xdc, 0xcc, 0xfa, 0x82, 0x9b, 0xf9, 0x1e, 0xb4,
	0xa2, 0xd8, 0x67, 0x5b, 0xe0, 0xcf, 0x63, 0xf1, 0x3c, 0xc4, 0xd2, 0xb2, 0x64, 0x1c, 0x7d, 0xc8,
	0xf3, 0xdd, 0xed, 0x30, 0x36, 0xbc, 0x98, 0x84, 0x17, 0xf6, 0x94, 0xdb, 0xbd, 0xdd, 0xf2, 0xbd,
	0x7d, 0x5c, 0xac, 0x42, 0xfb, 0x2c, 0x6b, 0x34, 0xf5, 0x9b, 0x07, 0x2c, 0xfd, 0xa5, 0x99, 0xd2,
	0x2f, 0x56, 0xa2, 0xdb, 0x7c, 0x9b, 0xac, 0xd8, 0x0f, 0x2c, 0xf7, 0x4c, 0x64, 0x87, 0x51, 0x5a,
	0x19, 0x2e, 0xf8, 0xc4, 0xad, 0x37, 0xf0, 0x89, 0xef, 0x43, 0x33, 0xad, 0xa0, 0x3b, 0x7d, 0x4e,
	0x2e, 0x93, 0x90, 0xe3, 0x39, 0xb9, 0x44, 0x3b, 0x2c, 0x03, 0x74, 0x9e, 0xf0, 0x85, 0x17, 0xd4,
	0xff, 0xa8, 0x40, 0x23, 0x91, 0xb2, 0x4b, 0x83, 0xc6, 0x0a, 0x54, 0xa2, 0x70, 0x22, 0x1a, 0xd1,
	0x9f, 0x14, 0x71, 0xa2, 0x38, 0x61, 0xa2, 0x13, 0xc5, 0xd4, 0x10, 0x4b, 0xde, 0x02, 0x78, 0x28,
	0x21, 0x7d, 0x06, 0xb8, 0x01, 0x4d, 0x7a, 0x2a, 0x67, 0x41, 0x22, 0x62, 0x2b, 0x38, 0x03, 0xd0,
	0x37, 0x01, 0xc8, 0xcb, 0xc0, 0x15, 0x1a, 0x91, 0x31, 0xac, 0x5b, 0x3f, 0xf8, 0xe8, 0xfb, 0x07,
	0xfb, 0xfb, 0x58, 0xaa, 0x41, 0x0f, 0x73, 0xd2, 0x63, 0x3d, 0x27, 0x77, 0x92, 0xc9, 0xb3, 0x1f,
	0x92, 0xdc, 0x48, 0xae, 0x9d, 0x2c, 0x38, 0xd0, 0x07, 0x94, 0xb5, 0x71, 0x78, 0x29, 0xb1, 0xaa,
	0x91, 0x24, 0xae, 0x16, 0x6b, 0xd0, 0x63, 0x68, 0x7b, 0x7e, 0x38, 0xb3, 0xa7, 0xee, 0x4f, 0x79,
	0xd8, 0xbb, 0xc9, 0x06, 0x7e, 0x6f, 0xd9, 0xc0, 0x54, 0xfa, 0x0e, 0x65, 0xe2, 0x2e, 0x7b, 0xb6,
	0xc0, 0xf9, 0x1e, 0x54, 0x1d, 0x36, 0xf3, 0xd3, 0x44, 0xd7, 0x60, 0x37, 0x11, 0x25, 0xf9, 0x9a,
	0x57, 0xc9, 0x91, 0x8f, 0xe0, 0xea, 0xd2, 0x41, 0xd3, 0xd7, 0x12, 0x96, 0x5c, 0xdf, 0x1b, 0x0d,
	0x46, 0xc3, 0x53, 0xac, 0x9b, 0x03, 0xad, 0xa7, 0xf7, 0x95, 0xb2, 0xfa, 0xeb, 0x0a, 0x40, 0xe6,
	0xeb, 0x7d, 0x6d, 0x6e, 0xdf, 0x02, 0x98, 0xcc, 0xc3, 0x27, 0x39, 0x86, 0x4b, 0x08, 0x55, 0xad,
	0xb1, 0x1d, 0x9e, 0x91, 0x38, 0x21, 0x11, 0x5f, 0x81, 0xe4, 0x40, 0xf4, 0x00, 0x36, 0x1c, 0xa6,
	0x92, 0x25, 0x3f, 0x36, 0xcf, 0x55, 0x11, 0xdd, 0xea, 0x4b, 0x54, 0x38, 0xd7, 0x06, 0x7d, 0x0f,
	0xda, 0x53, 0x3b, 0x8a, 0xd3, 0x0f, 0x38, 0x44, 0xca, 0xcf, 0xe2, 0x87, 0x1d, 0x79, 0xb2, 0xfc,
	0xa9, 0x6c, 0x14, 0x4f, 0xe5, 0x8f, 0x72, 0xa7, 0xad, 0xf9, 0x26, 0xa7, 0x2d, 0x77, 0xc8, 0x6e,
	0x01, 0x64, 0x47, 0x89, 0x5f, 0x6f, 0x2c, 0x21, 0xea, 0x63, 0xd8, 0x90, 0xd7, 0x94, 0x8f, 0x16,
	0xb7, 0xa1, 0xd9, 0xd7, 0xcd, 0xc1, 0xe8, 0x0b, 0x1e, 0xbd, 0xda, 0x80, 0xc6, 0xa1, 0x31, 0x34,
	0xac, 0x23, 0x96, 0x2a, 0x00, 0x50, 0x17, 0x41, 0xa9, 0x0a, 0x6d, 0x95, 0x06, 0xac, 0xd4, 0xbf,
	0x2e, 0xa5, 0xe1, 0x28, 0xd1, 0xe9, 0xfd, 0x42, 0xf4, 0xf2, 0xfa, 0x32, 0x37, 0xac, 0x18, 0xbe,
	0xf4, 0xe4, 0xa8, 0x9a, 0x51, 0x88, 0xaa, 0x19, 0xd6, 0xe9, 0x53, 0xcd, 0x18, 0xa7, 0x51, 0x35,
	0xc3, 0x3a, 0x35, 0x86, 0xd6, 0x58, 0xe3, 0x6f, 0x6c, 0x65, 0xa4, 0xc0, 0x46, 0x06, 0xb1, 0x29,
	0xb6, 0xa1, 0x69, 0xa4, 0x61, 0xb4, 0xaa, 0x20, 0xe8, 0x69, 0xc3, 0x9e, 0xce, 0x08, 0x6a, 0xea,
	0x11, 0x34, 0x06, 0xbe, 0xed, 0xac, 0x94, 0x3d, 0x39, 0x91, 0x55, 0x12, 0x22, 0x8b, 0x52, 0x32,
	0x3f, 0x40, 0xa4, 0x2f, 0x30, 0xa3, 0xff, 0x97, 0x25, 0xd8, 0x4e, 0x5d, 0xb0, 0xb4, 0xcf, 0xdb,
	0xd0, 0x4e, 0x5f, 0x5d, 0x87, 0x59, 0xe7, 0x79, 0x90, 0xaa, 0xad, 0x14, 0x30, 0x82, 0x44, 0x6d,
	0x49, 0x10, 0x95, 0x6f, 0x11, 0x09, 0x2f, 0xdc, 0x49, 0x12, 0x4d, 0x4d, 0x8a, 0x94, 0xd7, 0x73,
	0xf6, 0x86, 0x20, 0x45, 0xea, 0x24, 0x84, 0xfa, 0xb3, 0x53, 0x31, 0x1b, 0xa1, 0xbc, 0x12, 0xd3,
	0x36, 0x99, 0x24, 0x4e, 0x09, 0xd4, 0xbf, 0x2d, 0xf3, 0x2f, 0x20, 0xd2, 0xf9, 0xef, 0x42, 0x3d,
	0x62, 0xf1, 0x2c, 0xfe, 0x75, 0x07, 0x16, 0x25, 0xba, 0x2f, 0x76, 0x40, 0xdd, 0x5e, 0x21, 0xca,
	0x59, 0x81, 0xa5, 0x7a, 0x07, 0x01, 0xf6, 0xa7, 0xe9, 0x2c, 0x45, 0x91, 0xdd, 0xd8, 0x60, 0x6e,
	0x89, 0x87, 0x6d, 0xfe, 0x4a, 0x24, 0x21, 0xd4, 0xf1, 0x08, 0xe4, 0xcc, 0xfa, 0xa6, 0xe4, 0x64,
	0xef, 0x40, 0xcd, 0xa5, 0xce, 0x20, 0xcf, 0x9e, 0xc7, 0xbc, 0x50, 0x58, 0xf7, 0xfa, 0xaa, 0x75,
	0xbb, 0x74, 0xdd, 0x8d, 0x57, 0xac, 0x9b, 0x12, 0xa0, 0x43, 0xd8, 0x9e, 0x14, 0x79, 0x27, 0xa2,
	0xc0, 0x1d, 0xd1, 0x6a, 0x81, 0xb7, 0x78, 0xb1, 0x89, 0xfa, 0xc7, 0x65, 0xf1, 0x05, 0x48, 0xba,
	0x81, 0x37, 0xa0, 0x99, 0x7a, 0x44, 0x82, 0xf9, 0x19, 0xc0, 0x18, 0xcf, 0x5f, 0xc8, 0x64, 0x7b,
	0x45, 0x82, 0x58, 0xea, 0x34, 0xe7, 0xb4, 0x1c, 0x4a, 0x97, 0x20, 0x4a, 0x31, 0xb3, 0x27, 0x2f,
	0x5c, 0x8f, 0xab, 0x08, 0xf1, 0xed, 0x95, 0x04, 0x15, 0xb6, 0xaa, 0xf6, 0xca, 0x23, 0x52, 0x7f,
	0xcd, 0x11, 0x49, 0x22, 0x8e, 0xe9, 0x2e, 0xad, 0x2f, 0xe4, 0x70, 0xa6, 0x8d, 0x72, 0x84, 0xea,
	0x08, 0xb6, 0xd9, 0xd6, 0x0c, 0x7d, 0x27, 0xdb, 0x9e, 0x24, 0xc3, 0x3f, 0xed, 0xae, 0xb4, 0x98,
	0xe1, 0x9f, 0xf6, 0x97, 0x27, 0x55, 0xff, 0xb3, 0x04, 0x57, 0x2d, 0x12, 0x0f, 0xfc, 0xb3, 0x33,
	0x12, 0xb2, 0xc4, 0xa9, 0x24, 0xe9, 0x74, 0x17, 0xea, 0x53, 0x86, 0x0a, 0xef, 0x57, 0x94, 0xd0,
	0x0f, 0xa0, 0x36, 0x65, 0xb9, 0x8f, 0xd4, 0xf5, 0xcd, 0xf4, 0xe8, 0xd2, 0x4e, 0xee, 0x0e, 0xfc,
	0x33, 0x5e, 0xe6, 0x6d, 0xd4, 0xdf, 0xa1, 0xa2, 0xe2, 0x2c, 0x4d, 0xd0, 0xea, 0x1b, 0x96, 0xf6,
	0x60, 0x20, 0xf2, 0xaa, 0x0e, 0xb5, 0xb1, 0x36, 0xe0, 0xef, 0x6b, 0xec, 0x03, 0x4a, 0x9e, 0xa1,
	0xf5, 0x54, 0xc3, 0x43, 0xa5, 0x42, 0x7f, 0x19, 0xc3, 0xc3, 0x91, 0x52, 0xa5, 0xd5, 0x7d, 0xfd,
	0xc1, 0xc9, 0x43, 0xa5, 0x46, 0x05, 0xe9, 0x18, 0x6b, 0x3d, 0xfd, 0x9e, 0x52, 0x4f, 0x7f, 0x1f,
	0x28, 0xeb, 0xe9, 0xef, 0xfb, 0x4a, 0x43, 0x64, 0x0d, 0x5b, 0xfa, 0x58, 0x69, 0xaa, 0x47, 0xb0,
	0x5b, 0x9c, 0xe6, 0xd7, 0xfc, 0xae, 0xf0, 0xbf, 0xca, 0x80, 0xc4, 0xb3, 0xac, 0xfc, 0x5c, 0x7f,
	0x03, 0x9a, 0xe2, 0xdc, 0x19, 0x49, 0xd0, 0x20, 0x03, 0x58, 0xe8, 0x20, 0x74, 0x2f, 0x48, 0xd8,
	0x9b, 0xda, 0x51, 0xf2, 0x90, 0x20, 0x43, 0x2c, 0x74, 0xe0, 0x39, 0x81, 0xef, 0x7a, 0x71, 0xfa,
	0xa6, 0x2a, 0xca, 0xd2, 0x21, 0x66, 0xd7, 0xa0, 0x9a, 0x3b, 0xc4, 0xec, 0x22, 0x24, 0xc1, 0x04,
	0x3c, 0xf7, 0xd2, 0xd4, 0xdc, 0x24, 0x98, 0x20, 0x30, 0xf4, 0x2e, 0x34, 0x27, 0xbe, 0xf7, 0xe5,
	0x9c, 0x84, 0xe9, 0x47, 0x82, 0x49, 0x06, 0x4d, 0x8a, 0xa3, 0x0f, 0xa0, 0xed, 0x11, 0xe2, 0x1c,
	0x11, 0x3b, 0x8c, 0x1f, 0x10, 0x3b, 0xce, 0x7f, 0x41, 0x93, 0xaf, 0x43, 0xdf, 0x84, 0x5a, 0x14,
	0x90, 0x49, 0xd4, 0xd9, 0x59, 0x61, 0xdc, 0xf2, 0x6a, 0xa6, 0xad, 0x1d, 0x87, 0x38, 0xec, 0xfe,
	0x5c, 0x15, 0xda, 0x3a, 0x01, 0xd0, 0x8d, 0xe4, 0x2b, 0x0a, 0x96, 0xf6, 0xd2, 0xad, 0xfb, 0x1e,
	0xfb, 0x62, 0x83, 0x83, 0xea, 0x4b, 0x68, 0xf4, 0xdd, 0xe8, 0x3c, 0x91, 0xa6, 0x22, 0x1c, 0x52,
	0x92, 0xc3, 0x21, 0x54, 0x6e, 0x8a, 0x74, 0x6d, 0xb1, 0xb3, 0x49, 0x31, 0xf9, 0x6c, 0x92, 0xb9,
	0x49, 0x22, 0x9b, 0x23, 0x29, 0xd3, 0x6b, 0xcd, 0x3e, 0x1a, 0x34, 0xd9, 0x9e, 0x0b, 0x99, 0x9a,
	0x21, 0xef, 0xff, 0x10, 0x1a, 0x69, 0x22, 0xfa, 0x3a, 0x54, 0xb4, 0x7e, 0x9f, 0x5b, 0x74, 0x27,
	0x66, 0x9f, 0x1a, 0x71, 0x25, 0xe6, 0x83, 0xea, 0x03, 0xee, 0x8c, 0x3e, 0xd4, 0xc7, 0x4a, 0x85,
	0x1e, 0xd0, 0xde, 0x40, 0xd7, 0xb0, 0x52, 0x7d, 0xff, 0x00, 0xda, 0xb9, 0x6f, 0x02, 0xd2, 0xaf,
	0x27, 0xf9, 0x57, 0x01, 0xca, 0x1a, 0xd5, 0xa6, 0x0c, 0xc0, 0xfa, 0x40, 0xd7, 0x2c, 0x5d, 0x29,
	0xbd, 0x7f, 0x0f, 0x20, 0xfb, 0x76, 0x84, 0x0e, 0xc5, 0xbf, 0x1e, 0x51, 0xd6, 0xe8, 0x85, 0x19,
	0x1d, 0x1e, 0xb2, 0x42, 0x49, 0x7a, 0x8d, 0x2c, 0x3f, 0x50, 0xfe, 0xfe, 0x37, 0xb7, 0x4a, 0xff,
	0xf8, 0x9b, 0x5b, 0xa5, 0x7f, 0xfd, 0xcd, 0xad, 0xd2, 0x1f, 0xfd, 0xdb, 0xad, 0xb5, 0xff, 0x0d,
	0x00, 0x00, 0xff, 0xff, 0x34, 0x4e, 0x1c, 0x50, 0xdb, 0x3c, 0x00, 0x00,
}

func (m *ErrorInfo) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *ErrorInfo) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *ErrorInfo) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if m.ErrorMsg != nil {
		i -= len(*m.ErrorMsg)
		copy(dAtA[i:], *m.ErrorMsg)
		i = encodeVarintCommon(dAtA, i, uint64(len(*m.ErrorMsg)))
		i--
		dAtA[i] = 0x12
	}
	if m.ErrorCode != nil {
		i = encodeVarintCommon(dAtA, i, uint64(*m.ErrorCode))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *SlotId) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *SlotId) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *SlotId) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if m.K8SNamespace != nil {
		i -= len(*m.K8SNamespace)
		copy(dAtA[i:], *m.K8SNamespace)
		i = encodeVarintCommon(dAtA, i, uint64(len(*m.K8SNamespace)))
		i--
		dAtA[i] = 0x42
	}
	if m.K8SPodName != nil {
		i -= len(*m.K8SPodName)
		copy(dAtA[i:], *m.K8SPodName)
		i = encodeVarintCommon(dAtA, i, uint64(len(*m.K8SPodName)))
		i--
		dAtA[i] = 0x3a
	}
	if m.K8SPodUID != nil {
		i -= len(*m.K8SPodUID)
		copy(dAtA[i:], *m.K8SPodUID)
		i = encodeVarintCommon(dAtA, i, uint64(len(*m.K8SPodUID)))
		i--
		dAtA[i] = 0x32
	}
	if m.SlaveHttpPort != nil {
		i = encodeVarintCommon(dAtA, i, uint64(*m.SlaveHttpPort))
		i--
		dAtA[i] = 0x28
	}
	if m.RestfulHttpPort != nil {
		i = encodeVarintCommon(dAtA, i, uint64(*m.RestfulHttpPort))
		i--
		dAtA[i] = 0x20
	}
	if m.DeclareTime != nil {
		i = encodeVarintCommon(dAtA, i, uint64(*m.DeclareTime))
		i--
		dAtA[i] = 0x18
	}
	if m.Id != nil {
		i = encodeVarintCommon(dAtA, i, uint64(*m.Id))
		i--
		dAtA[i] = 0x10
	}
	if m.SlaveAddress != nil {
		i -= len(*m.SlaveAddress)
		copy(dAtA[i:], *m.SlaveAddress)
		i = encodeVarintCommon(dAtA, i, uint64(len(*m.SlaveAddress)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *GenericResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *GenericResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *GenericResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if m.ErrorInfo != nil {
		{
			size, err := m.ErrorInfo.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintCommon(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *PreferenceDescription) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *PreferenceDescription) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *PreferenceDescription) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if m.WorkDirTag != nil {
		i -= len(*m.WorkDirTag)
		copy(dAtA[i:], *m.WorkDirTag)
		i = encodeVarintCommon(dAtA, i, uint64(len(*m.WorkDirTag)))
		i--
		dAtA[i] = 0x3a
	}
	if m.UserDefined != nil {
		i--
		if *m.UserDefined {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i--
		dAtA[i] = 0x30
	}
	if m.DiskName != nil {
		i -= len(*m.DiskName)
		copy(dAtA[i:], *m.DiskName)
		i = encodeVarintCommon(dAtA, i, uint64(len(*m.DiskName)))
		i--
		dAtA[i] = 0x2a
	}
	if m.ResourceTag != nil {
		i -= len(*m.ResourceTag)
		copy(dAtA[i:], *m.ResourceTag)
		i = encodeVarintCommon(dAtA, i, uint64(len(*m.ResourceTag)))
		i--
		dAtA[i] = 0x22
	}
	if m.LeaseMs != nil {
		i = encodeVarintCommon(dAtA, i, uint64(*m.LeaseMs))
		i--
		dAtA[i] = 0x18
	}
	if m.Type != nil {
		i = encodeVarintCommon(dAtA, i, uint64(*m.Type))
		i--
		dAtA[i] = 0x10
	}
	if m.SlaveAddress != nil {
		i -= len(*m.SlaveAddress)
		copy(dAtA[i:], *m.SlaveAddress)
		i = encodeVarintCommon(dAtA, i, uint64(len(*m.SlaveAddress)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *Resource) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *Resource) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *Resource) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if m.Amount != nil {
		i = encodeVarintCommon(dAtA, i, uint64(*m.Amount))
		i--
		dAtA[i] = 0x18
	}
	if m.Name != nil {
		i -= len(*m.Name)
		copy(dAtA[i:], *m.Name)
		i = encodeVarintCommon(dAtA, i, uint64(len(*m.Name)))
		i--
		dAtA[i] = 0x12
	}
	if m.Type != nil {
		i = encodeVarintCommon(dAtA, i, uint64(*m.Type))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *Priority) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *Priority) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *Priority) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if m.MinorPriority != nil {
		i = encodeVarintCommon(dAtA, i, uint64(*m.MinorPriority))
		i--
		dAtA[i] = 0x10
	}
	if m.MajorPriority != nil {
		i = encodeVarintCommon(dAtA, i, uint64(*m.MajorPriority))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *SlotResource) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *SlotResource) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *SlotResource) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if len(m.Resources) > 0 {
		for iNdEx := len(m.Resources) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.Resources[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintCommon(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0xa
		}
	}
	return len(dAtA) - i, nil
}

func (m *SlaveResource) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *SlaveResource) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *SlaveResource) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if len(m.SysReservedResources) > 0 {
		for iNdEx := len(m.SysReservedResources) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.SysReservedResources[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintCommon(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0x1a
		}
	}
	if len(m.ReservedResources) > 0 {
		for iNdEx := len(m.ReservedResources) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.ReservedResources[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintCommon(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0x12
		}
	}
	if len(m.Resources) > 0 {
		for iNdEx := len(m.Resources) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.Resources[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintCommon(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0xa
		}
	}
	return len(dAtA) - i, nil
}

func (m *GrantedResource) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *GrantedResource) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *GrantedResource) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if len(m.Resources) > 0 {
		for iNdEx := len(m.Resources) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.Resources[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintCommon(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0xa
		}
	}
	return len(dAtA) - i, nil
}

func (m *SlaveRuntimeConfig) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *SlaveRuntimeConfig) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *SlaveRuntimeConfig) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if len(m.Configs) > 0 {
		for iNdEx := len(m.Configs) - 1; iNdEx >= 0; iNdEx-- {
			i -= len(m.Configs[iNdEx])
			copy(dAtA[i:], m.Configs[iNdEx])
			i = encodeVarintCommon(dAtA, i, uint64(len(m.Configs[iNdEx])))
			i--
			dAtA[i] = 0x52
		}
	}
	if m.EnableColdMemory != nil {
		i--
		if *m.EnableColdMemory {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i--
		dAtA[i] = 0x48
	}
	if m.MemoryUsageCalcInLruView != nil {
		i--
		if *m.MemoryUsageCalcInLruView {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i--
		dAtA[i] = 0x40
	}
	if m.EnableOOMKillAll != nil {
		i--
		if *m.EnableOOMKillAll {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i--
		dAtA[i] = 0x38
	}
	if m.UsePriorityOOM != nil {
		i--
		if *m.UsePriorityOOM {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i--
		dAtA[i] = 0x30
	}
	if m.EnableMemoryPriority != nil {
		i--
		if *m.EnableMemoryPriority {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i--
		dAtA[i] = 0x28
	}
	if m.GuaranteedCpuForNonProd != nil {
		i = encodeVarintCommon(dAtA, i, uint64(*m.GuaranteedCpuForNonProd))
		i--
		dAtA[i] = 0x20
	}
	if m.ElasticMemory != nil {
		i = encodeVarintCommon(dAtA, i, uint64(*m.ElasticMemory))
		i--
		dAtA[i] = 0x18
	}
	if m.CpuUsageSafeRatio != nil {
		i = encodeVarintCommon(dAtA, i, uint64(*m.CpuUsageSafeRatio))
		i--
		dAtA[i] = 0x10
	}
	if m.Valid != nil {
		i--
		if *m.Valid {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *SlaveDescription) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *SlaveDescription) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *SlaveDescription) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if m.Schedulability != nil {
		{
			size, err := m.Schedulability.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintCommon(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x7a
	}
	if len(m.Preferences) > 0 {
		for iNdEx := len(m.Preferences) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.Preferences[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintCommon(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0x72
		}
	}
	if m.SchedDomain != nil {
		i -= len(*m.SchedDomain)
		copy(dAtA[i:], *m.SchedDomain)
		i = encodeVarintCommon(dAtA, i, uint64(len(*m.SchedDomain)))
		i--
		dAtA[i] = 0x6a
	}
	if len(m.Visibilities) > 0 {
		for iNdEx := len(m.Visibilities) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.Visibilities[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintCommon(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0x62
		}
	}
	if m.State != nil {
		i = encodeVarintCommon(dAtA, i, uint64(*m.State))
		i--
		dAtA[i] = 0x58
	}
	if m.LeaseRatio != nil {
		i = encodeVarintCommon(dAtA, i, uint64(*m.LeaseRatio))
		i--
		dAtA[i] = 0x50
	}
	if len(m.Labels) > 0 {
		for iNdEx := len(m.Labels) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.Labels[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintCommon(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0x4a
		}
	}
	if m.OfflineReason != nil {
		i -= len(*m.OfflineReason)
		copy(dAtA[i:], *m.OfflineReason)
		i = encodeVarintCommon(dAtA, i, uint64(len(*m.OfflineReason)))
		i--
		dAtA[i] = 0x42
	}
	if m.RuntimeConfig != nil {
		{
			size, err := m.RuntimeConfig.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintCommon(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x3a
	}
	if len(m.NeedOfflineSlots) > 0 {
		for iNdEx := len(m.NeedOfflineSlots) - 1; iNdEx >= 0; iNdEx-- {
			i = encodeVarintCommon(dAtA, i, uint64(m.NeedOfflineSlots[iNdEx]))
			i--
			dAtA[i] = 0x30
		}
	}
	if m.SlaveId != nil {
		i = encodeVarintCommon(dAtA, i, uint64(*m.SlaveId))
		i--
		dAtA[i] = 0x28
	}
	if m.IsOffline != nil {
		i--
		if *m.IsOffline {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i--
		dAtA[i] = 0x20
	}
	if m.SlaveResource != nil {
		{
			size, err := m.SlaveResource.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintCommon(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x1a
	}
	if m.SlotCount != nil {
		i = encodeVarintCommon(dAtA, i, uint64(*m.SlotCount))
		i--
		dAtA[i] = 0x10
	}
	if m.Address != nil {
		i -= len(*m.Address)
		copy(dAtA[i:], *m.Address)
		i = encodeVarintCommon(dAtA, i, uint64(len(*m.Address)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *SlaveSchedulability) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *SlaveSchedulability) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *SlaveSchedulability) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if m.Schedulable != nil {
		i--
		if *m.Schedulable {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i--
		dAtA[i] = 0x10
	}
	if m.Scheduler != nil {
		i -= len(*m.Scheduler)
		copy(dAtA[i:], *m.Scheduler)
		i = encodeVarintCommon(dAtA, i, uint64(len(*m.Scheduler)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *SlotPreference) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *SlotPreference) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *SlotPreference) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if m.Preftag != nil {
		i = encodeVarintCommon(dAtA, i, uint64(*m.Preftag))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *SlotPreferenceConfig) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *SlotPreferenceConfig) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *SlotPreferenceConfig) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if m.Preftag != nil {
		i = encodeVarintCommon(dAtA, i, uint64(*m.Preftag))
		i--
		dAtA[i] = 0x10
	}
	if m.Pattern != nil {
		i -= len(*m.Pattern)
		copy(dAtA[i:], *m.Pattern)
		i = encodeVarintCommon(dAtA, i, uint64(len(*m.Pattern)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *Visibility) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *Visibility) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *Visibility) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if m.Limit != nil {
		i = encodeVarintCommon(dAtA, i, uint64(*m.Limit))
		i--
		dAtA[i] = 0x20
	}
	if m.Pattern != nil {
		i -= len(*m.Pattern)
		copy(dAtA[i:], *m.Pattern)
		i = encodeVarintCommon(dAtA, i, uint64(len(*m.Pattern)))
		i--
		dAtA[i] = 0x1a
	}
	if m.Op != nil {
		i = encodeVarintCommon(dAtA, i, uint64(*m.Op))
		i--
		dAtA[i] = 0x10
	}
	if m.Scope != nil {
		i = encodeVarintCommon(dAtA, i, uint64(*m.Scope))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *ApplicationSlotConfig) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *ApplicationSlotConfig) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *ApplicationSlotConfig) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if m.BinaryCacheNamespace != nil {
		i -= len(*m.BinaryCacheNamespace)
		copy(dAtA[i:], *m.BinaryCacheNamespace)
		i = encodeVarintCommon(dAtA, i, uint64(len(*m.BinaryCacheNamespace)))
		i--
		dAtA[i] = 0x12
	}
	if m.WorkDirStyle != nil {
		i = encodeVarintCommon(dAtA, i, uint64(*m.WorkDirStyle))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *ResourceRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *ResourceRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *ResourceRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if m.PackageChecksum != nil {
		i -= len(*m.PackageChecksum)
		copy(dAtA[i:], *m.PackageChecksum)
		i = encodeVarintCommon(dAtA, i, uint64(len(*m.PackageChecksum)))
		i--
		dAtA[i] = 0x1
		i--
		dAtA[i] = 0xea
	}
	if m.LaunchSignature != nil {
		i = encodeVarintCommon(dAtA, i, uint64(*m.LaunchSignature))
		i--
		dAtA[i] = 0x1
		i--
		dAtA[i] = 0xe0
	}
	if m.LaunchTemplate != nil {
		{
			size, err := m.LaunchTemplate.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintCommon(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x1
		i--
		dAtA[i] = 0xda
	}
	if len(m.FedPayloads) > 0 {
		for iNdEx := len(m.FedPayloads) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.FedPayloads[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintCommon(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0x1
			i--
			dAtA[i] = 0xd2
		}
	}
	if m.RequestNs != nil {
		i -= len(*m.RequestNs)
		copy(dAtA[i:], *m.RequestNs)
		i = encodeVarintCommon(dAtA, i, uint64(len(*m.RequestNs)))
		i--
		dAtA[i] = 0x1
		i--
		dAtA[i] = 0xca
	}
	if len(m.ContainerConfigs) > 0 {
		for iNdEx := len(m.ContainerConfigs) - 1; iNdEx >= 0; iNdEx-- {
			i -= len(m.ContainerConfigs[iNdEx])
			copy(dAtA[i:], m.ContainerConfigs[iNdEx])
			i = encodeVarintCommon(dAtA, i, uint64(len(m.ContainerConfigs[iNdEx])))
			i--
			dAtA[i] = 0x1
			i--
			dAtA[i] = 0xc2
		}
	}
	if m.ErrorMsg != nil {
		i -= len(*m.ErrorMsg)
		copy(dAtA[i:], *m.ErrorMsg)
		i = encodeVarintCommon(dAtA, i, uint64(len(*m.ErrorMsg)))
		i--
		dAtA[i] = 0x1
		i--
		dAtA[i] = 0xba
	}
	if m.UseHostWorkDir != nil {
		i--
		if *m.UseHostWorkDir {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i--
		dAtA[i] = 0x1
		i--
		dAtA[i] = 0xb0
	}
	if m.CpusetMode != nil {
		i = encodeVarintCommon(dAtA, i, uint64(*m.CpusetMode))
		i--
		dAtA[i] = 0x1
		i--
		dAtA[i] = 0xa8
	}
	if m.Strictly != nil {
		i--
		if *m.Strictly {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i--
		dAtA[i] = 0x1
		i--
		dAtA[i] = 0xa0
	}
	if m.RequirementId != nil {
		i -= len(*m.RequirementId)
		copy(dAtA[i:], *m.RequirementId)
		i = encodeVarintCommon(dAtA, i, uint64(len(*m.RequirementId)))
		i--
		dAtA[i] = 0x1
		i--
		dAtA[i] = 0x9a
	}
	if len(m.ProhibitedIps) > 0 {
		for iNdEx := len(m.ProhibitedIps) - 1; iNdEx >= 0; iNdEx-- {
			i -= len(m.ProhibitedIps[iNdEx])
			copy(dAtA[i:], m.ProhibitedIps[iNdEx])
			i = encodeVarintCommon(dAtA, i, uint64(len(m.ProhibitedIps[iNdEx])))
			i--
			dAtA[i] = 0x1
			i--
			dAtA[i] = 0x92
		}
	}
	if len(m.SpecifiedIps) > 0 {
		for iNdEx := len(m.SpecifiedIps) - 1; iNdEx >= 0; iNdEx-- {
			i -= len(m.SpecifiedIps[iNdEx])
			copy(dAtA[i:], m.SpecifiedIps[iNdEx])
			i = encodeVarintCommon(dAtA, i, uint64(len(m.SpecifiedIps[iNdEx])))
			i--
			dAtA[i] = 0x1
			i--
			dAtA[i] = 0x8a
		}
	}
	if m.MaxInstancePerPSW != nil {
		i = encodeVarintCommon(dAtA, i, uint64(*m.MaxInstancePerPSW))
		i--
		dAtA[i] = 0x1
		i--
		dAtA[i] = 0x80
	}
	if m.MaxInstancePerASW != nil {
		i = encodeVarintCommon(dAtA, i, uint64(*m.MaxInstancePerASW))
		i--
		dAtA[i] = 0x78
	}
	if m.MaxInstancePerRack != nil {
		i = encodeVarintCommon(dAtA, i, uint64(*m.MaxInstancePerRack))
		i--
		dAtA[i] = 0x70
	}
	if m.MaxInstancePerFrame != nil {
		i = encodeVarintCommon(dAtA, i, uint64(*m.MaxInstancePerFrame))
		i--
		dAtA[i] = 0x68
	}
	if m.MaxInstancePerHost != nil {
		i = encodeVarintCommon(dAtA, i, uint64(*m.MaxInstancePerHost))
		i--
		dAtA[i] = 0x60
	}
	if m.SpreadLevel != nil {
		i = encodeVarintCommon(dAtA, i, uint64(*m.SpreadLevel))
		i--
		dAtA[i] = 0x58
	}
	if m.UseCpuset != nil {
		i--
		if *m.UseCpuset {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i--
		dAtA[i] = 0x50
	}
	if len(m.MetaTags) > 0 {
		for iNdEx := len(m.MetaTags) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.MetaTags[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintCommon(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0x4a
		}
	}
	if m.GroupId != nil {
		i -= len(*m.GroupId)
		copy(dAtA[i:], *m.GroupId)
		i = encodeVarintCommon(dAtA, i, uint64(len(*m.GroupId)))
		i--
		dAtA[i] = 0x42
	}
	if m.Priority != nil {
		{
			size, err := m.Priority.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintCommon(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x3a
	}
	if m.Queue != nil {
		i -= len(*m.Queue)
		copy(dAtA[i:], *m.Queue)
		i = encodeVarintCommon(dAtA, i, uint64(len(*m.Queue)))
		i--
		dAtA[i] = 0x32
	}
	if m.AllocateMode != nil {
		i = encodeVarintCommon(dAtA, i, uint64(*m.AllocateMode))
		i--
		dAtA[i] = 0x28
	}
	if len(m.Declarations) > 0 {
		for iNdEx := len(m.Declarations) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.Declarations[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintCommon(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0x22
		}
	}
	if m.Count != nil {
		i = encodeVarintCommon(dAtA, i, uint64(*m.Count))
		i--
		dAtA[i] = 0x18
	}
	if len(m.Options) > 0 {
		for iNdEx := len(m.Options) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.Options[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintCommon(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0x12
		}
	}
	if m.Tag != nil {
		i -= len(*m.Tag)
		copy(dAtA[i:], *m.Tag)
		i = encodeVarintCommon(dAtA, i, uint64(len(*m.Tag)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *ApplicationDescription) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *ApplicationDescription) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *ApplicationDescription) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if m.Scheduler != nil {
		i -= len(*m.Scheduler)
		copy(dAtA[i:], *m.Scheduler)
		i = encodeVarintCommon(dAtA, i, uint64(len(*m.Scheduler)))
		i--
		dAtA[i] = 0x1
		i--
		dAtA[i] = 0xd2
	}
	if m.Version != nil {
		i -= len(*m.Version)
		copy(dAtA[i:], *m.Version)
		i = encodeVarintCommon(dAtA, i, uint64(len(*m.Version)))
		i--
		dAtA[i] = 0x1
		i--
		dAtA[i] = 0xca
	}
	if m.SubmitTime != nil {
		i = encodeVarintCommon(dAtA, i, uint64(*m.SubmitTime))
		i--
		dAtA[i] = 0x1
		i--
		dAtA[i] = 0xc0
	}
	if len(m.Labels) > 0 {
		for iNdEx := len(m.Labels) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.Labels[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintCommon(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0x1
			i--
			dAtA[i] = 0xba
		}
	}
	if m.YarnApplicationId != nil {
		i -= len(*m.YarnApplicationId)
		copy(dAtA[i:], *m.YarnApplicationId)
		i = encodeVarintCommon(dAtA, i, uint64(len(*m.YarnApplicationId)))
		i--
		dAtA[i] = 0x1
		i--
		dAtA[i] = 0xb2
	}
	if m.RequestNs != nil {
		i -= len(*m.RequestNs)
		copy(dAtA[i:], *m.RequestNs)
		i = encodeVarintCommon(dAtA, i, uint64(len(*m.RequestNs)))
		i--
		dAtA[i] = 0x1
		i--
		dAtA[i] = 0xaa
	}
	if m.ReserveTime != nil {
		i = encodeVarintCommon(dAtA, i, uint64(*m.ReserveTime))
		i--
		dAtA[i] = 0x1
		i--
		dAtA[i] = 0xa0
	}
	if len(m.ContainerConfigs) > 0 {
		for iNdEx := len(m.ContainerConfigs) - 1; iNdEx >= 0; iNdEx-- {
			i -= len(m.ContainerConfigs[iNdEx])
			copy(dAtA[i:], m.ContainerConfigs[iNdEx])
			i = encodeVarintCommon(dAtA, i, uint64(len(m.ContainerConfigs[iNdEx])))
			i--
			dAtA[i] = 0x1
			i--
			dAtA[i] = 0x9a
		}
	}
	if m.CpusetMode != nil {
		i = encodeVarintCommon(dAtA, i, uint64(*m.CpusetMode))
		i--
		dAtA[i] = 0x1
		i--
		dAtA[i] = 0x90
	}
	if m.UseCpuset != nil {
		i--
		if *m.UseCpuset {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i--
		dAtA[i] = 0x1
		i--
		dAtA[i] = 0x88
	}
	if len(m.Declarations) > 0 {
		for iNdEx := len(m.Declarations) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.Declarations[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintCommon(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0x1
			i--
			dAtA[i] = 0x82
		}
	}
	if m.GroupId != nil {
		i -= len(*m.GroupId)
		copy(dAtA[i:], *m.GroupId)
		i = encodeVarintCommon(dAtA, i, uint64(len(*m.GroupId)))
		i--
		dAtA[i] = 0x7a
	}
	if m.ConstraintPolicy != nil {
		i = encodeVarintCommon(dAtA, i, uint64(*m.ConstraintPolicy))
		i--
		dAtA[i] = 0x70
	}
	if m.Priority != nil {
		{
			size, err := m.Priority.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintCommon(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x6a
	}
	if m.AllocateMode != nil {
		i = encodeVarintCommon(dAtA, i, uint64(*m.AllocateMode))
		i--
		dAtA[i] = 0x60
	}
	if m.Status != nil {
		i = encodeVarintCommon(dAtA, i, uint64(*m.Status))
		i--
		dAtA[i] = 0x58
	}
	if m.Queue != nil {
		i -= len(*m.Queue)
		copy(dAtA[i:], *m.Queue)
		i = encodeVarintCommon(dAtA, i, uint64(len(*m.Queue)))
		i--
		dAtA[i] = 0x52
	}
	if m.SlotConfig != nil {
		{
			size, err := m.SlotConfig.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintCommon(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x4a
	}
	if m.ExclusiveMode != nil {
		i = encodeVarintCommon(dAtA, i, uint64(*m.ExclusiveMode))
		i--
		dAtA[i] = 0x40
	}
	if m.OldSlotPriorityKeepTime != nil {
		i = encodeVarintCommon(dAtA, i, uint64(*m.OldSlotPriorityKeepTime))
		i--
		dAtA[i] = 0x38
	}
	if m.ProcessLaunchContext != nil {
		{
			size, err := m.ProcessLaunchContext.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintCommon(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x32
	}
	if m.RequiredResource != nil {
		{
			size, err := m.RequiredResource.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintCommon(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x2a
	}
	if m.ReplicaCount != nil {
		i = encodeVarintCommon(dAtA, i, uint64(*m.ReplicaCount))
		i--
		dAtA[i] = 0x20
	}
	if m.User != nil {
		i -= len(*m.User)
		copy(dAtA[i:], *m.User)
		i = encodeVarintCommon(dAtA, i, uint64(len(*m.User)))
		i--
		dAtA[i] = 0x1a
	}
	if m.AppChecksum != nil {
		i = encodeVarintCommon(dAtA, i, uint64(*m.AppChecksum))
		i--
		dAtA[i] = 0x10
	}
	if m.ApplicationId != nil {
		i -= len(*m.ApplicationId)
		copy(dAtA[i:], *m.ApplicationId)
		i = encodeVarintCommon(dAtA, i, uint64(len(*m.ApplicationId)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *QueueResource) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueueResource) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueueResource) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if m.OverAllocateQuota != nil {
		i = encodeVarintCommon(dAtA, i, uint64(*m.OverAllocateQuota))
		i--
		dAtA[i] = 0x28
	}
	if m.AllocatedSlaves != nil {
		i = encodeVarintCommon(dAtA, i, uint64(*m.AllocatedSlaves))
		i--
		dAtA[i] = 0x20
	}
	if m.MaxCount != nil {
		i = encodeVarintCommon(dAtA, i, uint64(*m.MaxCount))
		i--
		dAtA[i] = 0x18
	}
	if m.MinCount != nil {
		i = encodeVarintCommon(dAtA, i, uint64(*m.MinCount))
		i--
		dAtA[i] = 0x10
	}
	if len(m.Resources) > 0 {
		for iNdEx := len(m.Resources) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.Resources[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintCommon(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0xa
		}
	}
	return len(dAtA) - i, nil
}

func (m *QueueDescription) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueueDescription) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueueDescription) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if m.LeaseRatio != nil {
		i = encodeVarintCommon(dAtA, i, uint64(*m.LeaseRatio))
		i--
		dAtA[i] = 0x28
	}
	if m.ScheduleMode != nil {
		i = encodeVarintCommon(dAtA, i, uint64(*m.ScheduleMode))
		i--
		dAtA[i] = 0x20
	}
	if m.QueueType != nil {
		i = encodeVarintCommon(dAtA, i, uint64(*m.QueueType))
		i--
		dAtA[i] = 0x18
	}
	if len(m.QueueResource) > 0 {
		for iNdEx := len(m.QueueResource) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.QueueResource[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintCommon(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0x12
		}
	}
	if m.Name != nil {
		i -= len(*m.Name)
		copy(dAtA[i:], *m.Name)
		i = encodeVarintCommon(dAtA, i, uint64(len(*m.Name)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *PodTraceInfo) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *PodTraceInfo) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *PodTraceInfo) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if m.ErrorMsg != nil {
		i -= len(*m.ErrorMsg)
		copy(dAtA[i:], *m.ErrorMsg)
		i = encodeVarintCommon(dAtA, i, uint64(len(*m.ErrorMsg)))
		i--
		dAtA[i] = 0x2a
	}
	if m.FederatedCluster != nil {
		i -= len(*m.FederatedCluster)
		copy(dAtA[i:], *m.FederatedCluster)
		i = encodeVarintCommon(dAtA, i, uint64(len(*m.FederatedCluster)))
		i--
		dAtA[i] = 0x22
	}
	if m.WorkdirTag != nil {
		i -= len(*m.WorkdirTag)
		copy(dAtA[i:], *m.WorkdirTag)
		i = encodeVarintCommon(dAtA, i, uint64(len(*m.WorkdirTag)))
		i--
		dAtA[i] = 0x1a
	}
	if m.ResourceTag != nil {
		i -= len(*m.ResourceTag)
		copy(dAtA[i:], *m.ResourceTag)
		i = encodeVarintCommon(dAtA, i, uint64(len(*m.ResourceTag)))
		i--
		dAtA[i] = 0x12
	}
	if m.Uid != nil {
		i -= len(*m.Uid)
		copy(dAtA[i:], *m.Uid)
		i = encodeVarintCommon(dAtA, i, uint64(len(*m.Uid)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *ResourceResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *ResourceResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *ResourceResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if len(m.PendingUpdatePods) > 0 {
		for iNdEx := len(m.PendingUpdatePods) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.PendingUpdatePods[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintCommon(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0x2a
		}
	}
	if len(m.PendingPods) > 0 {
		for iNdEx := len(m.PendingPods) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.PendingPods[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintCommon(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0x22
		}
	}
	if m.ErrorMsg != nil {
		i -= len(*m.ErrorMsg)
		copy(dAtA[i:], *m.ErrorMsg)
		i = encodeVarintCommon(dAtA, i, uint64(len(*m.ErrorMsg)))
		i--
		dAtA[i] = 0x1a
	}
	if len(m.AssignedSlots) > 0 {
		for iNdEx := len(m.AssignedSlots) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.AssignedSlots[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintCommon(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0x12
		}
	}
	if m.ResourceTag != nil {
		i -= len(*m.ResourceTag)
		copy(dAtA[i:], *m.ResourceTag)
		i = encodeVarintCommon(dAtA, i, uint64(len(*m.ResourceTag)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *SlaveStatus) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *SlaveStatus) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *SlaveStatus) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if m.Status != nil {
		i = encodeVarintCommon(dAtA, i, uint64(*m.Status))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *SlaveHealth) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *SlaveHealth) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *SlaveHealth) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if m.CommonStatus != nil {
		i = encodeVarintCommon(dAtA, i, uint64(*m.CommonStatus))
		i--
		dAtA[i] = 0x20
	}
	if m.EnvGuardStatus != nil {
		i = encodeVarintCommon(dAtA, i, uint64(*m.EnvGuardStatus))
		i--
		dAtA[i] = 0x18
	}
	if m.Dp2Status != nil {
		i = encodeVarintCommon(dAtA, i, uint64(*m.Dp2Status))
		i--
		dAtA[i] = 0x10
	}
	if m.IsHealthy != nil {
		i--
		if *m.IsHealthy {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *SystemStatus) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *SystemStatus) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *SystemStatus) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if m.Status != nil {
		i = encodeVarintCommon(dAtA, i, uint64(*m.Status))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *ProcessStatus) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *ProcessStatus) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *ProcessStatus) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if len(m.OtherInfos) > 0 {
		for iNdEx := len(m.OtherInfos) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.OtherInfos[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintCommon(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0x4a
		}
	}
	if m.InstanceId != nil {
		i = encodeVarintCommon(dAtA, i, uint64(*m.InstanceId))
		i--
		dAtA[i] = 0x40
	}
	if m.Pid != nil {
		i = encodeVarintCommon(dAtA, i, uint64(*m.Pid))
		i--
		dAtA[i] = 0x38
	}
	if m.ExitCode != nil {
		i = encodeVarintCommon(dAtA, i, uint64(*m.ExitCode))
		i--
		dAtA[i] = 0x30
	}
	if m.StartTime != nil {
		i = encodeVarintCommon(dAtA, i, uint64(*m.StartTime))
		i--
		dAtA[i] = 0x28
	}
	if m.RestartCount != nil {
		i = encodeVarintCommon(dAtA, i, uint64(*m.RestartCount))
		i--
		dAtA[i] = 0x20
	}
	if m.ProcessName != nil {
		i -= len(*m.ProcessName)
		copy(dAtA[i:], *m.ProcessName)
		i = encodeVarintCommon(dAtA, i, uint64(len(*m.ProcessName)))
		i--
		dAtA[i] = 0x1a
	}
	if m.Status != nil {
		i = encodeVarintCommon(dAtA, i, uint64(*m.Status))
		i--
		dAtA[i] = 0x10
	}
	if m.IsDaemon != nil {
		i--
		if *m.IsDaemon {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *PackageDetail) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *PackageDetail) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *PackageDetail) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if m.PackageName != nil {
		i -= len(*m.PackageName)
		copy(dAtA[i:], *m.PackageName)
		i = encodeVarintCommon(dAtA, i, uint64(len(*m.PackageName)))
		i--
		dAtA[i] = 0x4a
	}
	if m.ErrMsg != nil {
		i -= len(*m.ErrMsg)
		copy(dAtA[i:], *m.ErrMsg)
		i = encodeVarintCommon(dAtA, i, uint64(len(*m.ErrMsg)))
		i--
		dAtA[i] = 0x42
	}
	if m.SrcBaseUri != nil {
		i -= len(*m.SrcBaseUri)
		copy(dAtA[i:], *m.SrcBaseUri)
		i = encodeVarintCommon(dAtA, i, uint64(len(*m.SrcBaseUri)))
		i--
		dAtA[i] = 0x3a
	}
	if m.TotalSize != nil {
		i = encodeVarintCommon(dAtA, i, uint64(*m.TotalSize))
		i--
		dAtA[i] = 0x30
	}
	if m.DownloadSize != nil {
		i = encodeVarintCommon(dAtA, i, uint64(*m.DownloadSize))
		i--
		dAtA[i] = 0x28
	}
	if m.CostTime != nil {
		i = encodeVarintCommon(dAtA, i, uint64(*m.CostTime))
		i--
		dAtA[i] = 0x20
	}
	if m.StartTime != nil {
		i = encodeVarintCommon(dAtA, i, uint64(*m.StartTime))
		i--
		dAtA[i] = 0x18
	}
	if m.Status != nil {
		i -= len(*m.Status)
		copy(dAtA[i:], *m.Status)
		i = encodeVarintCommon(dAtA, i, uint64(len(*m.Status)))
		i--
		dAtA[i] = 0x12
	}
	if m.Taskid != nil {
		i = encodeVarintCommon(dAtA, i, uint64(*m.Taskid))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *SlotPayload) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *SlotPayload) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *SlotPayload) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if len(m.Payloads) > 0 {
		for iNdEx := len(m.Payloads) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.Payloads[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintCommon(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0x12
		}
	}
	if m.Id != nil {
		{
			size, err := m.Id.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintCommon(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *AssignedSlot) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *AssignedSlot) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *AssignedSlot) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if m.Ip != nil {
		i -= len(*m.Ip)
		copy(dAtA[i:], *m.Ip)
		i = encodeVarintCommon(dAtA, i, uint64(len(*m.Ip)))
		i--
		dAtA[i] = 0x1
		i--
		dAtA[i] = 0xfa
	}
	if m.K8SNamespace != nil {
		i -= len(*m.K8SNamespace)
		copy(dAtA[i:], *m.K8SNamespace)
		i = encodeVarintCommon(dAtA, i, uint64(len(*m.K8SNamespace)))
		i--
		dAtA[i] = 0x1
		i--
		dAtA[i] = 0xf2
	}
	if m.K8SPodName != nil {
		i -= len(*m.K8SPodName)
		copy(dAtA[i:], *m.K8SPodName)
		i = encodeVarintCommon(dAtA, i, uint64(len(*m.K8SPodName)))
		i--
		dAtA[i] = 0x1
		i--
		dAtA[i] = 0xea
	}
	if m.K8SPodUID != nil {
		i -= len(*m.K8SPodUID)
		copy(dAtA[i:], *m.K8SPodUID)
		i = encodeVarintCommon(dAtA, i, uint64(len(*m.K8SPodUID)))
		i--
		dAtA[i] = 0x1
		i--
		dAtA[i] = 0xe2
	}
	if m.Uid != nil {
		i -= len(*m.Uid)
		copy(dAtA[i:], *m.Uid)
		i = encodeVarintCommon(dAtA, i, uint64(len(*m.Uid)))
		i--
		dAtA[i] = 0x1
		i--
		dAtA[i] = 0xda
	}
	if len(m.PackageDetails) > 0 {
		for iNdEx := len(m.PackageDetails) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.PackageDetails[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintCommon(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0x1
			i--
			dAtA[i] = 0xd2
		}
	}
	if m.SlotPreference != nil {
		{
			size, err := m.SlotPreference.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintCommon(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x1
		i--
		dAtA[i] = 0xca
	}
	if m.YarnContainerId != nil {
		i -= len(*m.YarnContainerId)
		copy(dAtA[i:], *m.YarnContainerId)
		i = encodeVarintCommon(dAtA, i, uint64(len(*m.YarnContainerId)))
		i--
		dAtA[i] = 0x1
		i--
		dAtA[i] = 0xc2
	}
	if m.RequirementId != nil {
		i -= len(*m.RequirementId)
		copy(dAtA[i:], *m.RequirementId)
		i = encodeVarintCommon(dAtA, i, uint64(len(*m.RequirementId)))
		i--
		dAtA[i] = 0x1
		i--
		dAtA[i] = 0xba
	}
	if len(m.MetaTags) > 0 {
		for iNdEx := len(m.MetaTags) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.MetaTags[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintCommon(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0x1
			i--
			dAtA[i] = 0xb2
		}
	}
	if m.GroupId != nil {
		i -= len(*m.GroupId)
		copy(dAtA[i:], *m.GroupId)
		i = encodeVarintCommon(dAtA, i, uint64(len(*m.GroupId)))
		i--
		dAtA[i] = 0x1
		i--
		dAtA[i] = 0xaa
	}
	if m.Priority != nil {
		{
			size, err := m.Priority.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintCommon(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x1
		i--
		dAtA[i] = 0xa2
	}
	if m.PreDeployPackageStatus != nil {
		{
			size, err := m.PreDeployPackageStatus.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintCommon(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x1
		i--
		dAtA[i] = 0x9a
	}
	if m.PreDeployPackageChecksum != nil {
		i -= len(*m.PreDeployPackageChecksum)
		copy(dAtA[i:], *m.PreDeployPackageChecksum)
		i = encodeVarintCommon(dAtA, i, uint64(len(*m.PreDeployPackageChecksum)))
		i--
		dAtA[i] = 0x1
		i--
		dAtA[i] = 0x92
	}
	if m.NoLongerMatchWorkDirTag != nil {
		i--
		if *m.NoLongerMatchWorkDirTag {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i--
		dAtA[i] = 0x1
		i--
		dAtA[i] = 0x88
	}
	if m.DeclareResources != nil {
		{
			size, err := m.DeclareResources.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintCommon(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x1
		i--
		dAtA[i] = 0x82
	}
	if len(m.Payloads) > 0 {
		for iNdEx := len(m.Payloads) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.Payloads[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintCommon(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0x7a
		}
	}
	if m.NoLongerMatchResourceRequirement != nil {
		i--
		if *m.NoLongerMatchResourceRequirement {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i--
		dAtA[i] = 0x70
	}
	if m.NoLongerMatchQueue != nil {
		i--
		if *m.NoLongerMatchQueue {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i--
		dAtA[i] = 0x68
	}
	if m.SystemSlot != nil {
		i--
		if *m.SystemSlot {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i--
		dAtA[i] = 0x60
	}
	if m.AppChecksum != nil {
		i = encodeVarintCommon(dAtA, i, uint64(*m.AppChecksum))
		i--
		dAtA[i] = 0x58
	}
	if m.PackageStatus != nil {
		{
			size, err := m.PackageStatus.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintCommon(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x52
	}
	if m.PackageChecksum != nil {
		i -= len(*m.PackageChecksum)
		copy(dAtA[i:], *m.PackageChecksum)
		i = encodeVarintCommon(dAtA, i, uint64(len(*m.PackageChecksum)))
		i--
		dAtA[i] = 0x4a
	}
	if m.LaunchSignature != nil {
		i = encodeVarintCommon(dAtA, i, uint64(*m.LaunchSignature))
		i--
		dAtA[i] = 0x40
	}
	if len(m.DataStatus) > 0 {
		for iNdEx := len(m.DataStatus) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.DataStatus[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintCommon(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0x3a
		}
	}
	if m.SlaveStatus != nil {
		{
			size, err := m.SlaveStatus.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintCommon(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x32
	}
	if len(m.ProcessStatus) > 0 {
		for iNdEx := len(m.ProcessStatus) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.ProcessStatus[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintCommon(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0x2a
		}
	}
	if m.SlotResource != nil {
		{
			size, err := m.SlotResource.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintCommon(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x22
	}
	if m.ApplicationId != nil {
		i -= len(*m.ApplicationId)
		copy(dAtA[i:], *m.ApplicationId)
		i = encodeVarintCommon(dAtA, i, uint64(len(*m.ApplicationId)))
		i--
		dAtA[i] = 0x1a
	}
	if m.Reclaim != nil {
		i--
		if *m.Reclaim {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i--
		dAtA[i] = 0x10
	}
	if m.Id != nil {
		{
			size, err := m.Id.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintCommon(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *HistoryInfo) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *HistoryInfo) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *HistoryInfo) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if len(m.Apps) > 0 {
		for iNdEx := len(m.Apps) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.Apps[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintCommon(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0xa
		}
	}
	return len(dAtA) - i, nil
}

func (m *HistoryApp) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *HistoryApp) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *HistoryApp) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if len(m.Tags) > 0 {
		for iNdEx := len(m.Tags) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.Tags[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintCommon(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0x12
		}
	}
	if m.App == nil {
		return 0, new(github_com_golang_protobuf_proto.RequiredNotSetError)
	} else {
		i -= len(*m.App)
		copy(dAtA[i:], *m.App)
		i = encodeVarintCommon(dAtA, i, uint64(len(*m.App)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *HistoryTag) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *HistoryTag) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *HistoryTag) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if m.MaxInstancePerHost == nil {
		return 0, new(github_com_golang_protobuf_proto.RequiredNotSetError)
	} else {
		i = encodeVarintCommon(dAtA, i, uint64(*m.MaxInstancePerHost))
		i--
		dAtA[i] = 0x18
	}
	if len(m.Pods) > 0 {
		for iNdEx := len(m.Pods) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.Pods[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintCommon(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0x12
		}
	}
	if m.Tag == nil {
		return 0, new(github_com_golang_protobuf_proto.RequiredNotSetError)
	} else {
		i -= len(*m.Tag)
		copy(dAtA[i:], *m.Tag)
		i = encodeVarintCommon(dAtA, i, uint64(len(*m.Tag)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *HistoryPod) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *HistoryPod) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *HistoryPod) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if m.DiskId == nil {
		return 0, new(github_com_golang_protobuf_proto.RequiredNotSetError)
	} else {
		i -= len(*m.DiskId)
		copy(dAtA[i:], *m.DiskId)
		i = encodeVarintCommon(dAtA, i, uint64(len(*m.DiskId)))
		i--
		dAtA[i] = 0x32
	}
	if m.SlaveAddress == nil {
		return 0, new(github_com_golang_protobuf_proto.RequiredNotSetError)
	} else {
		i -= len(*m.SlaveAddress)
		copy(dAtA[i:], *m.SlaveAddress)
		i = encodeVarintCommon(dAtA, i, uint64(len(*m.SlaveAddress)))
		i--
		dAtA[i] = 0x2a
	}
	if m.Id == nil {
		return 0, new(github_com_golang_protobuf_proto.RequiredNotSetError)
	} else {
		i = encodeVarintCommon(dAtA, i, uint64(*m.Id))
		i--
		dAtA[i] = 0x20
	}
	if m.ExitTime == nil {
		return 0, new(github_com_golang_protobuf_proto.RequiredNotSetError)
	} else {
		i = encodeVarintCommon(dAtA, i, uint64(*m.ExitTime))
		i--
		dAtA[i] = 0x18
	}
	if m.DeclareTime == nil {
		return 0, new(github_com_golang_protobuf_proto.RequiredNotSetError)
	} else {
		i = encodeVarintCommon(dAtA, i, uint64(*m.DeclareTime))
		i--
		dAtA[i] = 0x10
	}
	if m.Uid == nil {
		return 0, new(github_com_golang_protobuf_proto.RequiredNotSetError)
	} else {
		i -= len(*m.Uid)
		copy(dAtA[i:], *m.Uid)
		i = encodeVarintCommon(dAtA, i, uint64(len(*m.Uid)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *ProcessLaunchContext) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *ProcessLaunchContext) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *ProcessLaunchContext) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if len(m.ExtendInfos) > 0 {
		for iNdEx := len(m.ExtendInfos) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.ExtendInfos[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintCommon(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0x32
		}
	}
	if m.RequirementId != nil {
		i -= len(*m.RequirementId)
		copy(dAtA[i:], *m.RequirementId)
		i = encodeVarintCommon(dAtA, i, uint64(len(*m.RequirementId)))
		i--
		dAtA[i] = 0x2a
	}
	if len(m.PreDeployPackages) > 0 {
		for iNdEx := len(m.PreDeployPackages) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.PreDeployPackages[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintCommon(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0x22
		}
	}
	if len(m.RequiredDatas) > 0 {
		for iNdEx := len(m.RequiredDatas) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.RequiredDatas[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintCommon(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0x1a
		}
	}
	if len(m.Processes) > 0 {
		for iNdEx := len(m.Processes) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.Processes[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintCommon(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0x12
		}
	}
	if len(m.RequiredPackages) > 0 {
		for iNdEx := len(m.RequiredPackages) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.RequiredPackages[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintCommon(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0xa
		}
	}
	return len(dAtA) - i, nil
}

func (m *ProcessLaunchExtraInfo) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *ProcessLaunchExtraInfo) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *ProcessLaunchExtraInfo) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if len(m.ExtendInfos) > 0 {
		for iNdEx := len(m.ExtendInfos) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.ExtendInfos[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintCommon(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0x1a
		}
	}
	if len(m.CgroupPaths) > 0 {
		for iNdEx := len(m.CgroupPaths) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.CgroupPaths[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintCommon(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0x12
		}
	}
	if len(m.QuotaIds) > 0 {
		for iNdEx := len(m.QuotaIds) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.QuotaIds[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintCommon(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0xa
		}
	}
	return len(dAtA) - i, nil
}

func (m *PackageInfo) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *PackageInfo) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *PackageInfo) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if m.Visibility != nil {
		i = encodeVarintCommon(dAtA, i, uint64(*m.Visibility))
		i--
		dAtA[i] = 0x18
	}
	if m.Type != nil {
		i = encodeVarintCommon(dAtA, i, uint64(*m.Type))
		i--
		dAtA[i] = 0x10
	}
	if m.PackageURI != nil {
		i -= len(*m.PackageURI)
		copy(dAtA[i:], *m.PackageURI)
		i = encodeVarintCommon(dAtA, i, uint64(len(*m.PackageURI)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *TrackData) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *TrackData) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *TrackData) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if m.LimitSize != nil {
		i = encodeVarintCommon(dAtA, i, uint64(*m.LimitSize))
		i--
		dAtA[i] = 0x28
	}
	if m.KeepTime != nil {
		i = encodeVarintCommon(dAtA, i, uint64(*m.KeepTime))
		i--
		dAtA[i] = 0x20
	}
	if m.LogPattern != nil {
		i -= len(*m.LogPattern)
		copy(dAtA[i:], *m.LogPattern)
		i = encodeVarintCommon(dAtA, i, uint64(len(*m.LogPattern)))
		i--
		dAtA[i] = 0x1a
	}
	if m.MatchPattern != nil {
		i -= len(*m.MatchPattern)
		copy(dAtA[i:], *m.MatchPattern)
		i = encodeVarintCommon(dAtA, i, uint64(len(*m.MatchPattern)))
		i--
		dAtA[i] = 0x12
	}
	if m.Path != nil {
		i -= len(*m.Path)
		copy(dAtA[i:], *m.Path)
		i = encodeVarintCommon(dAtA, i, uint64(len(*m.Path)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *ProcessInfo) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *ProcessInfo) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *ProcessInfo) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if len(m.OtherInfos) > 0 {
		for iNdEx := len(m.OtherInfos) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.OtherInfos[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintCommon(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0x5a
		}
	}
	if m.ProcStopSig != nil {
		i = encodeVarintCommon(dAtA, i, uint64(*m.ProcStopSig))
		i--
		dAtA[i] = 0x50
	}
	if m.RestartCountLimit != nil {
		i = encodeVarintCommon(dAtA, i, uint64(*m.RestartCountLimit))
		i--
		dAtA[i] = 0x48
	}
	if m.RestartInterval != nil {
		i = encodeVarintCommon(dAtA, i, uint64(*m.RestartInterval))
		i--
		dAtA[i] = 0x40
	}
	if m.StopTimeout != nil {
		i = encodeVarintCommon(dAtA, i, uint64(*m.StopTimeout))
		i--
		dAtA[i] = 0x38
	}
	if m.InstanceId != nil {
		i = encodeVarintCommon(dAtA, i, uint64(*m.InstanceId))
		i--
		dAtA[i] = 0x30
	}
	if len(m.Args) > 0 {
		for iNdEx := len(m.Args) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.Args[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintCommon(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0x2a
		}
	}
	if len(m.Envs) > 0 {
		for iNdEx := len(m.Envs) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.Envs[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintCommon(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0x22
		}
	}
	if m.Cmd != nil {
		i -= len(*m.Cmd)
		copy(dAtA[i:], *m.Cmd)
		i = encodeVarintCommon(dAtA, i, uint64(len(*m.Cmd)))
		i--
		dAtA[i] = 0x1a
	}
	if m.ProcessName != nil {
		i -= len(*m.ProcessName)
		copy(dAtA[i:], *m.ProcessName)
		i = encodeVarintCommon(dAtA, i, uint64(len(*m.ProcessName)))
		i--
		dAtA[i] = 0x12
	}
	if m.IsDaemon != nil {
		i--
		if *m.IsDaemon {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *Parameter) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *Parameter) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *Parameter) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if m.Value != nil {
		i -= len(*m.Value)
		copy(dAtA[i:], *m.Value)
		i = encodeVarintCommon(dAtA, i, uint64(len(*m.Value)))
		i--
		dAtA[i] = 0x12
	}
	if m.Key != nil {
		i -= len(*m.Key)
		copy(dAtA[i:], *m.Key)
		i = encodeVarintCommon(dAtA, i, uint64(len(*m.Key)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *DataInfo) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *DataInfo) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *DataInfo) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if m.NormalizeType != nil {
		i = encodeVarintCommon(dAtA, i, uint64(*m.NormalizeType))
		i--
		dAtA[i] = 0x48
	}
	if m.RetryCountLimit != nil {
		i = encodeVarintCommon(dAtA, i, uint64(*m.RetryCountLimit))
		i--
		dAtA[i] = 0x40
	}
	if m.Visibility != nil {
		i = encodeVarintCommon(dAtA, i, uint64(*m.Visibility))
		i--
		dAtA[i] = 0x38
	}
	if m.ExpireTime != nil {
		i = encodeVarintCommon(dAtA, i, uint64(*m.ExpireTime))
		i--
		dAtA[i] = 0x30
	}
	if m.AttemptId != nil {
		i = encodeVarintCommon(dAtA, i, uint64(*m.AttemptId))
		i--
		dAtA[i] = 0x28
	}
	if m.Version != nil {
		i = encodeVarintCommon(dAtA, i, uint64(*m.Version))
		i--
		dAtA[i] = 0x20
	}
	if m.Dst != nil {
		i -= len(*m.Dst)
		copy(dAtA[i:], *m.Dst)
		i = encodeVarintCommon(dAtA, i, uint64(len(*m.Dst)))
		i--
		dAtA[i] = 0x1a
	}
	if m.Src != nil {
		i -= len(*m.Src)
		copy(dAtA[i:], *m.Src)
		i = encodeVarintCommon(dAtA, i, uint64(len(*m.Src)))
		i--
		dAtA[i] = 0x12
	}
	if m.Name != nil {
		i -= len(*m.Name)
		copy(dAtA[i:], *m.Name)
		i = encodeVarintCommon(dAtA, i, uint64(len(*m.Name)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *DataStatus) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *DataStatus) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *DataStatus) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if m.RetryCount != nil {
		i = encodeVarintCommon(dAtA, i, uint64(*m.RetryCount))
		i--
		dAtA[i] = 0x50
	}
	if m.Visibility != nil {
		i = encodeVarintCommon(dAtA, i, uint64(*m.Visibility))
		i--
		dAtA[i] = 0x48
	}
	if m.AttemptId != nil {
		i = encodeVarintCommon(dAtA, i, uint64(*m.AttemptId))
		i--
		dAtA[i] = 0x40
	}
	if m.LastErrorInfo != nil {
		{
			size, err := m.LastErrorInfo.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintCommon(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x3a
	}
	if m.DeployStatus != nil {
		i = encodeVarintCommon(dAtA, i, uint64(*m.DeployStatus))
		i--
		dAtA[i] = 0x30
	}
	if m.TargetVersion != nil {
		i = encodeVarintCommon(dAtA, i, uint64(*m.TargetVersion))
		i--
		dAtA[i] = 0x28
	}
	if m.CurVersion != nil {
		i = encodeVarintCommon(dAtA, i, uint64(*m.CurVersion))
		i--
		dAtA[i] = 0x20
	}
	if m.Dst != nil {
		i -= len(*m.Dst)
		copy(dAtA[i:], *m.Dst)
		i = encodeVarintCommon(dAtA, i, uint64(len(*m.Dst)))
		i--
		dAtA[i] = 0x1a
	}
	if m.Src != nil {
		i -= len(*m.Src)
		copy(dAtA[i:], *m.Src)
		i = encodeVarintCommon(dAtA, i, uint64(len(*m.Src)))
		i--
		dAtA[i] = 0x12
	}
	if m.Name != nil {
		i -= len(*m.Name)
		copy(dAtA[i:], *m.Name)
		i = encodeVarintCommon(dAtA, i, uint64(len(*m.Name)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *PackageStatus) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *PackageStatus) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *PackageStatus) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if m.Status != nil {
		i = encodeVarintCommon(dAtA, i, uint64(*m.Status))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *LoadInfo) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *LoadInfo) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *LoadInfo) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if m.Tags != nil {
		i -= len(*m.Tags)
		copy(dAtA[i:], *m.Tags)
		i = encodeVarintCommon(dAtA, i, uint64(len(*m.Tags)))
		i--
		dAtA[i] = 0x1a
	}
	if m.Value != nil {
		i -= 8
		encoding_binary.LittleEndian.PutUint64(dAtA[i:], uint64(math.Float64bits(float64(*m.Value))))
		i--
		dAtA[i] = 0x11
	}
	if m.Name != nil {
		i -= len(*m.Name)
		copy(dAtA[i:], *m.Name)
		i = encodeVarintCommon(dAtA, i, uint64(len(*m.Name)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *ContainerLoadInfo) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *ContainerLoadInfo) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *ContainerLoadInfo) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if len(m.LoadInfo) > 0 {
		for iNdEx := len(m.LoadInfo) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.LoadInfo[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintCommon(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0x2a
		}
	}
	if m.UpdateTime != nil {
		i = encodeVarintCommon(dAtA, i, uint64(*m.UpdateTime))
		i--
		dAtA[i] = 0x20
	}
	if m.Service != nil {
		i -= len(*m.Service)
		copy(dAtA[i:], *m.Service)
		i = encodeVarintCommon(dAtA, i, uint64(len(*m.Service)))
		i--
		dAtA[i] = 0x1a
	}
	if m.ContainerIp != nil {
		i -= len(*m.ContainerIp)
		copy(dAtA[i:], *m.ContainerIp)
		i = encodeVarintCommon(dAtA, i, uint64(len(*m.ContainerIp)))
		i--
		dAtA[i] = 0x12
	}
	if m.ContainerName != nil {
		i -= len(*m.ContainerName)
		copy(dAtA[i:], *m.ContainerName)
		i = encodeVarintCommon(dAtA, i, uint64(len(*m.ContainerName)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *SlotLoadInfo) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *SlotLoadInfo) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *SlotLoadInfo) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if len(m.ContainerLoadInfo) > 0 {
		for iNdEx := len(m.ContainerLoadInfo) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.ContainerLoadInfo[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintCommon(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0x4a
		}
	}
	if len(m.Loadinfo) > 0 {
		for iNdEx := len(m.Loadinfo) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.Loadinfo[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintCommon(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0x42
		}
	}
	if m.UpdateTime != nil {
		i = encodeVarintCommon(dAtA, i, uint64(*m.UpdateTime))
		i--
		dAtA[i] = 0x38
	}
	if m.IsPod != nil {
		i--
		if *m.IsPod {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i--
		dAtA[i] = 0x30
	}
	if m.Priority != nil {
		i -= len(*m.Priority)
		copy(dAtA[i:], *m.Priority)
		i = encodeVarintCommon(dAtA, i, uint64(len(*m.Priority)))
		i--
		dAtA[i] = 0x2a
	}
	if m.CpuSetMode != nil {
		i -= len(*m.CpuSetMode)
		copy(dAtA[i:], *m.CpuSetMode)
		i = encodeVarintCommon(dAtA, i, uint64(len(*m.CpuSetMode)))
		i--
		dAtA[i] = 0x22
	}
	if m.AppRole != nil {
		i -= len(*m.AppRole)
		copy(dAtA[i:], *m.AppRole)
		i = encodeVarintCommon(dAtA, i, uint64(len(*m.AppRole)))
		i--
		dAtA[i] = 0x1a
	}
	if m.AppId != nil {
		i -= len(*m.AppId)
		copy(dAtA[i:], *m.AppId)
		i = encodeVarintCommon(dAtA, i, uint64(len(*m.AppId)))
		i--
		dAtA[i] = 0x12
	}
	if m.SlotId != nil {
		i = encodeVarintCommon(dAtA, i, uint64(*m.SlotId))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *SlaveLoadInfo) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *SlaveLoadInfo) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *SlaveLoadInfo) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if len(m.SlotLoadInfo) > 0 {
		for iNdEx := len(m.SlotLoadInfo) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.SlotLoadInfo[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintCommon(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0x3a
		}
	}
	if len(m.LoadInfo) > 0 {
		for iNdEx := len(m.LoadInfo) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.LoadInfo[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintCommon(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0x32
		}
	}
	if m.UpdateTime != nil {
		i = encodeVarintCommon(dAtA, i, uint64(*m.UpdateTime))
		i--
		dAtA[i] = 0x28
	}
	if m.MachineType != nil {
		i -= len(*m.MachineType)
		copy(dAtA[i:], *m.MachineType)
		i = encodeVarintCommon(dAtA, i, uint64(len(*m.MachineType)))
		i--
		dAtA[i] = 0x22
	}
	if m.ServiceName != nil {
		i -= len(*m.ServiceName)
		copy(dAtA[i:], *m.ServiceName)
		i = encodeVarintCommon(dAtA, i, uint64(len(*m.ServiceName)))
		i--
		dAtA[i] = 0x1a
	}
	if m.ClusterName != nil {
		i -= len(*m.ClusterName)
		copy(dAtA[i:], *m.ClusterName)
		i = encodeVarintCommon(dAtA, i, uint64(len(*m.ClusterName)))
		i--
		dAtA[i] = 0x12
	}
	if m.SlaveAddr != nil {
		i -= len(*m.SlaveAddr)
		copy(dAtA[i:], *m.SlaveAddr)
		i = encodeVarintCommon(dAtA, i, uint64(len(*m.SlaveAddr)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *SlaveNodeLoadInfo) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *SlaveNodeLoadInfo) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *SlaveNodeLoadInfo) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if m.SlaveLoadInfo != nil {
		{
			size, err := m.SlaveLoadInfo.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintCommon(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *SetLoggerLevelRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *SetLoggerLevelRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *SetLoggerLevelRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if m.Level == nil {
		return 0, new(github_com_golang_protobuf_proto.RequiredNotSetError)
	} else {
		i = encodeVarintCommon(dAtA, i, uint64(*m.Level))
		i--
		dAtA[i] = 0x10
	}
	if m.Logger == nil {
		return 0, new(github_com_golang_protobuf_proto.RequiredNotSetError)
	} else {
		i -= len(*m.Logger)
		copy(dAtA[i:], *m.Logger)
		i = encodeVarintCommon(dAtA, i, uint64(len(*m.Logger)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *SetLoggerLevelResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *SetLoggerLevelResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *SetLoggerLevelResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if m.ErrorInfo != nil {
		{
			size, err := m.ErrorInfo.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintCommon(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *ClusterDescription) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *ClusterDescription) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *ClusterDescription) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if m.State != nil {
		i -= len(*m.State)
		copy(dAtA[i:], *m.State)
		i = encodeVarintCommon(dAtA, i, uint64(len(*m.State)))
		i--
		dAtA[i] = 0x1
		i--
		dAtA[i] = 0xb2
	}
	if m.AddedTime != nil {
		i = encodeVarintCommon(dAtA, i, uint64(*m.AddedTime))
		i--
		dAtA[i] = 0x1
		i--
		dAtA[i] = 0xa8
	}
	if len(m.Specs) > 0 {
		for iNdEx := len(m.Specs) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.Specs[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintCommon(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0x1
			i--
			dAtA[i] = 0xa2
		}
	}
	if m.NeedHeartBeat != nil {
		i--
		if *m.NeedHeartBeat {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i--
		dAtA[i] = 0x38
	}
	if m.Conquered != nil {
		i--
		if *m.Conquered {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i--
		dAtA[i] = 0x30
	}
	if m.SlaveRunMode != nil {
		i -= len(*m.SlaveRunMode)
		copy(dAtA[i:], *m.SlaveRunMode)
		i = encodeVarintCommon(dAtA, i, uint64(len(*m.SlaveRunMode)))
		i--
		dAtA[i] = 0x2a
	}
	if m.ServiceAddr != nil {
		i -= len(*m.ServiceAddr)
		copy(dAtA[i:], *m.ServiceAddr)
		i = encodeVarintCommon(dAtA, i, uint64(len(*m.ServiceAddr)))
		i--
		dAtA[i] = 0x22
	}
	if m.Endpoint != nil {
		i -= len(*m.Endpoint)
		copy(dAtA[i:], *m.Endpoint)
		i = encodeVarintCommon(dAtA, i, uint64(len(*m.Endpoint)))
		i--
		dAtA[i] = 0x1a
	}
	if m.DriverClass != nil {
		i -= len(*m.DriverClass)
		copy(dAtA[i:], *m.DriverClass)
		i = encodeVarintCommon(dAtA, i, uint64(len(*m.DriverClass)))
		i--
		dAtA[i] = 0x12
	}
	if m.ClusterId == nil {
		return 0, new(github_com_golang_protobuf_proto.RequiredNotSetError)
	} else {
		i -= len(*m.ClusterId)
		copy(dAtA[i:], *m.ClusterId)
		i = encodeVarintCommon(dAtA, i, uint64(len(*m.ClusterId)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *DiskInfo) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *DiskInfo) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *DiskInfo) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if m.MountPoint != nil {
		i -= len(*m.MountPoint)
		copy(dAtA[i:], *m.MountPoint)
		i = encodeVarintCommon(dAtA, i, uint64(len(*m.MountPoint)))
		i--
		dAtA[i] = 0x22
	}
	if m.DiskSize != nil {
		i = encodeVarintCommon(dAtA, i, uint64(*m.DiskSize))
		i--
		dAtA[i] = 0x18
	}
	if m.WorkDir != nil {
		i -= len(*m.WorkDir)
		copy(dAtA[i:], *m.WorkDir)
		i = encodeVarintCommon(dAtA, i, uint64(len(*m.WorkDir)))
		i--
		dAtA[i] = 0x12
	}
	if m.DiskId == nil {
		return 0, new(github_com_golang_protobuf_proto.RequiredNotSetError)
	} else {
		i -= len(*m.DiskId)
		copy(dAtA[i:], *m.DiskId)
		i = encodeVarintCommon(dAtA, i, uint64(len(*m.DiskId)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func encodeVarintCommon(dAtA []byte, offset int, v uint64) int {
	offset -= sovCommon(v)
	base := offset
	for v >= 1<<7 {
		dAtA[offset] = uint8(v&0x7f | 0x80)
		v >>= 7
		offset++
	}
	dAtA[offset] = uint8(v)
	return base
}
func (m *ErrorInfo) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.ErrorCode != nil {
		n += 1 + sovCommon(uint64(*m.ErrorCode))
	}
	if m.ErrorMsg != nil {
		l = len(*m.ErrorMsg)
		n += 1 + l + sovCommon(uint64(l))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *SlotId) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.SlaveAddress != nil {
		l = len(*m.SlaveAddress)
		n += 1 + l + sovCommon(uint64(l))
	}
	if m.Id != nil {
		n += 1 + sovCommon(uint64(*m.Id))
	}
	if m.DeclareTime != nil {
		n += 1 + sovCommon(uint64(*m.DeclareTime))
	}
	if m.RestfulHttpPort != nil {
		n += 1 + sovCommon(uint64(*m.RestfulHttpPort))
	}
	if m.SlaveHttpPort != nil {
		n += 1 + sovCommon(uint64(*m.SlaveHttpPort))
	}
	if m.K8SPodUID != nil {
		l = len(*m.K8SPodUID)
		n += 1 + l + sovCommon(uint64(l))
	}
	if m.K8SPodName != nil {
		l = len(*m.K8SPodName)
		n += 1 + l + sovCommon(uint64(l))
	}
	if m.K8SNamespace != nil {
		l = len(*m.K8SNamespace)
		n += 1 + l + sovCommon(uint64(l))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *GenericResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.ErrorInfo != nil {
		l = m.ErrorInfo.Size()
		n += 1 + l + sovCommon(uint64(l))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *PreferenceDescription) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.SlaveAddress != nil {
		l = len(*m.SlaveAddress)
		n += 1 + l + sovCommon(uint64(l))
	}
	if m.Type != nil {
		n += 1 + sovCommon(uint64(*m.Type))
	}
	if m.LeaseMs != nil {
		n += 1 + sovCommon(uint64(*m.LeaseMs))
	}
	if m.ResourceTag != nil {
		l = len(*m.ResourceTag)
		n += 1 + l + sovCommon(uint64(l))
	}
	if m.DiskName != nil {
		l = len(*m.DiskName)
		n += 1 + l + sovCommon(uint64(l))
	}
	if m.UserDefined != nil {
		n += 2
	}
	if m.WorkDirTag != nil {
		l = len(*m.WorkDirTag)
		n += 1 + l + sovCommon(uint64(l))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *Resource) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Type != nil {
		n += 1 + sovCommon(uint64(*m.Type))
	}
	if m.Name != nil {
		l = len(*m.Name)
		n += 1 + l + sovCommon(uint64(l))
	}
	if m.Amount != nil {
		n += 1 + sovCommon(uint64(*m.Amount))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *Priority) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.MajorPriority != nil {
		n += 1 + sovCommon(uint64(*m.MajorPriority))
	}
	if m.MinorPriority != nil {
		n += 1 + sovCommon(uint64(*m.MinorPriority))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *SlotResource) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if len(m.Resources) > 0 {
		for _, e := range m.Resources {
			l = e.Size()
			n += 1 + l + sovCommon(uint64(l))
		}
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *SlaveResource) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if len(m.Resources) > 0 {
		for _, e := range m.Resources {
			l = e.Size()
			n += 1 + l + sovCommon(uint64(l))
		}
	}
	if len(m.ReservedResources) > 0 {
		for _, e := range m.ReservedResources {
			l = e.Size()
			n += 1 + l + sovCommon(uint64(l))
		}
	}
	if len(m.SysReservedResources) > 0 {
		for _, e := range m.SysReservedResources {
			l = e.Size()
			n += 1 + l + sovCommon(uint64(l))
		}
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *GrantedResource) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if len(m.Resources) > 0 {
		for _, e := range m.Resources {
			l = e.Size()
			n += 1 + l + sovCommon(uint64(l))
		}
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *SlaveRuntimeConfig) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Valid != nil {
		n += 2
	}
	if m.CpuUsageSafeRatio != nil {
		n += 1 + sovCommon(uint64(*m.CpuUsageSafeRatio))
	}
	if m.ElasticMemory != nil {
		n += 1 + sovCommon(uint64(*m.ElasticMemory))
	}
	if m.GuaranteedCpuForNonProd != nil {
		n += 1 + sovCommon(uint64(*m.GuaranteedCpuForNonProd))
	}
	if m.EnableMemoryPriority != nil {
		n += 2
	}
	if m.UsePriorityOOM != nil {
		n += 2
	}
	if m.EnableOOMKillAll != nil {
		n += 2
	}
	if m.MemoryUsageCalcInLruView != nil {
		n += 2
	}
	if m.EnableColdMemory != nil {
		n += 2
	}
	if len(m.Configs) > 0 {
		for _, s := range m.Configs {
			l = len(s)
			n += 1 + l + sovCommon(uint64(l))
		}
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *SlaveDescription) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Address != nil {
		l = len(*m.Address)
		n += 1 + l + sovCommon(uint64(l))
	}
	if m.SlotCount != nil {
		n += 1 + sovCommon(uint64(*m.SlotCount))
	}
	if m.SlaveResource != nil {
		l = m.SlaveResource.Size()
		n += 1 + l + sovCommon(uint64(l))
	}
	if m.IsOffline != nil {
		n += 2
	}
	if m.SlaveId != nil {
		n += 1 + sovCommon(uint64(*m.SlaveId))
	}
	if len(m.NeedOfflineSlots) > 0 {
		for _, e := range m.NeedOfflineSlots {
			n += 1 + sovCommon(uint64(e))
		}
	}
	if m.RuntimeConfig != nil {
		l = m.RuntimeConfig.Size()
		n += 1 + l + sovCommon(uint64(l))
	}
	if m.OfflineReason != nil {
		l = len(*m.OfflineReason)
		n += 1 + l + sovCommon(uint64(l))
	}
	if len(m.Labels) > 0 {
		for _, e := range m.Labels {
			l = e.Size()
			n += 1 + l + sovCommon(uint64(l))
		}
	}
	if m.LeaseRatio != nil {
		n += 1 + sovCommon(uint64(*m.LeaseRatio))
	}
	if m.State != nil {
		n += 1 + sovCommon(uint64(*m.State))
	}
	if len(m.Visibilities) > 0 {
		for _, e := range m.Visibilities {
			l = e.Size()
			n += 1 + l + sovCommon(uint64(l))
		}
	}
	if m.SchedDomain != nil {
		l = len(*m.SchedDomain)
		n += 1 + l + sovCommon(uint64(l))
	}
	if len(m.Preferences) > 0 {
		for _, e := range m.Preferences {
			l = e.Size()
			n += 1 + l + sovCommon(uint64(l))
		}
	}
	if m.Schedulability != nil {
		l = m.Schedulability.Size()
		n += 1 + l + sovCommon(uint64(l))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *SlaveSchedulability) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Scheduler != nil {
		l = len(*m.Scheduler)
		n += 1 + l + sovCommon(uint64(l))
	}
	if m.Schedulable != nil {
		n += 2
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *SlotPreference) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Preftag != nil {
		n += 1 + sovCommon(uint64(*m.Preftag))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *SlotPreferenceConfig) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Pattern != nil {
		l = len(*m.Pattern)
		n += 1 + l + sovCommon(uint64(l))
	}
	if m.Preftag != nil {
		n += 1 + sovCommon(uint64(*m.Preftag))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *Visibility) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Scope != nil {
		n += 1 + sovCommon(uint64(*m.Scope))
	}
	if m.Op != nil {
		n += 1 + sovCommon(uint64(*m.Op))
	}
	if m.Pattern != nil {
		l = len(*m.Pattern)
		n += 1 + l + sovCommon(uint64(l))
	}
	if m.Limit != nil {
		n += 1 + sovCommon(uint64(*m.Limit))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *ApplicationSlotConfig) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.WorkDirStyle != nil {
		n += 1 + sovCommon(uint64(*m.WorkDirStyle))
	}
	if m.BinaryCacheNamespace != nil {
		l = len(*m.BinaryCacheNamespace)
		n += 1 + l + sovCommon(uint64(l))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *ResourceRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Tag != nil {
		l = len(*m.Tag)
		n += 1 + l + sovCommon(uint64(l))
	}
	if len(m.Options) > 0 {
		for _, e := range m.Options {
			l = e.Size()
			n += 1 + l + sovCommon(uint64(l))
		}
	}
	if m.Count != nil {
		n += 1 + sovCommon(uint64(*m.Count))
	}
	if len(m.Declarations) > 0 {
		for _, e := range m.Declarations {
			l = e.Size()
			n += 1 + l + sovCommon(uint64(l))
		}
	}
	if m.AllocateMode != nil {
		n += 1 + sovCommon(uint64(*m.AllocateMode))
	}
	if m.Queue != nil {
		l = len(*m.Queue)
		n += 1 + l + sovCommon(uint64(l))
	}
	if m.Priority != nil {
		l = m.Priority.Size()
		n += 1 + l + sovCommon(uint64(l))
	}
	if m.GroupId != nil {
		l = len(*m.GroupId)
		n += 1 + l + sovCommon(uint64(l))
	}
	if len(m.MetaTags) > 0 {
		for _, e := range m.MetaTags {
			l = e.Size()
			n += 1 + l + sovCommon(uint64(l))
		}
	}
	if m.UseCpuset != nil {
		n += 2
	}
	if m.SpreadLevel != nil {
		n += 1 + sovCommon(uint64(*m.SpreadLevel))
	}
	if m.MaxInstancePerHost != nil {
		n += 1 + sovCommon(uint64(*m.MaxInstancePerHost))
	}
	if m.MaxInstancePerFrame != nil {
		n += 1 + sovCommon(uint64(*m.MaxInstancePerFrame))
	}
	if m.MaxInstancePerRack != nil {
		n += 1 + sovCommon(uint64(*m.MaxInstancePerRack))
	}
	if m.MaxInstancePerASW != nil {
		n += 1 + sovCommon(uint64(*m.MaxInstancePerASW))
	}
	if m.MaxInstancePerPSW != nil {
		n += 2 + sovCommon(uint64(*m.MaxInstancePerPSW))
	}
	if len(m.SpecifiedIps) > 0 {
		for _, s := range m.SpecifiedIps {
			l = len(s)
			n += 2 + l + sovCommon(uint64(l))
		}
	}
	if len(m.ProhibitedIps) > 0 {
		for _, s := range m.ProhibitedIps {
			l = len(s)
			n += 2 + l + sovCommon(uint64(l))
		}
	}
	if m.RequirementId != nil {
		l = len(*m.RequirementId)
		n += 2 + l + sovCommon(uint64(l))
	}
	if m.Strictly != nil {
		n += 3
	}
	if m.CpusetMode != nil {
		n += 2 + sovCommon(uint64(*m.CpusetMode))
	}
	if m.UseHostWorkDir != nil {
		n += 3
	}
	if m.ErrorMsg != nil {
		l = len(*m.ErrorMsg)
		n += 2 + l + sovCommon(uint64(l))
	}
	if len(m.ContainerConfigs) > 0 {
		for _, s := range m.ContainerConfigs {
			l = len(s)
			n += 2 + l + sovCommon(uint64(l))
		}
	}
	if m.RequestNs != nil {
		l = len(*m.RequestNs)
		n += 2 + l + sovCommon(uint64(l))
	}
	if len(m.FedPayloads) > 0 {
		for _, e := range m.FedPayloads {
			l = e.Size()
			n += 2 + l + sovCommon(uint64(l))
		}
	}
	if m.LaunchTemplate != nil {
		l = m.LaunchTemplate.Size()
		n += 2 + l + sovCommon(uint64(l))
	}
	if m.LaunchSignature != nil {
		n += 2 + sovCommon(uint64(*m.LaunchSignature))
	}
	if m.PackageChecksum != nil {
		l = len(*m.PackageChecksum)
		n += 2 + l + sovCommon(uint64(l))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *ApplicationDescription) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.ApplicationId != nil {
		l = len(*m.ApplicationId)
		n += 1 + l + sovCommon(uint64(l))
	}
	if m.AppChecksum != nil {
		n += 1 + sovCommon(uint64(*m.AppChecksum))
	}
	if m.User != nil {
		l = len(*m.User)
		n += 1 + l + sovCommon(uint64(l))
	}
	if m.ReplicaCount != nil {
		n += 1 + sovCommon(uint64(*m.ReplicaCount))
	}
	if m.RequiredResource != nil {
		l = m.RequiredResource.Size()
		n += 1 + l + sovCommon(uint64(l))
	}
	if m.ProcessLaunchContext != nil {
		l = m.ProcessLaunchContext.Size()
		n += 1 + l + sovCommon(uint64(l))
	}
	if m.OldSlotPriorityKeepTime != nil {
		n += 1 + sovCommon(uint64(*m.OldSlotPriorityKeepTime))
	}
	if m.ExclusiveMode != nil {
		n += 1 + sovCommon(uint64(*m.ExclusiveMode))
	}
	if m.SlotConfig != nil {
		l = m.SlotConfig.Size()
		n += 1 + l + sovCommon(uint64(l))
	}
	if m.Queue != nil {
		l = len(*m.Queue)
		n += 1 + l + sovCommon(uint64(l))
	}
	if m.Status != nil {
		n += 1 + sovCommon(uint64(*m.Status))
	}
	if m.AllocateMode != nil {
		n += 1 + sovCommon(uint64(*m.AllocateMode))
	}
	if m.Priority != nil {
		l = m.Priority.Size()
		n += 1 + l + sovCommon(uint64(l))
	}
	if m.ConstraintPolicy != nil {
		n += 1 + sovCommon(uint64(*m.ConstraintPolicy))
	}
	if m.GroupId != nil {
		l = len(*m.GroupId)
		n += 1 + l + sovCommon(uint64(l))
	}
	if len(m.Declarations) > 0 {
		for _, e := range m.Declarations {
			l = e.Size()
			n += 2 + l + sovCommon(uint64(l))
		}
	}
	if m.UseCpuset != nil {
		n += 3
	}
	if m.CpusetMode != nil {
		n += 2 + sovCommon(uint64(*m.CpusetMode))
	}
	if len(m.ContainerConfigs) > 0 {
		for _, s := range m.ContainerConfigs {
			l = len(s)
			n += 2 + l + sovCommon(uint64(l))
		}
	}
	if m.ReserveTime != nil {
		n += 2 + sovCommon(uint64(*m.ReserveTime))
	}
	if m.RequestNs != nil {
		l = len(*m.RequestNs)
		n += 2 + l + sovCommon(uint64(l))
	}
	if m.YarnApplicationId != nil {
		l = len(*m.YarnApplicationId)
		n += 2 + l + sovCommon(uint64(l))
	}
	if len(m.Labels) > 0 {
		for _, e := range m.Labels {
			l = e.Size()
			n += 2 + l + sovCommon(uint64(l))
		}
	}
	if m.SubmitTime != nil {
		n += 2 + sovCommon(uint64(*m.SubmitTime))
	}
	if m.Version != nil {
		l = len(*m.Version)
		n += 2 + l + sovCommon(uint64(l))
	}
	if m.Scheduler != nil {
		l = len(*m.Scheduler)
		n += 2 + l + sovCommon(uint64(l))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *QueueResource) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if len(m.Resources) > 0 {
		for _, e := range m.Resources {
			l = e.Size()
			n += 1 + l + sovCommon(uint64(l))
		}
	}
	if m.MinCount != nil {
		n += 1 + sovCommon(uint64(*m.MinCount))
	}
	if m.MaxCount != nil {
		n += 1 + sovCommon(uint64(*m.MaxCount))
	}
	if m.AllocatedSlaves != nil {
		n += 1 + sovCommon(uint64(*m.AllocatedSlaves))
	}
	if m.OverAllocateQuota != nil {
		n += 1 + sovCommon(uint64(*m.OverAllocateQuota))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *QueueDescription) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Name != nil {
		l = len(*m.Name)
		n += 1 + l + sovCommon(uint64(l))
	}
	if len(m.QueueResource) > 0 {
		for _, e := range m.QueueResource {
			l = e.Size()
			n += 1 + l + sovCommon(uint64(l))
		}
	}
	if m.QueueType != nil {
		n += 1 + sovCommon(uint64(*m.QueueType))
	}
	if m.ScheduleMode != nil {
		n += 1 + sovCommon(uint64(*m.ScheduleMode))
	}
	if m.LeaseRatio != nil {
		n += 1 + sovCommon(uint64(*m.LeaseRatio))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *PodTraceInfo) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Uid != nil {
		l = len(*m.Uid)
		n += 1 + l + sovCommon(uint64(l))
	}
	if m.ResourceTag != nil {
		l = len(*m.ResourceTag)
		n += 1 + l + sovCommon(uint64(l))
	}
	if m.WorkdirTag != nil {
		l = len(*m.WorkdirTag)
		n += 1 + l + sovCommon(uint64(l))
	}
	if m.FederatedCluster != nil {
		l = len(*m.FederatedCluster)
		n += 1 + l + sovCommon(uint64(l))
	}
	if m.ErrorMsg != nil {
		l = len(*m.ErrorMsg)
		n += 1 + l + sovCommon(uint64(l))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *ResourceResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.ResourceTag != nil {
		l = len(*m.ResourceTag)
		n += 1 + l + sovCommon(uint64(l))
	}
	if len(m.AssignedSlots) > 0 {
		for _, e := range m.AssignedSlots {
			l = e.Size()
			n += 1 + l + sovCommon(uint64(l))
		}
	}
	if m.ErrorMsg != nil {
		l = len(*m.ErrorMsg)
		n += 1 + l + sovCommon(uint64(l))
	}
	if len(m.PendingPods) > 0 {
		for _, e := range m.PendingPods {
			l = e.Size()
			n += 1 + l + sovCommon(uint64(l))
		}
	}
	if len(m.PendingUpdatePods) > 0 {
		for _, e := range m.PendingUpdatePods {
			l = e.Size()
			n += 1 + l + sovCommon(uint64(l))
		}
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *SlaveStatus) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Status != nil {
		n += 1 + sovCommon(uint64(*m.Status))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *SlaveHealth) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.IsHealthy != nil {
		n += 2
	}
	if m.Dp2Status != nil {
		n += 1 + sovCommon(uint64(*m.Dp2Status))
	}
	if m.EnvGuardStatus != nil {
		n += 1 + sovCommon(uint64(*m.EnvGuardStatus))
	}
	if m.CommonStatus != nil {
		n += 1 + sovCommon(uint64(*m.CommonStatus))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *SystemStatus) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Status != nil {
		n += 1 + sovCommon(uint64(*m.Status))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *ProcessStatus) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.IsDaemon != nil {
		n += 2
	}
	if m.Status != nil {
		n += 1 + sovCommon(uint64(*m.Status))
	}
	if m.ProcessName != nil {
		l = len(*m.ProcessName)
		n += 1 + l + sovCommon(uint64(l))
	}
	if m.RestartCount != nil {
		n += 1 + sovCommon(uint64(*m.RestartCount))
	}
	if m.StartTime != nil {
		n += 1 + sovCommon(uint64(*m.StartTime))
	}
	if m.ExitCode != nil {
		n += 1 + sovCommon(uint64(*m.ExitCode))
	}
	if m.Pid != nil {
		n += 1 + sovCommon(uint64(*m.Pid))
	}
	if m.InstanceId != nil {
		n += 1 + sovCommon(uint64(*m.InstanceId))
	}
	if len(m.OtherInfos) > 0 {
		for _, e := range m.OtherInfos {
			l = e.Size()
			n += 1 + l + sovCommon(uint64(l))
		}
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *PackageDetail) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Taskid != nil {
		n += 1 + sovCommon(uint64(*m.Taskid))
	}
	if m.Status != nil {
		l = len(*m.Status)
		n += 1 + l + sovCommon(uint64(l))
	}
	if m.StartTime != nil {
		n += 1 + sovCommon(uint64(*m.StartTime))
	}
	if m.CostTime != nil {
		n += 1 + sovCommon(uint64(*m.CostTime))
	}
	if m.DownloadSize != nil {
		n += 1 + sovCommon(uint64(*m.DownloadSize))
	}
	if m.TotalSize != nil {
		n += 1 + sovCommon(uint64(*m.TotalSize))
	}
	if m.SrcBaseUri != nil {
		l = len(*m.SrcBaseUri)
		n += 1 + l + sovCommon(uint64(l))
	}
	if m.ErrMsg != nil {
		l = len(*m.ErrMsg)
		n += 1 + l + sovCommon(uint64(l))
	}
	if m.PackageName != nil {
		l = len(*m.PackageName)
		n += 1 + l + sovCommon(uint64(l))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *SlotPayload) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Id != nil {
		l = m.Id.Size()
		n += 1 + l + sovCommon(uint64(l))
	}
	if len(m.Payloads) > 0 {
		for _, e := range m.Payloads {
			l = e.Size()
			n += 1 + l + sovCommon(uint64(l))
		}
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *AssignedSlot) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Id != nil {
		l = m.Id.Size()
		n += 1 + l + sovCommon(uint64(l))
	}
	if m.Reclaim != nil {
		n += 2
	}
	if m.ApplicationId != nil {
		l = len(*m.ApplicationId)
		n += 1 + l + sovCommon(uint64(l))
	}
	if m.SlotResource != nil {
		l = m.SlotResource.Size()
		n += 1 + l + sovCommon(uint64(l))
	}
	if len(m.ProcessStatus) > 0 {
		for _, e := range m.ProcessStatus {
			l = e.Size()
			n += 1 + l + sovCommon(uint64(l))
		}
	}
	if m.SlaveStatus != nil {
		l = m.SlaveStatus.Size()
		n += 1 + l + sovCommon(uint64(l))
	}
	if len(m.DataStatus) > 0 {
		for _, e := range m.DataStatus {
			l = e.Size()
			n += 1 + l + sovCommon(uint64(l))
		}
	}
	if m.LaunchSignature != nil {
		n += 1 + sovCommon(uint64(*m.LaunchSignature))
	}
	if m.PackageChecksum != nil {
		l = len(*m.PackageChecksum)
		n += 1 + l + sovCommon(uint64(l))
	}
	if m.PackageStatus != nil {
		l = m.PackageStatus.Size()
		n += 1 + l + sovCommon(uint64(l))
	}
	if m.AppChecksum != nil {
		n += 1 + sovCommon(uint64(*m.AppChecksum))
	}
	if m.SystemSlot != nil {
		n += 2
	}
	if m.NoLongerMatchQueue != nil {
		n += 2
	}
	if m.NoLongerMatchResourceRequirement != nil {
		n += 2
	}
	if len(m.Payloads) > 0 {
		for _, e := range m.Payloads {
			l = e.Size()
			n += 1 + l + sovCommon(uint64(l))
		}
	}
	if m.DeclareResources != nil {
		l = m.DeclareResources.Size()
		n += 2 + l + sovCommon(uint64(l))
	}
	if m.NoLongerMatchWorkDirTag != nil {
		n += 3
	}
	if m.PreDeployPackageChecksum != nil {
		l = len(*m.PreDeployPackageChecksum)
		n += 2 + l + sovCommon(uint64(l))
	}
	if m.PreDeployPackageStatus != nil {
		l = m.PreDeployPackageStatus.Size()
		n += 2 + l + sovCommon(uint64(l))
	}
	if m.Priority != nil {
		l = m.Priority.Size()
		n += 2 + l + sovCommon(uint64(l))
	}
	if m.GroupId != nil {
		l = len(*m.GroupId)
		n += 2 + l + sovCommon(uint64(l))
	}
	if len(m.MetaTags) > 0 {
		for _, e := range m.MetaTags {
			l = e.Size()
			n += 2 + l + sovCommon(uint64(l))
		}
	}
	if m.RequirementId != nil {
		l = len(*m.RequirementId)
		n += 2 + l + sovCommon(uint64(l))
	}
	if m.YarnContainerId != nil {
		l = len(*m.YarnContainerId)
		n += 2 + l + sovCommon(uint64(l))
	}
	if m.SlotPreference != nil {
		l = m.SlotPreference.Size()
		n += 2 + l + sovCommon(uint64(l))
	}
	if len(m.PackageDetails) > 0 {
		for _, e := range m.PackageDetails {
			l = e.Size()
			n += 2 + l + sovCommon(uint64(l))
		}
	}
	if m.Uid != nil {
		l = len(*m.Uid)
		n += 2 + l + sovCommon(uint64(l))
	}
	if m.K8SPodUID != nil {
		l = len(*m.K8SPodUID)
		n += 2 + l + sovCommon(uint64(l))
	}
	if m.K8SPodName != nil {
		l = len(*m.K8SPodName)
		n += 2 + l + sovCommon(uint64(l))
	}
	if m.K8SNamespace != nil {
		l = len(*m.K8SNamespace)
		n += 2 + l + sovCommon(uint64(l))
	}
	if m.Ip != nil {
		l = len(*m.Ip)
		n += 2 + l + sovCommon(uint64(l))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *HistoryInfo) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if len(m.Apps) > 0 {
		for _, e := range m.Apps {
			l = e.Size()
			n += 1 + l + sovCommon(uint64(l))
		}
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *HistoryApp) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.App != nil {
		l = len(*m.App)
		n += 1 + l + sovCommon(uint64(l))
	}
	if len(m.Tags) > 0 {
		for _, e := range m.Tags {
			l = e.Size()
			n += 1 + l + sovCommon(uint64(l))
		}
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *HistoryTag) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Tag != nil {
		l = len(*m.Tag)
		n += 1 + l + sovCommon(uint64(l))
	}
	if len(m.Pods) > 0 {
		for _, e := range m.Pods {
			l = e.Size()
			n += 1 + l + sovCommon(uint64(l))
		}
	}
	if m.MaxInstancePerHost != nil {
		n += 1 + sovCommon(uint64(*m.MaxInstancePerHost))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *HistoryPod) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Uid != nil {
		l = len(*m.Uid)
		n += 1 + l + sovCommon(uint64(l))
	}
	if m.DeclareTime != nil {
		n += 1 + sovCommon(uint64(*m.DeclareTime))
	}
	if m.ExitTime != nil {
		n += 1 + sovCommon(uint64(*m.ExitTime))
	}
	if m.Id != nil {
		n += 1 + sovCommon(uint64(*m.Id))
	}
	if m.SlaveAddress != nil {
		l = len(*m.SlaveAddress)
		n += 1 + l + sovCommon(uint64(l))
	}
	if m.DiskId != nil {
		l = len(*m.DiskId)
		n += 1 + l + sovCommon(uint64(l))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *ProcessLaunchContext) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if len(m.RequiredPackages) > 0 {
		for _, e := range m.RequiredPackages {
			l = e.Size()
			n += 1 + l + sovCommon(uint64(l))
		}
	}
	if len(m.Processes) > 0 {
		for _, e := range m.Processes {
			l = e.Size()
			n += 1 + l + sovCommon(uint64(l))
		}
	}
	if len(m.RequiredDatas) > 0 {
		for _, e := range m.RequiredDatas {
			l = e.Size()
			n += 1 + l + sovCommon(uint64(l))
		}
	}
	if len(m.PreDeployPackages) > 0 {
		for _, e := range m.PreDeployPackages {
			l = e.Size()
			n += 1 + l + sovCommon(uint64(l))
		}
	}
	if m.RequirementId != nil {
		l = len(*m.RequirementId)
		n += 1 + l + sovCommon(uint64(l))
	}
	if len(m.ExtendInfos) > 0 {
		for _, e := range m.ExtendInfos {
			l = e.Size()
			n += 1 + l + sovCommon(uint64(l))
		}
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *ProcessLaunchExtraInfo) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if len(m.QuotaIds) > 0 {
		for _, e := range m.QuotaIds {
			l = e.Size()
			n += 1 + l + sovCommon(uint64(l))
		}
	}
	if len(m.CgroupPaths) > 0 {
		for _, e := range m.CgroupPaths {
			l = e.Size()
			n += 1 + l + sovCommon(uint64(l))
		}
	}
	if len(m.ExtendInfos) > 0 {
		for _, e := range m.ExtendInfos {
			l = e.Size()
			n += 1 + l + sovCommon(uint64(l))
		}
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *PackageInfo) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.PackageURI != nil {
		l = len(*m.PackageURI)
		n += 1 + l + sovCommon(uint64(l))
	}
	if m.Type != nil {
		n += 1 + sovCommon(uint64(*m.Type))
	}
	if m.Visibility != nil {
		n += 1 + sovCommon(uint64(*m.Visibility))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *TrackData) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Path != nil {
		l = len(*m.Path)
		n += 1 + l + sovCommon(uint64(l))
	}
	if m.MatchPattern != nil {
		l = len(*m.MatchPattern)
		n += 1 + l + sovCommon(uint64(l))
	}
	if m.LogPattern != nil {
		l = len(*m.LogPattern)
		n += 1 + l + sovCommon(uint64(l))
	}
	if m.KeepTime != nil {
		n += 1 + sovCommon(uint64(*m.KeepTime))
	}
	if m.LimitSize != nil {
		n += 1 + sovCommon(uint64(*m.LimitSize))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *ProcessInfo) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.IsDaemon != nil {
		n += 2
	}
	if m.ProcessName != nil {
		l = len(*m.ProcessName)
		n += 1 + l + sovCommon(uint64(l))
	}
	if m.Cmd != nil {
		l = len(*m.Cmd)
		n += 1 + l + sovCommon(uint64(l))
	}
	if len(m.Envs) > 0 {
		for _, e := range m.Envs {
			l = e.Size()
			n += 1 + l + sovCommon(uint64(l))
		}
	}
	if len(m.Args) > 0 {
		for _, e := range m.Args {
			l = e.Size()
			n += 1 + l + sovCommon(uint64(l))
		}
	}
	if m.InstanceId != nil {
		n += 1 + sovCommon(uint64(*m.InstanceId))
	}
	if m.StopTimeout != nil {
		n += 1 + sovCommon(uint64(*m.StopTimeout))
	}
	if m.RestartInterval != nil {
		n += 1 + sovCommon(uint64(*m.RestartInterval))
	}
	if m.RestartCountLimit != nil {
		n += 1 + sovCommon(uint64(*m.RestartCountLimit))
	}
	if m.ProcStopSig != nil {
		n += 1 + sovCommon(uint64(*m.ProcStopSig))
	}
	if len(m.OtherInfos) > 0 {
		for _, e := range m.OtherInfos {
			l = e.Size()
			n += 1 + l + sovCommon(uint64(l))
		}
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *Parameter) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Key != nil {
		l = len(*m.Key)
		n += 1 + l + sovCommon(uint64(l))
	}
	if m.Value != nil {
		l = len(*m.Value)
		n += 1 + l + sovCommon(uint64(l))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *DataInfo) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Name != nil {
		l = len(*m.Name)
		n += 1 + l + sovCommon(uint64(l))
	}
	if m.Src != nil {
		l = len(*m.Src)
		n += 1 + l + sovCommon(uint64(l))
	}
	if m.Dst != nil {
		l = len(*m.Dst)
		n += 1 + l + sovCommon(uint64(l))
	}
	if m.Version != nil {
		n += 1 + sovCommon(uint64(*m.Version))
	}
	if m.AttemptId != nil {
		n += 1 + sovCommon(uint64(*m.AttemptId))
	}
	if m.ExpireTime != nil {
		n += 1 + sovCommon(uint64(*m.ExpireTime))
	}
	if m.Visibility != nil {
		n += 1 + sovCommon(uint64(*m.Visibility))
	}
	if m.RetryCountLimit != nil {
		n += 1 + sovCommon(uint64(*m.RetryCountLimit))
	}
	if m.NormalizeType != nil {
		n += 1 + sovCommon(uint64(*m.NormalizeType))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *DataStatus) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Name != nil {
		l = len(*m.Name)
		n += 1 + l + sovCommon(uint64(l))
	}
	if m.Src != nil {
		l = len(*m.Src)
		n += 1 + l + sovCommon(uint64(l))
	}
	if m.Dst != nil {
		l = len(*m.Dst)
		n += 1 + l + sovCommon(uint64(l))
	}
	if m.CurVersion != nil {
		n += 1 + sovCommon(uint64(*m.CurVersion))
	}
	if m.TargetVersion != nil {
		n += 1 + sovCommon(uint64(*m.TargetVersion))
	}
	if m.DeployStatus != nil {
		n += 1 + sovCommon(uint64(*m.DeployStatus))
	}
	if m.LastErrorInfo != nil {
		l = m.LastErrorInfo.Size()
		n += 1 + l + sovCommon(uint64(l))
	}
	if m.AttemptId != nil {
		n += 1 + sovCommon(uint64(*m.AttemptId))
	}
	if m.Visibility != nil {
		n += 1 + sovCommon(uint64(*m.Visibility))
	}
	if m.RetryCount != nil {
		n += 1 + sovCommon(uint64(*m.RetryCount))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *PackageStatus) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Status != nil {
		n += 1 + sovCommon(uint64(*m.Status))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *LoadInfo) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Name != nil {
		l = len(*m.Name)
		n += 1 + l + sovCommon(uint64(l))
	}
	if m.Value != nil {
		n += 9
	}
	if m.Tags != nil {
		l = len(*m.Tags)
		n += 1 + l + sovCommon(uint64(l))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *ContainerLoadInfo) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.ContainerName != nil {
		l = len(*m.ContainerName)
		n += 1 + l + sovCommon(uint64(l))
	}
	if m.ContainerIp != nil {
		l = len(*m.ContainerIp)
		n += 1 + l + sovCommon(uint64(l))
	}
	if m.Service != nil {
		l = len(*m.Service)
		n += 1 + l + sovCommon(uint64(l))
	}
	if m.UpdateTime != nil {
		n += 1 + sovCommon(uint64(*m.UpdateTime))
	}
	if len(m.LoadInfo) > 0 {
		for _, e := range m.LoadInfo {
			l = e.Size()
			n += 1 + l + sovCommon(uint64(l))
		}
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *SlotLoadInfo) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.SlotId != nil {
		n += 1 + sovCommon(uint64(*m.SlotId))
	}
	if m.AppId != nil {
		l = len(*m.AppId)
		n += 1 + l + sovCommon(uint64(l))
	}
	if m.AppRole != nil {
		l = len(*m.AppRole)
		n += 1 + l + sovCommon(uint64(l))
	}
	if m.CpuSetMode != nil {
		l = len(*m.CpuSetMode)
		n += 1 + l + sovCommon(uint64(l))
	}
	if m.Priority != nil {
		l = len(*m.Priority)
		n += 1 + l + sovCommon(uint64(l))
	}
	if m.IsPod != nil {
		n += 2
	}
	if m.UpdateTime != nil {
		n += 1 + sovCommon(uint64(*m.UpdateTime))
	}
	if len(m.Loadinfo) > 0 {
		for _, e := range m.Loadinfo {
			l = e.Size()
			n += 1 + l + sovCommon(uint64(l))
		}
	}
	if len(m.ContainerLoadInfo) > 0 {
		for _, e := range m.ContainerLoadInfo {
			l = e.Size()
			n += 1 + l + sovCommon(uint64(l))
		}
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *SlaveLoadInfo) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.SlaveAddr != nil {
		l = len(*m.SlaveAddr)
		n += 1 + l + sovCommon(uint64(l))
	}
	if m.ClusterName != nil {
		l = len(*m.ClusterName)
		n += 1 + l + sovCommon(uint64(l))
	}
	if m.ServiceName != nil {
		l = len(*m.ServiceName)
		n += 1 + l + sovCommon(uint64(l))
	}
	if m.MachineType != nil {
		l = len(*m.MachineType)
		n += 1 + l + sovCommon(uint64(l))
	}
	if m.UpdateTime != nil {
		n += 1 + sovCommon(uint64(*m.UpdateTime))
	}
	if len(m.LoadInfo) > 0 {
		for _, e := range m.LoadInfo {
			l = e.Size()
			n += 1 + l + sovCommon(uint64(l))
		}
	}
	if len(m.SlotLoadInfo) > 0 {
		for _, e := range m.SlotLoadInfo {
			l = e.Size()
			n += 1 + l + sovCommon(uint64(l))
		}
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *SlaveNodeLoadInfo) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.SlaveLoadInfo != nil {
		l = m.SlaveLoadInfo.Size()
		n += 1 + l + sovCommon(uint64(l))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *SetLoggerLevelRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Logger != nil {
		l = len(*m.Logger)
		n += 1 + l + sovCommon(uint64(l))
	}
	if m.Level != nil {
		n += 1 + sovCommon(uint64(*m.Level))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *SetLoggerLevelResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.ErrorInfo != nil {
		l = m.ErrorInfo.Size()
		n += 1 + l + sovCommon(uint64(l))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *ClusterDescription) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.ClusterId != nil {
		l = len(*m.ClusterId)
		n += 1 + l + sovCommon(uint64(l))
	}
	if m.DriverClass != nil {
		l = len(*m.DriverClass)
		n += 1 + l + sovCommon(uint64(l))
	}
	if m.Endpoint != nil {
		l = len(*m.Endpoint)
		n += 1 + l + sovCommon(uint64(l))
	}
	if m.ServiceAddr != nil {
		l = len(*m.ServiceAddr)
		n += 1 + l + sovCommon(uint64(l))
	}
	if m.SlaveRunMode != nil {
		l = len(*m.SlaveRunMode)
		n += 1 + l + sovCommon(uint64(l))
	}
	if m.Conquered != nil {
		n += 2
	}
	if m.NeedHeartBeat != nil {
		n += 2
	}
	if len(m.Specs) > 0 {
		for _, e := range m.Specs {
			l = e.Size()
			n += 2 + l + sovCommon(uint64(l))
		}
	}
	if m.AddedTime != nil {
		n += 2 + sovCommon(uint64(*m.AddedTime))
	}
	if m.State != nil {
		l = len(*m.State)
		n += 2 + l + sovCommon(uint64(l))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *DiskInfo) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.DiskId != nil {
		l = len(*m.DiskId)
		n += 1 + l + sovCommon(uint64(l))
	}
	if m.WorkDir != nil {
		l = len(*m.WorkDir)
		n += 1 + l + sovCommon(uint64(l))
	}
	if m.DiskSize != nil {
		n += 1 + sovCommon(uint64(*m.DiskSize))
	}
	if m.MountPoint != nil {
		l = len(*m.MountPoint)
		n += 1 + l + sovCommon(uint64(l))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func sovCommon(x uint64) (n int) {
	return (math_bits.Len64(x|1) + 6) / 7
}
func sozCommon(x uint64) (n int) {
	return sovCommon(uint64((x << 1) ^ uint64((int64(x) >> 63))))
}
func (m *ErrorInfo) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowCommon
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: ErrorInfo: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: ErrorInfo: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field ErrorCode", wireType)
			}
			var v ErrorCode
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCommon
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= ErrorCode(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.ErrorCode = &v
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ErrorMsg", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCommon
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthCommon
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthCommon
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			s := string(dAtA[iNdEx:postIndex])
			m.ErrorMsg = &s
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipCommon(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthCommon
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *SlotId) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowCommon
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: SlotId: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: SlotId: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field SlaveAddress", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCommon
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthCommon
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthCommon
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			s := string(dAtA[iNdEx:postIndex])
			m.SlaveAddress = &s
			iNdEx = postIndex
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Id", wireType)
			}
			var v int32
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCommon
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.Id = &v
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field DeclareTime", wireType)
			}
			var v int64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCommon
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.DeclareTime = &v
		case 4:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field RestfulHttpPort", wireType)
			}
			var v int32
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCommon
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.RestfulHttpPort = &v
		case 5:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field SlaveHttpPort", wireType)
			}
			var v int32
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCommon
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.SlaveHttpPort = &v
		case 6:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field K8SPodUID", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCommon
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthCommon
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthCommon
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			s := string(dAtA[iNdEx:postIndex])
			m.K8SPodUID = &s
			iNdEx = postIndex
		case 7:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field K8SPodName", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCommon
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthCommon
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthCommon
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			s := string(dAtA[iNdEx:postIndex])
			m.K8SPodName = &s
			iNdEx = postIndex
		case 8:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field K8SNamespace", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCommon
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthCommon
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthCommon
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			s := string(dAtA[iNdEx:postIndex])
			m.K8SNamespace = &s
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipCommon(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthCommon
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *GenericResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowCommon
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: GenericResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: GenericResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ErrorInfo", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCommon
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthCommon
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthCommon
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.ErrorInfo == nil {
				m.ErrorInfo = &ErrorInfo{}
			}
			if err := m.ErrorInfo.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipCommon(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthCommon
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *PreferenceDescription) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowCommon
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: PreferenceDescription: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: PreferenceDescription: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field SlaveAddress", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCommon
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthCommon
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthCommon
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			s := string(dAtA[iNdEx:postIndex])
			m.SlaveAddress = &s
			iNdEx = postIndex
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Type", wireType)
			}
			var v PreferenceDescription_PreferenceType
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCommon
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= PreferenceDescription_PreferenceType(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.Type = &v
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field LeaseMs", wireType)
			}
			var v uint32
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCommon
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= uint32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.LeaseMs = &v
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ResourceTag", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCommon
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthCommon
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthCommon
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			s := string(dAtA[iNdEx:postIndex])
			m.ResourceTag = &s
			iNdEx = postIndex
		case 5:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field DiskName", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCommon
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthCommon
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthCommon
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			s := string(dAtA[iNdEx:postIndex])
			m.DiskName = &s
			iNdEx = postIndex
		case 6:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field UserDefined", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCommon
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			b := bool(v != 0)
			m.UserDefined = &b
		case 7:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field WorkDirTag", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCommon
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthCommon
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthCommon
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			s := string(dAtA[iNdEx:postIndex])
			m.WorkDirTag = &s
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipCommon(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthCommon
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *Resource) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowCommon
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: Resource: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: Resource: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Type", wireType)
			}
			var v Resource_Type
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCommon
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= Resource_Type(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.Type = &v
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Name", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCommon
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthCommon
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthCommon
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			s := string(dAtA[iNdEx:postIndex])
			m.Name = &s
			iNdEx = postIndex
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Amount", wireType)
			}
			var v int32
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCommon
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.Amount = &v
		default:
			iNdEx = preIndex
			skippy, err := skipCommon(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthCommon
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *Priority) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowCommon
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: Priority: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: Priority: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field MajorPriority", wireType)
			}
			var v int32
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCommon
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.MajorPriority = &v
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field MinorPriority", wireType)
			}
			var v int32
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCommon
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.MinorPriority = &v
		default:
			iNdEx = preIndex
			skippy, err := skipCommon(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthCommon
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *SlotResource) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowCommon
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: SlotResource: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: SlotResource: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Resources", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCommon
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthCommon
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthCommon
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Resources = append(m.Resources, &Resource{})
			if err := m.Resources[len(m.Resources)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipCommon(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthCommon
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *SlaveResource) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowCommon
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: SlaveResource: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: SlaveResource: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Resources", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCommon
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthCommon
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthCommon
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Resources = append(m.Resources, &Resource{})
			if err := m.Resources[len(m.Resources)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ReservedResources", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCommon
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthCommon
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthCommon
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.ReservedResources = append(m.ReservedResources, &Resource{})
			if err := m.ReservedResources[len(m.ReservedResources)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field SysReservedResources", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCommon
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthCommon
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthCommon
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.SysReservedResources = append(m.SysReservedResources, &Resource{})
			if err := m.SysReservedResources[len(m.SysReservedResources)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipCommon(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthCommon
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *GrantedResource) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowCommon
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: GrantedResource: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: GrantedResource: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Resources", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCommon
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthCommon
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthCommon
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Resources = append(m.Resources, &Resource{})
			if err := m.Resources[len(m.Resources)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipCommon(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthCommon
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *SlaveRuntimeConfig) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowCommon
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: SlaveRuntimeConfig: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: SlaveRuntimeConfig: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Valid", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCommon
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			b := bool(v != 0)
			m.Valid = &b
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field CpuUsageSafeRatio", wireType)
			}
			var v int32
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCommon
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.CpuUsageSafeRatio = &v
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field ElasticMemory", wireType)
			}
			var v int32
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCommon
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.ElasticMemory = &v
		case 4:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field GuaranteedCpuForNonProd", wireType)
			}
			var v int32
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCommon
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.GuaranteedCpuForNonProd = &v
		case 5:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field EnableMemoryPriority", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCommon
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			b := bool(v != 0)
			m.EnableMemoryPriority = &b
		case 6:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field UsePriorityOOM", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCommon
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			b := bool(v != 0)
			m.UsePriorityOOM = &b
		case 7:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field EnableOOMKillAll", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCommon
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			b := bool(v != 0)
			m.EnableOOMKillAll = &b
		case 8:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field MemoryUsageCalcInLruView", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCommon
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			b := bool(v != 0)
			m.MemoryUsageCalcInLruView = &b
		case 9:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field EnableColdMemory", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCommon
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			b := bool(v != 0)
			m.EnableColdMemory = &b
		case 10:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Configs", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCommon
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthCommon
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthCommon
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Configs = append(m.Configs, string(dAtA[iNdEx:postIndex]))
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipCommon(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthCommon
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *SlaveDescription) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowCommon
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: SlaveDescription: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: SlaveDescription: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Address", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCommon
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthCommon
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthCommon
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			s := string(dAtA[iNdEx:postIndex])
			m.Address = &s
			iNdEx = postIndex
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field SlotCount", wireType)
			}
			var v int32
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCommon
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.SlotCount = &v
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field SlaveResource", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCommon
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthCommon
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthCommon
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.SlaveResource == nil {
				m.SlaveResource = &SlaveResource{}
			}
			if err := m.SlaveResource.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 4:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field IsOffline", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCommon
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			b := bool(v != 0)
			m.IsOffline = &b
		case 5:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field SlaveId", wireType)
			}
			var v int64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCommon
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.SlaveId = &v
		case 6:
			if wireType == 0 {
				var v int32
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowCommon
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					v |= int32(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				m.NeedOfflineSlots = append(m.NeedOfflineSlots, v)
			} else if wireType == 2 {
				var packedLen int
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowCommon
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					packedLen |= int(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				if packedLen < 0 {
					return ErrInvalidLengthCommon
				}
				postIndex := iNdEx + packedLen
				if postIndex < 0 {
					return ErrInvalidLengthCommon
				}
				if postIndex > l {
					return io.ErrUnexpectedEOF
				}
				var elementCount int
				var count int
				for _, integer := range dAtA[iNdEx:postIndex] {
					if integer < 128 {
						count++
					}
				}
				elementCount = count
				if elementCount != 0 && len(m.NeedOfflineSlots) == 0 {
					m.NeedOfflineSlots = make([]int32, 0, elementCount)
				}
				for iNdEx < postIndex {
					var v int32
					for shift := uint(0); ; shift += 7 {
						if shift >= 64 {
							return ErrIntOverflowCommon
						}
						if iNdEx >= l {
							return io.ErrUnexpectedEOF
						}
						b := dAtA[iNdEx]
						iNdEx++
						v |= int32(b&0x7F) << shift
						if b < 0x80 {
							break
						}
					}
					m.NeedOfflineSlots = append(m.NeedOfflineSlots, v)
				}
			} else {
				return fmt.Errorf("proto: wrong wireType = %d for field NeedOfflineSlots", wireType)
			}
		case 7:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field RuntimeConfig", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCommon
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthCommon
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthCommon
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.RuntimeConfig == nil {
				m.RuntimeConfig = &SlaveRuntimeConfig{}
			}
			if err := m.RuntimeConfig.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 8:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field OfflineReason", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCommon
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthCommon
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthCommon
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			s := string(dAtA[iNdEx:postIndex])
			m.OfflineReason = &s
			iNdEx = postIndex
		case 9:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Labels", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCommon
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthCommon
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthCommon
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Labels = append(m.Labels, &Parameter{})
			if err := m.Labels[len(m.Labels)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 10:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field LeaseRatio", wireType)
			}
			var v int32
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCommon
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.LeaseRatio = &v
		case 11:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field State", wireType)
			}
			var v SlaveState
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCommon
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= SlaveState(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.State = &v
		case 12:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Visibilities", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCommon
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthCommon
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthCommon
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Visibilities = append(m.Visibilities, &Visibility{})
			if err := m.Visibilities[len(m.Visibilities)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 13:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field SchedDomain", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCommon
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthCommon
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthCommon
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			s := string(dAtA[iNdEx:postIndex])
			m.SchedDomain = &s
			iNdEx = postIndex
		case 14:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Preferences", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCommon
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthCommon
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthCommon
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Preferences = append(m.Preferences, &SlotPreferenceConfig{})
			if err := m.Preferences[len(m.Preferences)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 15:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Schedulability", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCommon
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthCommon
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthCommon
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Schedulability == nil {
				m.Schedulability = &SlaveSchedulability{}
			}
			if err := m.Schedulability.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipCommon(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthCommon
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *SlaveSchedulability) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowCommon
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: SlaveSchedulability: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: SlaveSchedulability: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Scheduler", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCommon
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthCommon
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthCommon
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			s := string(dAtA[iNdEx:postIndex])
			m.Scheduler = &s
			iNdEx = postIndex
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Schedulable", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCommon
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			b := bool(v != 0)
			m.Schedulable = &b
		default:
			iNdEx = preIndex
			skippy, err := skipCommon(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthCommon
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *SlotPreference) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowCommon
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: SlotPreference: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: SlotPreference: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Preftag", wireType)
			}
			var v PreferenceTag
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCommon
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= PreferenceTag(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.Preftag = &v
		default:
			iNdEx = preIndex
			skippy, err := skipCommon(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthCommon
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *SlotPreferenceConfig) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowCommon
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: SlotPreferenceConfig: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: SlotPreferenceConfig: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Pattern", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCommon
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthCommon
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthCommon
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			s := string(dAtA[iNdEx:postIndex])
			m.Pattern = &s
			iNdEx = postIndex
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Preftag", wireType)
			}
			var v PreferenceTag
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCommon
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= PreferenceTag(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.Preftag = &v
		default:
			iNdEx = preIndex
			skippy, err := skipCommon(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthCommon
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *Visibility) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowCommon
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: Visibility: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: Visibility: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Scope", wireType)
			}
			var v Visibility_VisibilityScope
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCommon
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= Visibility_VisibilityScope(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.Scope = &v
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Op", wireType)
			}
			var v Visibility_VisibilityOperator
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCommon
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= Visibility_VisibilityOperator(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.Op = &v
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Pattern", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCommon
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthCommon
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthCommon
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			s := string(dAtA[iNdEx:postIndex])
			m.Pattern = &s
			iNdEx = postIndex
		case 4:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Limit", wireType)
			}
			var v int32
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCommon
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.Limit = &v
		default:
			iNdEx = preIndex
			skippy, err := skipCommon(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthCommon
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *ApplicationSlotConfig) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowCommon
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: ApplicationSlotConfig: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: ApplicationSlotConfig: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field WorkDirStyle", wireType)
			}
			var v ApplicationSlotConfig_WorkDirStyle
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCommon
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= ApplicationSlotConfig_WorkDirStyle(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.WorkDirStyle = &v
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field BinaryCacheNamespace", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCommon
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthCommon
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthCommon
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			s := string(dAtA[iNdEx:postIndex])
			m.BinaryCacheNamespace = &s
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipCommon(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthCommon
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *ResourceRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowCommon
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: ResourceRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: ResourceRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Tag", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCommon
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthCommon
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthCommon
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			s := string(dAtA[iNdEx:postIndex])
			m.Tag = &s
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Options", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCommon
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthCommon
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthCommon
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Options = append(m.Options, &SlotResource{})
			if err := m.Options[len(m.Options)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Count", wireType)
			}
			var v int32
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCommon
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.Count = &v
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Declarations", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCommon
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthCommon
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthCommon
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Declarations = append(m.Declarations, &Resource{})
			if err := m.Declarations[len(m.Declarations)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 5:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field AllocateMode", wireType)
			}
			var v ResourceRequest_AllocateMode
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCommon
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= ResourceRequest_AllocateMode(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.AllocateMode = &v
		case 6:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Queue", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCommon
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthCommon
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthCommon
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			s := string(dAtA[iNdEx:postIndex])
			m.Queue = &s
			iNdEx = postIndex
		case 7:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Priority", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCommon
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthCommon
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthCommon
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Priority == nil {
				m.Priority = &Priority{}
			}
			if err := m.Priority.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 8:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field GroupId", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCommon
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthCommon
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthCommon
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			s := string(dAtA[iNdEx:postIndex])
			m.GroupId = &s
			iNdEx = postIndex
		case 9:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field MetaTags", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCommon
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthCommon
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthCommon
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.MetaTags = append(m.MetaTags, &Parameter{})
			if err := m.MetaTags[len(m.MetaTags)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 10:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field UseCpuset", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCommon
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			b := bool(v != 0)
			m.UseCpuset = &b
		case 11:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field SpreadLevel", wireType)
			}
			var v ResourceRequest_SpreadLevel
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCommon
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= ResourceRequest_SpreadLevel(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.SpreadLevel = &v
		case 12:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field MaxInstancePerHost", wireType)
			}
			var v int32
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCommon
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.MaxInstancePerHost = &v
		case 13:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field MaxInstancePerFrame", wireType)
			}
			var v int32
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCommon
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.MaxInstancePerFrame = &v
		case 14:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field MaxInstancePerRack", wireType)
			}
			var v int32
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCommon
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.MaxInstancePerRack = &v
		case 15:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field MaxInstancePerASW", wireType)
			}
			var v int32
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCommon
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.MaxInstancePerASW = &v
		case 16:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field MaxInstancePerPSW", wireType)
			}
			var v int32
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCommon
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.MaxInstancePerPSW = &v
		case 17:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field SpecifiedIps", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCommon
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthCommon
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthCommon
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.SpecifiedIps = append(m.SpecifiedIps, string(dAtA[iNdEx:postIndex]))
			iNdEx = postIndex
		case 18:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ProhibitedIps", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCommon
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthCommon
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthCommon
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.ProhibitedIps = append(m.ProhibitedIps, string(dAtA[iNdEx:postIndex]))
			iNdEx = postIndex
		case 19:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field RequirementId", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCommon
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthCommon
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthCommon
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			s := string(dAtA[iNdEx:postIndex])
			m.RequirementId = &s
			iNdEx = postIndex
		case 20:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Strictly", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCommon
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			b := bool(v != 0)
			m.Strictly = &b
		case 21:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field CpusetMode", wireType)
			}
			var v ResourceRequest_CpusetMode
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCommon
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= ResourceRequest_CpusetMode(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.CpusetMode = &v
		case 22:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field UseHostWorkDir", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCommon
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			b := bool(v != 0)
			m.UseHostWorkDir = &b
		case 23:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ErrorMsg", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCommon
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthCommon
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthCommon
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			s := string(dAtA[iNdEx:postIndex])
			m.ErrorMsg = &s
			iNdEx = postIndex
		case 24:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ContainerConfigs", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCommon
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthCommon
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthCommon
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.ContainerConfigs = append(m.ContainerConfigs, string(dAtA[iNdEx:postIndex]))
			iNdEx = postIndex
		case 25:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field RequestNs", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCommon
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthCommon
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthCommon
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			s := string(dAtA[iNdEx:postIndex])
			m.RequestNs = &s
			iNdEx = postIndex
		case 26:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field FedPayloads", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCommon
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthCommon
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthCommon
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.FedPayloads = append(m.FedPayloads, &Parameter{})
			if err := m.FedPayloads[len(m.FedPayloads)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 27:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field LaunchTemplate", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCommon
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthCommon
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthCommon
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.LaunchTemplate == nil {
				m.LaunchTemplate = &ProcessLaunchContext{}
			}
			if err := m.LaunchTemplate.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 28:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field LaunchSignature", wireType)
			}
			var v int64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCommon
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.LaunchSignature = &v
		case 29:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field PackageChecksum", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCommon
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthCommon
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthCommon
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			s := string(dAtA[iNdEx:postIndex])
			m.PackageChecksum = &s
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipCommon(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthCommon
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *ApplicationDescription) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowCommon
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: ApplicationDescription: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: ApplicationDescription: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ApplicationId", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCommon
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthCommon
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthCommon
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			s := string(dAtA[iNdEx:postIndex])
			m.ApplicationId = &s
			iNdEx = postIndex
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field AppChecksum", wireType)
			}
			var v int64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCommon
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.AppChecksum = &v
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field User", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCommon
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthCommon
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthCommon
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			s := string(dAtA[iNdEx:postIndex])
			m.User = &s
			iNdEx = postIndex
		case 4:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field ReplicaCount", wireType)
			}
			var v int32
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCommon
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.ReplicaCount = &v
		case 5:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field RequiredResource", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCommon
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthCommon
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthCommon
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.RequiredResource == nil {
				m.RequiredResource = &SlotResource{}
			}
			if err := m.RequiredResource.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 6:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ProcessLaunchContext", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCommon
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthCommon
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthCommon
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.ProcessLaunchContext == nil {
				m.ProcessLaunchContext = &ProcessLaunchContext{}
			}
			if err := m.ProcessLaunchContext.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 7:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field OldSlotPriorityKeepTime", wireType)
			}
			var v int64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCommon
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.OldSlotPriorityKeepTime = &v
		case 8:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field ExclusiveMode", wireType)
			}
			var v ApplicationDescription_ExclusiveMode
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCommon
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= ApplicationDescription_ExclusiveMode(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.ExclusiveMode = &v
		case 9:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field SlotConfig", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCommon
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthCommon
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthCommon
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.SlotConfig == nil {
				m.SlotConfig = &ApplicationSlotConfig{}
			}
			if err := m.SlotConfig.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 10:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Queue", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCommon
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthCommon
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthCommon
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			s := string(dAtA[iNdEx:postIndex])
			m.Queue = &s
			iNdEx = postIndex
		case 11:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Status", wireType)
			}
			var v ApplicationDescription_Status
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCommon
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= ApplicationDescription_Status(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.Status = &v
		case 12:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field AllocateMode", wireType)
			}
			var v ResourceRequest_AllocateMode
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCommon
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= ResourceRequest_AllocateMode(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.AllocateMode = &v
		case 13:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Priority", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCommon
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthCommon
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthCommon
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Priority == nil {
				m.Priority = &Priority{}
			}
			if err := m.Priority.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 14:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field ConstraintPolicy", wireType)
			}
			var v uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCommon
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.ConstraintPolicy = &v
		case 15:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field GroupId", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCommon
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthCommon
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthCommon
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			s := string(dAtA[iNdEx:postIndex])
			m.GroupId = &s
			iNdEx = postIndex
		case 16:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Declarations", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCommon
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthCommon
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthCommon
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Declarations = append(m.Declarations, &Resource{})
			if err := m.Declarations[len(m.Declarations)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 17:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field UseCpuset", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCommon
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			b := bool(v != 0)
			m.UseCpuset = &b
		case 18:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field CpusetMode", wireType)
			}
			var v ResourceRequest_CpusetMode
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCommon
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= ResourceRequest_CpusetMode(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.CpusetMode = &v
		case 19:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ContainerConfigs", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCommon
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthCommon
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthCommon
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.ContainerConfigs = append(m.ContainerConfigs, string(dAtA[iNdEx:postIndex]))
			iNdEx = postIndex
		case 20:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field ReserveTime", wireType)
			}
			var v int64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCommon
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.ReserveTime = &v
		case 21:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field RequestNs", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCommon
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthCommon
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthCommon
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			s := string(dAtA[iNdEx:postIndex])
			m.RequestNs = &s
			iNdEx = postIndex
		case 22:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field YarnApplicationId", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCommon
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthCommon
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthCommon
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			s := string(dAtA[iNdEx:postIndex])
			m.YarnApplicationId = &s
			iNdEx = postIndex
		case 23:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Labels", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCommon
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthCommon
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthCommon
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Labels = append(m.Labels, &Parameter{})
			if err := m.Labels[len(m.Labels)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 24:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field SubmitTime", wireType)
			}
			var v int64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCommon
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.SubmitTime = &v
		case 25:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Version", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCommon
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthCommon
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthCommon
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			s := string(dAtA[iNdEx:postIndex])
			m.Version = &s
			iNdEx = postIndex
		case 26:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Scheduler", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCommon
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthCommon
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthCommon
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			s := string(dAtA[iNdEx:postIndex])
			m.Scheduler = &s
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipCommon(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthCommon
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueueResource) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowCommon
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueueResource: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueueResource: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Resources", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCommon
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthCommon
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthCommon
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Resources = append(m.Resources, &Resource{})
			if err := m.Resources[len(m.Resources)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field MinCount", wireType)
			}
			var v int32
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCommon
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.MinCount = &v
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field MaxCount", wireType)
			}
			var v int32
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCommon
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.MaxCount = &v
		case 4:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field AllocatedSlaves", wireType)
			}
			var v int32
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCommon
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.AllocatedSlaves = &v
		case 5:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field OverAllocateQuota", wireType)
			}
			var v int32
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCommon
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.OverAllocateQuota = &v
		default:
			iNdEx = preIndex
			skippy, err := skipCommon(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthCommon
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueueDescription) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowCommon
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueueDescription: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueueDescription: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Name", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCommon
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthCommon
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthCommon
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			s := string(dAtA[iNdEx:postIndex])
			m.Name = &s
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field QueueResource", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCommon
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthCommon
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthCommon
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.QueueResource = append(m.QueueResource, &QueueResource{})
			if err := m.QueueResource[len(m.QueueResource)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field QueueType", wireType)
			}
			var v QueueDescription_QueueType
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCommon
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= QueueDescription_QueueType(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.QueueType = &v
		case 4:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field ScheduleMode", wireType)
			}
			var v QueueDescription_ScheduleMode
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCommon
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= QueueDescription_ScheduleMode(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.ScheduleMode = &v
		case 5:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field LeaseRatio", wireType)
			}
			var v int32
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCommon
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.LeaseRatio = &v
		default:
			iNdEx = preIndex
			skippy, err := skipCommon(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthCommon
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *PodTraceInfo) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowCommon
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: PodTraceInfo: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: PodTraceInfo: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Uid", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCommon
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthCommon
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthCommon
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			s := string(dAtA[iNdEx:postIndex])
			m.Uid = &s
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ResourceTag", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCommon
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthCommon
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthCommon
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			s := string(dAtA[iNdEx:postIndex])
			m.ResourceTag = &s
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field WorkdirTag", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCommon
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthCommon
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthCommon
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			s := string(dAtA[iNdEx:postIndex])
			m.WorkdirTag = &s
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field FederatedCluster", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCommon
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthCommon
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthCommon
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			s := string(dAtA[iNdEx:postIndex])
			m.FederatedCluster = &s
			iNdEx = postIndex
		case 5:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ErrorMsg", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCommon
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthCommon
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthCommon
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			s := string(dAtA[iNdEx:postIndex])
			m.ErrorMsg = &s
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipCommon(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthCommon
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *ResourceResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowCommon
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: ResourceResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: ResourceResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ResourceTag", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCommon
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthCommon
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthCommon
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			s := string(dAtA[iNdEx:postIndex])
			m.ResourceTag = &s
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field AssignedSlots", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCommon
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthCommon
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthCommon
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.AssignedSlots = append(m.AssignedSlots, &AssignedSlot{})
			if err := m.AssignedSlots[len(m.AssignedSlots)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ErrorMsg", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCommon
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthCommon
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthCommon
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			s := string(dAtA[iNdEx:postIndex])
			m.ErrorMsg = &s
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field PendingPods", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCommon
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthCommon
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthCommon
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.PendingPods = append(m.PendingPods, &PodTraceInfo{})
			if err := m.PendingPods[len(m.PendingPods)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 5:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field PendingUpdatePods", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCommon
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthCommon
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthCommon
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.PendingUpdatePods = append(m.PendingUpdatePods, &PodTraceInfo{})
			if err := m.PendingUpdatePods[len(m.PendingUpdatePods)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipCommon(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthCommon
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *SlaveStatus) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowCommon
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: SlaveStatus: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: SlaveStatus: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Status", wireType)
			}
			var v SlaveStatus_Status
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCommon
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= SlaveStatus_Status(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.Status = &v
		default:
			iNdEx = preIndex
			skippy, err := skipCommon(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthCommon
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *SlaveHealth) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowCommon
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: SlaveHealth: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: SlaveHealth: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field IsHealthy", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCommon
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			b := bool(v != 0)
			m.IsHealthy = &b
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Dp2Status", wireType)
			}
			var v SlaveHealth_HealthCode
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCommon
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= SlaveHealth_HealthCode(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.Dp2Status = &v
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field EnvGuardStatus", wireType)
			}
			var v SlaveHealth_HealthCode
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCommon
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= SlaveHealth_HealthCode(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.EnvGuardStatus = &v
		case 4:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field CommonStatus", wireType)
			}
			var v SlaveHealth_HealthCode
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCommon
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= SlaveHealth_HealthCode(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.CommonStatus = &v
		default:
			iNdEx = preIndex
			skippy, err := skipCommon(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthCommon
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *SystemStatus) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowCommon
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: SystemStatus: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: SystemStatus: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Status", wireType)
			}
			var v SystemStatus_Status
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCommon
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= SystemStatus_Status(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.Status = &v
		default:
			iNdEx = preIndex
			skippy, err := skipCommon(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthCommon
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *ProcessStatus) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowCommon
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: ProcessStatus: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: ProcessStatus: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field IsDaemon", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCommon
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			b := bool(v != 0)
			m.IsDaemon = &b
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Status", wireType)
			}
			var v ProcessStatus_Status
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCommon
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= ProcessStatus_Status(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.Status = &v
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ProcessName", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCommon
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthCommon
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthCommon
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			s := string(dAtA[iNdEx:postIndex])
			m.ProcessName = &s
			iNdEx = postIndex
		case 4:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field RestartCount", wireType)
			}
			var v int32
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCommon
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.RestartCount = &v
		case 5:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field StartTime", wireType)
			}
			var v int64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCommon
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.StartTime = &v
		case 6:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field ExitCode", wireType)
			}
			var v int32
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCommon
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.ExitCode = &v
		case 7:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Pid", wireType)
			}
			var v int32
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCommon
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.Pid = &v
		case 8:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field InstanceId", wireType)
			}
			var v int64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCommon
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.InstanceId = &v
		case 9:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field OtherInfos", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCommon
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthCommon
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthCommon
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.OtherInfos = append(m.OtherInfos, &Parameter{})
			if err := m.OtherInfos[len(m.OtherInfos)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipCommon(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthCommon
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *PackageDetail) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowCommon
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: PackageDetail: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: PackageDetail: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Taskid", wireType)
			}
			var v int64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCommon
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.Taskid = &v
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Status", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCommon
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthCommon
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthCommon
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			s := string(dAtA[iNdEx:postIndex])
			m.Status = &s
			iNdEx = postIndex
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field StartTime", wireType)
			}
			var v int64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCommon
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.StartTime = &v
		case 4:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field CostTime", wireType)
			}
			var v int64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCommon
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.CostTime = &v
		case 5:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field DownloadSize", wireType)
			}
			var v int64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCommon
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.DownloadSize = &v
		case 6:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field TotalSize", wireType)
			}
			var v int64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCommon
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.TotalSize = &v
		case 7:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field SrcBaseUri", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCommon
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthCommon
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthCommon
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			s := string(dAtA[iNdEx:postIndex])
			m.SrcBaseUri = &s
			iNdEx = postIndex
		case 8:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ErrMsg", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCommon
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthCommon
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthCommon
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			s := string(dAtA[iNdEx:postIndex])
			m.ErrMsg = &s
			iNdEx = postIndex
		case 9:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field PackageName", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCommon
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthCommon
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthCommon
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			s := string(dAtA[iNdEx:postIndex])
			m.PackageName = &s
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipCommon(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthCommon
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *SlotPayload) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowCommon
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: SlotPayload: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: SlotPayload: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Id", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCommon
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthCommon
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthCommon
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Id == nil {
				m.Id = &SlotId{}
			}
			if err := m.Id.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Payloads", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCommon
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthCommon
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthCommon
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Payloads = append(m.Payloads, &Parameter{})
			if err := m.Payloads[len(m.Payloads)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipCommon(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthCommon
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *AssignedSlot) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowCommon
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: AssignedSlot: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: AssignedSlot: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Id", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCommon
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthCommon
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthCommon
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Id == nil {
				m.Id = &SlotId{}
			}
			if err := m.Id.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Reclaim", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCommon
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			b := bool(v != 0)
			m.Reclaim = &b
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ApplicationId", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCommon
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthCommon
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthCommon
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			s := string(dAtA[iNdEx:postIndex])
			m.ApplicationId = &s
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field SlotResource", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCommon
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthCommon
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthCommon
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.SlotResource == nil {
				m.SlotResource = &SlotResource{}
			}
			if err := m.SlotResource.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 5:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ProcessStatus", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCommon
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthCommon
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthCommon
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.ProcessStatus = append(m.ProcessStatus, &ProcessStatus{})
			if err := m.ProcessStatus[len(m.ProcessStatus)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 6:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field SlaveStatus", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCommon
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthCommon
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthCommon
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.SlaveStatus == nil {
				m.SlaveStatus = &SlaveStatus{}
			}
			if err := m.SlaveStatus.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 7:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field DataStatus", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCommon
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthCommon
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthCommon
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.DataStatus = append(m.DataStatus, &DataStatus{})
			if err := m.DataStatus[len(m.DataStatus)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 8:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field LaunchSignature", wireType)
			}
			var v int64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCommon
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.LaunchSignature = &v
		case 9:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field PackageChecksum", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCommon
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthCommon
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthCommon
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			s := string(dAtA[iNdEx:postIndex])
			m.PackageChecksum = &s
			iNdEx = postIndex
		case 10:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field PackageStatus", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCommon
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthCommon
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthCommon
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.PackageStatus == nil {
				m.PackageStatus = &PackageStatus{}
			}
			if err := m.PackageStatus.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 11:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field AppChecksum", wireType)
			}
			var v int64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCommon
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.AppChecksum = &v
		case 12:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field SystemSlot", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCommon
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			b := bool(v != 0)
			m.SystemSlot = &b
		case 13:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field NoLongerMatchQueue", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCommon
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			b := bool(v != 0)
			m.NoLongerMatchQueue = &b
		case 14:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field NoLongerMatchResourceRequirement", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCommon
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			b := bool(v != 0)
			m.NoLongerMatchResourceRequirement = &b
		case 15:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Payloads", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCommon
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthCommon
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthCommon
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Payloads = append(m.Payloads, &Parameter{})
			if err := m.Payloads[len(m.Payloads)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 16:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field DeclareResources", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCommon
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthCommon
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthCommon
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.DeclareResources == nil {
				m.DeclareResources = &SlotResource{}
			}
			if err := m.DeclareResources.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 17:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field NoLongerMatchWorkDirTag", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCommon
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			b := bool(v != 0)
			m.NoLongerMatchWorkDirTag = &b
		case 18:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field PreDeployPackageChecksum", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCommon
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthCommon
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthCommon
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			s := string(dAtA[iNdEx:postIndex])
			m.PreDeployPackageChecksum = &s
			iNdEx = postIndex
		case 19:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field PreDeployPackageStatus", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCommon
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthCommon
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthCommon
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.PreDeployPackageStatus == nil {
				m.PreDeployPackageStatus = &PackageStatus{}
			}
			if err := m.PreDeployPackageStatus.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 20:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Priority", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCommon
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthCommon
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthCommon
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Priority == nil {
				m.Priority = &Priority{}
			}
			if err := m.Priority.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 21:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field GroupId", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCommon
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthCommon
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthCommon
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			s := string(dAtA[iNdEx:postIndex])
			m.GroupId = &s
			iNdEx = postIndex
		case 22:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field MetaTags", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCommon
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthCommon
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthCommon
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.MetaTags = append(m.MetaTags, &Parameter{})
			if err := m.MetaTags[len(m.MetaTags)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 23:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field RequirementId", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCommon
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthCommon
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthCommon
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			s := string(dAtA[iNdEx:postIndex])
			m.RequirementId = &s
			iNdEx = postIndex
		case 24:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field YarnContainerId", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCommon
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthCommon
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthCommon
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			s := string(dAtA[iNdEx:postIndex])
			m.YarnContainerId = &s
			iNdEx = postIndex
		case 25:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field SlotPreference", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCommon
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthCommon
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthCommon
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.SlotPreference == nil {
				m.SlotPreference = &SlotPreference{}
			}
			if err := m.SlotPreference.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 26:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field PackageDetails", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCommon
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthCommon
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthCommon
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.PackageDetails = append(m.PackageDetails, &PackageDetail{})
			if err := m.PackageDetails[len(m.PackageDetails)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 27:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Uid", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCommon
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthCommon
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthCommon
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			s := string(dAtA[iNdEx:postIndex])
			m.Uid = &s
			iNdEx = postIndex
		case 28:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field K8SPodUID", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCommon
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthCommon
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthCommon
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			s := string(dAtA[iNdEx:postIndex])
			m.K8SPodUID = &s
			iNdEx = postIndex
		case 29:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field K8SPodName", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCommon
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthCommon
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthCommon
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			s := string(dAtA[iNdEx:postIndex])
			m.K8SPodName = &s
			iNdEx = postIndex
		case 30:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field K8SNamespace", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCommon
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthCommon
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthCommon
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			s := string(dAtA[iNdEx:postIndex])
			m.K8SNamespace = &s
			iNdEx = postIndex
		case 31:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Ip", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCommon
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthCommon
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthCommon
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			s := string(dAtA[iNdEx:postIndex])
			m.Ip = &s
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipCommon(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthCommon
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *HistoryInfo) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowCommon
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: HistoryInfo: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: HistoryInfo: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Apps", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCommon
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthCommon
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthCommon
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Apps = append(m.Apps, &HistoryApp{})
			if err := m.Apps[len(m.Apps)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipCommon(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthCommon
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *HistoryApp) Unmarshal(dAtA []byte) error {
	var hasFields [1]uint64
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowCommon
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: HistoryApp: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: HistoryApp: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field App", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCommon
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthCommon
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthCommon
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			s := string(dAtA[iNdEx:postIndex])
			m.App = &s
			iNdEx = postIndex
			hasFields[0] |= uint64(0x00000001)
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Tags", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCommon
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthCommon
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthCommon
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Tags = append(m.Tags, &HistoryTag{})
			if err := m.Tags[len(m.Tags)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipCommon(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthCommon
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}
	if hasFields[0]&uint64(0x00000001) == 0 {
		return new(github_com_golang_protobuf_proto.RequiredNotSetError)
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *HistoryTag) Unmarshal(dAtA []byte) error {
	var hasFields [1]uint64
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowCommon
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: HistoryTag: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: HistoryTag: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Tag", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCommon
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthCommon
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthCommon
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			s := string(dAtA[iNdEx:postIndex])
			m.Tag = &s
			iNdEx = postIndex
			hasFields[0] |= uint64(0x00000001)
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Pods", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCommon
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthCommon
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthCommon
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Pods = append(m.Pods, &HistoryPod{})
			if err := m.Pods[len(m.Pods)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field MaxInstancePerHost", wireType)
			}
			var v int32
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCommon
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.MaxInstancePerHost = &v
			hasFields[0] |= uint64(0x00000002)
		default:
			iNdEx = preIndex
			skippy, err := skipCommon(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthCommon
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}
	if hasFields[0]&uint64(0x00000001) == 0 {
		return new(github_com_golang_protobuf_proto.RequiredNotSetError)
	}
	if hasFields[0]&uint64(0x00000002) == 0 {
		return new(github_com_golang_protobuf_proto.RequiredNotSetError)
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *HistoryPod) Unmarshal(dAtA []byte) error {
	var hasFields [1]uint64
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowCommon
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: HistoryPod: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: HistoryPod: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Uid", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCommon
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthCommon
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthCommon
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			s := string(dAtA[iNdEx:postIndex])
			m.Uid = &s
			iNdEx = postIndex
			hasFields[0] |= uint64(0x00000001)
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field DeclareTime", wireType)
			}
			var v int64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCommon
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.DeclareTime = &v
			hasFields[0] |= uint64(0x00000002)
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field ExitTime", wireType)
			}
			var v int64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCommon
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.ExitTime = &v
			hasFields[0] |= uint64(0x00000004)
		case 4:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Id", wireType)
			}
			var v int32
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCommon
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.Id = &v
			hasFields[0] |= uint64(0x00000008)
		case 5:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field SlaveAddress", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCommon
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthCommon
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthCommon
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			s := string(dAtA[iNdEx:postIndex])
			m.SlaveAddress = &s
			iNdEx = postIndex
			hasFields[0] |= uint64(0x00000010)
		case 6:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field DiskId", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCommon
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthCommon
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthCommon
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			s := string(dAtA[iNdEx:postIndex])
			m.DiskId = &s
			iNdEx = postIndex
			hasFields[0] |= uint64(0x00000020)
		default:
			iNdEx = preIndex
			skippy, err := skipCommon(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthCommon
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}
	if hasFields[0]&uint64(0x00000001) == 0 {
		return new(github_com_golang_protobuf_proto.RequiredNotSetError)
	}
	if hasFields[0]&uint64(0x00000002) == 0 {
		return new(github_com_golang_protobuf_proto.RequiredNotSetError)
	}
	if hasFields[0]&uint64(0x00000004) == 0 {
		return new(github_com_golang_protobuf_proto.RequiredNotSetError)
	}
	if hasFields[0]&uint64(0x00000008) == 0 {
		return new(github_com_golang_protobuf_proto.RequiredNotSetError)
	}
	if hasFields[0]&uint64(0x00000010) == 0 {
		return new(github_com_golang_protobuf_proto.RequiredNotSetError)
	}
	if hasFields[0]&uint64(0x00000020) == 0 {
		return new(github_com_golang_protobuf_proto.RequiredNotSetError)
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *ProcessLaunchContext) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowCommon
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: ProcessLaunchContext: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: ProcessLaunchContext: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field RequiredPackages", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCommon
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthCommon
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthCommon
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.RequiredPackages = append(m.RequiredPackages, &PackageInfo{})
			if err := m.RequiredPackages[len(m.RequiredPackages)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Processes", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCommon
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthCommon
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthCommon
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Processes = append(m.Processes, &ProcessInfo{})
			if err := m.Processes[len(m.Processes)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field RequiredDatas", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCommon
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthCommon
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthCommon
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.RequiredDatas = append(m.RequiredDatas, &DataInfo{})
			if err := m.RequiredDatas[len(m.RequiredDatas)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field PreDeployPackages", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCommon
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthCommon
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthCommon
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.PreDeployPackages = append(m.PreDeployPackages, &PackageInfo{})
			if err := m.PreDeployPackages[len(m.PreDeployPackages)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 5:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field RequirementId", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCommon
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthCommon
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthCommon
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			s := string(dAtA[iNdEx:postIndex])
			m.RequirementId = &s
			iNdEx = postIndex
		case 6:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ExtendInfos", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCommon
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthCommon
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthCommon
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.ExtendInfos = append(m.ExtendInfos, &Parameter{})
			if err := m.ExtendInfos[len(m.ExtendInfos)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipCommon(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthCommon
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *ProcessLaunchExtraInfo) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowCommon
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: ProcessLaunchExtraInfo: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: ProcessLaunchExtraInfo: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field QuotaIds", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCommon
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthCommon
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthCommon
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.QuotaIds = append(m.QuotaIds, &Parameter{})
			if err := m.QuotaIds[len(m.QuotaIds)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field CgroupPaths", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCommon
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthCommon
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthCommon
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.CgroupPaths = append(m.CgroupPaths, &Parameter{})
			if err := m.CgroupPaths[len(m.CgroupPaths)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ExtendInfos", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCommon
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthCommon
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthCommon
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.ExtendInfos = append(m.ExtendInfos, &Parameter{})
			if err := m.ExtendInfos[len(m.ExtendInfos)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipCommon(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthCommon
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *PackageInfo) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowCommon
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: PackageInfo: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: PackageInfo: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field PackageURI", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCommon
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthCommon
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthCommon
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			s := string(dAtA[iNdEx:postIndex])
			m.PackageURI = &s
			iNdEx = postIndex
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Type", wireType)
			}
			var v PackageInfo_PackageType
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCommon
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= PackageInfo_PackageType(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.Type = &v
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Visibility", wireType)
			}
			var v PackageInfo_PackageVisibility
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCommon
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= PackageInfo_PackageVisibility(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.Visibility = &v
		default:
			iNdEx = preIndex
			skippy, err := skipCommon(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthCommon
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *TrackData) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowCommon
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: TrackData: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: TrackData: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Path", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCommon
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthCommon
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthCommon
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			s := string(dAtA[iNdEx:postIndex])
			m.Path = &s
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field MatchPattern", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCommon
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthCommon
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthCommon
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			s := string(dAtA[iNdEx:postIndex])
			m.MatchPattern = &s
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field LogPattern", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCommon
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthCommon
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthCommon
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			s := string(dAtA[iNdEx:postIndex])
			m.LogPattern = &s
			iNdEx = postIndex
		case 4:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field KeepTime", wireType)
			}
			var v int64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCommon
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.KeepTime = &v
		case 5:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field LimitSize", wireType)
			}
			var v int32
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCommon
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.LimitSize = &v
		default:
			iNdEx = preIndex
			skippy, err := skipCommon(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthCommon
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *ProcessInfo) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowCommon
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: ProcessInfo: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: ProcessInfo: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field IsDaemon", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCommon
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			b := bool(v != 0)
			m.IsDaemon = &b
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ProcessName", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCommon
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthCommon
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthCommon
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			s := string(dAtA[iNdEx:postIndex])
			m.ProcessName = &s
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Cmd", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCommon
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthCommon
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthCommon
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			s := string(dAtA[iNdEx:postIndex])
			m.Cmd = &s
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Envs", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCommon
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthCommon
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthCommon
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Envs = append(m.Envs, &Parameter{})
			if err := m.Envs[len(m.Envs)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 5:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Args", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCommon
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthCommon
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthCommon
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Args = append(m.Args, &Parameter{})
			if err := m.Args[len(m.Args)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 6:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field InstanceId", wireType)
			}
			var v int64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCommon
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.InstanceId = &v
		case 7:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field StopTimeout", wireType)
			}
			var v int64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCommon
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.StopTimeout = &v
		case 8:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field RestartInterval", wireType)
			}
			var v int64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCommon
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.RestartInterval = &v
		case 9:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field RestartCountLimit", wireType)
			}
			var v int64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCommon
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.RestartCountLimit = &v
		case 10:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field ProcStopSig", wireType)
			}
			var v int32
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCommon
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.ProcStopSig = &v
		case 11:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field OtherInfos", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCommon
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthCommon
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthCommon
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.OtherInfos = append(m.OtherInfos, &Parameter{})
			if err := m.OtherInfos[len(m.OtherInfos)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipCommon(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthCommon
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *Parameter) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowCommon
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: Parameter: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: Parameter: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Key", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCommon
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthCommon
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthCommon
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			s := string(dAtA[iNdEx:postIndex])
			m.Key = &s
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Value", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCommon
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthCommon
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthCommon
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			s := string(dAtA[iNdEx:postIndex])
			m.Value = &s
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipCommon(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthCommon
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *DataInfo) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowCommon
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: DataInfo: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: DataInfo: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Name", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCommon
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthCommon
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthCommon
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			s := string(dAtA[iNdEx:postIndex])
			m.Name = &s
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Src", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCommon
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthCommon
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthCommon
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			s := string(dAtA[iNdEx:postIndex])
			m.Src = &s
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Dst", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCommon
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthCommon
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthCommon
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			s := string(dAtA[iNdEx:postIndex])
			m.Dst = &s
			iNdEx = postIndex
		case 4:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Version", wireType)
			}
			var v int32
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCommon
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.Version = &v
		case 5:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field AttemptId", wireType)
			}
			var v int64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCommon
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.AttemptId = &v
		case 6:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field ExpireTime", wireType)
			}
			var v int64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCommon
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.ExpireTime = &v
		case 7:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Visibility", wireType)
			}
			var v DataInfo_DataVisibility
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCommon
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= DataInfo_DataVisibility(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.Visibility = &v
		case 8:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field RetryCountLimit", wireType)
			}
			var v int32
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCommon
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.RetryCountLimit = &v
		case 9:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field NormalizeType", wireType)
			}
			var v DataInfo_DataPathNormalizeType
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCommon
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= DataInfo_DataPathNormalizeType(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.NormalizeType = &v
		default:
			iNdEx = preIndex
			skippy, err := skipCommon(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthCommon
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *DataStatus) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowCommon
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: DataStatus: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: DataStatus: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Name", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCommon
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthCommon
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthCommon
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			s := string(dAtA[iNdEx:postIndex])
			m.Name = &s
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Src", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCommon
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthCommon
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthCommon
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			s := string(dAtA[iNdEx:postIndex])
			m.Src = &s
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Dst", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCommon
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthCommon
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthCommon
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			s := string(dAtA[iNdEx:postIndex])
			m.Dst = &s
			iNdEx = postIndex
		case 4:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field CurVersion", wireType)
			}
			var v int32
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCommon
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.CurVersion = &v
		case 5:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field TargetVersion", wireType)
			}
			var v int32
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCommon
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.TargetVersion = &v
		case 6:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field DeployStatus", wireType)
			}
			var v DataStatus_DeployStatus
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCommon
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= DataStatus_DeployStatus(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.DeployStatus = &v
		case 7:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field LastErrorInfo", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCommon
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthCommon
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthCommon
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.LastErrorInfo == nil {
				m.LastErrorInfo = &ErrorInfo{}
			}
			if err := m.LastErrorInfo.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 8:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field AttemptId", wireType)
			}
			var v int64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCommon
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.AttemptId = &v
		case 9:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Visibility", wireType)
			}
			var v DataInfo_DataVisibility
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCommon
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= DataInfo_DataVisibility(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.Visibility = &v
		case 10:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field RetryCount", wireType)
			}
			var v int32
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCommon
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.RetryCount = &v
		default:
			iNdEx = preIndex
			skippy, err := skipCommon(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthCommon
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *PackageStatus) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowCommon
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: PackageStatus: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: PackageStatus: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Status", wireType)
			}
			var v PackageStatus_Status
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCommon
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= PackageStatus_Status(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.Status = &v
		default:
			iNdEx = preIndex
			skippy, err := skipCommon(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthCommon
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *LoadInfo) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowCommon
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: LoadInfo: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: LoadInfo: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Name", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCommon
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthCommon
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthCommon
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			s := string(dAtA[iNdEx:postIndex])
			m.Name = &s
			iNdEx = postIndex
		case 2:
			if wireType != 1 {
				return fmt.Errorf("proto: wrong wireType = %d for field Value", wireType)
			}
			var v uint64
			if (iNdEx + 8) > l {
				return io.ErrUnexpectedEOF
			}
			v = uint64(encoding_binary.LittleEndian.Uint64(dAtA[iNdEx:]))
			iNdEx += 8
			v2 := float64(math.Float64frombits(v))
			m.Value = &v2
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Tags", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCommon
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthCommon
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthCommon
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			s := string(dAtA[iNdEx:postIndex])
			m.Tags = &s
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipCommon(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthCommon
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *ContainerLoadInfo) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowCommon
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: ContainerLoadInfo: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: ContainerLoadInfo: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ContainerName", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCommon
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthCommon
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthCommon
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			s := string(dAtA[iNdEx:postIndex])
			m.ContainerName = &s
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ContainerIp", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCommon
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthCommon
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthCommon
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			s := string(dAtA[iNdEx:postIndex])
			m.ContainerIp = &s
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Service", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCommon
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthCommon
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthCommon
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			s := string(dAtA[iNdEx:postIndex])
			m.Service = &s
			iNdEx = postIndex
		case 4:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field UpdateTime", wireType)
			}
			var v int64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCommon
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.UpdateTime = &v
		case 5:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field LoadInfo", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCommon
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthCommon
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthCommon
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.LoadInfo = append(m.LoadInfo, &LoadInfo{})
			if err := m.LoadInfo[len(m.LoadInfo)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipCommon(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthCommon
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *SlotLoadInfo) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowCommon
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: SlotLoadInfo: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: SlotLoadInfo: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field SlotId", wireType)
			}
			var v int32
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCommon
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.SlotId = &v
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field AppId", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCommon
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthCommon
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthCommon
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			s := string(dAtA[iNdEx:postIndex])
			m.AppId = &s
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field AppRole", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCommon
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthCommon
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthCommon
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			s := string(dAtA[iNdEx:postIndex])
			m.AppRole = &s
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field CpuSetMode", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCommon
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthCommon
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthCommon
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			s := string(dAtA[iNdEx:postIndex])
			m.CpuSetMode = &s
			iNdEx = postIndex
		case 5:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Priority", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCommon
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthCommon
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthCommon
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			s := string(dAtA[iNdEx:postIndex])
			m.Priority = &s
			iNdEx = postIndex
		case 6:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field IsPod", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCommon
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			b := bool(v != 0)
			m.IsPod = &b
		case 7:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field UpdateTime", wireType)
			}
			var v int64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCommon
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.UpdateTime = &v
		case 8:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Loadinfo", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCommon
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthCommon
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthCommon
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Loadinfo = append(m.Loadinfo, &LoadInfo{})
			if err := m.Loadinfo[len(m.Loadinfo)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 9:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ContainerLoadInfo", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCommon
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthCommon
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthCommon
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.ContainerLoadInfo = append(m.ContainerLoadInfo, &ContainerLoadInfo{})
			if err := m.ContainerLoadInfo[len(m.ContainerLoadInfo)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipCommon(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthCommon
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *SlaveLoadInfo) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowCommon
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: SlaveLoadInfo: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: SlaveLoadInfo: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field SlaveAddr", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCommon
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthCommon
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthCommon
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			s := string(dAtA[iNdEx:postIndex])
			m.SlaveAddr = &s
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ClusterName", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCommon
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthCommon
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthCommon
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			s := string(dAtA[iNdEx:postIndex])
			m.ClusterName = &s
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ServiceName", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCommon
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthCommon
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthCommon
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			s := string(dAtA[iNdEx:postIndex])
			m.ServiceName = &s
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field MachineType", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCommon
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthCommon
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthCommon
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			s := string(dAtA[iNdEx:postIndex])
			m.MachineType = &s
			iNdEx = postIndex
		case 5:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field UpdateTime", wireType)
			}
			var v int64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCommon
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.UpdateTime = &v
		case 6:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field LoadInfo", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCommon
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthCommon
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthCommon
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.LoadInfo = append(m.LoadInfo, &LoadInfo{})
			if err := m.LoadInfo[len(m.LoadInfo)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 7:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field SlotLoadInfo", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCommon
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthCommon
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthCommon
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.SlotLoadInfo = append(m.SlotLoadInfo, &SlotLoadInfo{})
			if err := m.SlotLoadInfo[len(m.SlotLoadInfo)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipCommon(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthCommon
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *SlaveNodeLoadInfo) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowCommon
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: SlaveNodeLoadInfo: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: SlaveNodeLoadInfo: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field SlaveLoadInfo", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCommon
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthCommon
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthCommon
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.SlaveLoadInfo == nil {
				m.SlaveLoadInfo = &SlaveLoadInfo{}
			}
			if err := m.SlaveLoadInfo.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipCommon(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthCommon
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *SetLoggerLevelRequest) Unmarshal(dAtA []byte) error {
	var hasFields [1]uint64
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowCommon
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: SetLoggerLevelRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: SetLoggerLevelRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Logger", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCommon
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthCommon
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthCommon
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			s := string(dAtA[iNdEx:postIndex])
			m.Logger = &s
			iNdEx = postIndex
			hasFields[0] |= uint64(0x00000001)
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Level", wireType)
			}
			var v SetLoggerLevelRequest_LogLevel
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCommon
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= SetLoggerLevelRequest_LogLevel(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.Level = &v
			hasFields[0] |= uint64(0x00000002)
		default:
			iNdEx = preIndex
			skippy, err := skipCommon(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthCommon
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}
	if hasFields[0]&uint64(0x00000001) == 0 {
		return new(github_com_golang_protobuf_proto.RequiredNotSetError)
	}
	if hasFields[0]&uint64(0x00000002) == 0 {
		return new(github_com_golang_protobuf_proto.RequiredNotSetError)
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *SetLoggerLevelResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowCommon
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: SetLoggerLevelResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: SetLoggerLevelResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ErrorInfo", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCommon
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthCommon
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthCommon
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.ErrorInfo == nil {
				m.ErrorInfo = &ErrorInfo{}
			}
			if err := m.ErrorInfo.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipCommon(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthCommon
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *ClusterDescription) Unmarshal(dAtA []byte) error {
	var hasFields [1]uint64
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowCommon
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: ClusterDescription: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: ClusterDescription: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ClusterId", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCommon
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthCommon
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthCommon
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			s := string(dAtA[iNdEx:postIndex])
			m.ClusterId = &s
			iNdEx = postIndex
			hasFields[0] |= uint64(0x00000001)
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field DriverClass", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCommon
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthCommon
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthCommon
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			s := string(dAtA[iNdEx:postIndex])
			m.DriverClass = &s
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Endpoint", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCommon
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthCommon
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthCommon
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			s := string(dAtA[iNdEx:postIndex])
			m.Endpoint = &s
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ServiceAddr", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCommon
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthCommon
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthCommon
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			s := string(dAtA[iNdEx:postIndex])
			m.ServiceAddr = &s
			iNdEx = postIndex
		case 5:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field SlaveRunMode", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCommon
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthCommon
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthCommon
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			s := string(dAtA[iNdEx:postIndex])
			m.SlaveRunMode = &s
			iNdEx = postIndex
		case 6:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Conquered", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCommon
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			b := bool(v != 0)
			m.Conquered = &b
		case 7:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field NeedHeartBeat", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCommon
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			b := bool(v != 0)
			m.NeedHeartBeat = &b
		case 20:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Specs", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCommon
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthCommon
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthCommon
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Specs = append(m.Specs, &Parameter{})
			if err := m.Specs[len(m.Specs)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 21:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field AddedTime", wireType)
			}
			var v int64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCommon
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.AddedTime = &v
		case 22:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field State", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCommon
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthCommon
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthCommon
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			s := string(dAtA[iNdEx:postIndex])
			m.State = &s
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipCommon(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthCommon
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}
	if hasFields[0]&uint64(0x00000001) == 0 {
		return new(github_com_golang_protobuf_proto.RequiredNotSetError)
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *DiskInfo) Unmarshal(dAtA []byte) error {
	var hasFields [1]uint64
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowCommon
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: DiskInfo: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: DiskInfo: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field DiskId", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCommon
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthCommon
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthCommon
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			s := string(dAtA[iNdEx:postIndex])
			m.DiskId = &s
			iNdEx = postIndex
			hasFields[0] |= uint64(0x00000001)
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field WorkDir", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCommon
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthCommon
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthCommon
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			s := string(dAtA[iNdEx:postIndex])
			m.WorkDir = &s
			iNdEx = postIndex
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field DiskSize", wireType)
			}
			var v int32
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCommon
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.DiskSize = &v
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field MountPoint", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCommon
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthCommon
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthCommon
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			s := string(dAtA[iNdEx:postIndex])
			m.MountPoint = &s
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipCommon(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthCommon
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}
	if hasFields[0]&uint64(0x00000001) == 0 {
		return new(github_com_golang_protobuf_proto.RequiredNotSetError)
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func skipCommon(dAtA []byte) (n int, err error) {
	l := len(dAtA)
	iNdEx := 0
	depth := 0
	for iNdEx < l {
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return 0, ErrIntOverflowCommon
			}
			if iNdEx >= l {
				return 0, io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		wireType := int(wire & 0x7)
		switch wireType {
		case 0:
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowCommon
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				iNdEx++
				if dAtA[iNdEx-1] < 0x80 {
					break
				}
			}
		case 1:
			iNdEx += 8
		case 2:
			var length int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowCommon
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				length |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if length < 0 {
				return 0, ErrInvalidLengthCommon
			}
			iNdEx += length
		case 3:
			depth++
		case 4:
			if depth == 0 {
				return 0, ErrUnexpectedEndOfGroupCommon
			}
			depth--
		case 5:
			iNdEx += 4
		default:
			return 0, fmt.Errorf("proto: illegal wireType %d", wireType)
		}
		if iNdEx < 0 {
			return 0, ErrInvalidLengthCommon
		}
		if depth == 0 {
			return iNdEx, nil
		}
	}
	return 0, io.ErrUnexpectedEOF
}

var (
	ErrInvalidLengthCommon        = fmt.Errorf("proto: negative length found during unmarshaling")
	ErrIntOverflowCommon          = fmt.Errorf("proto: integer overflow")
	ErrUnexpectedEndOfGroupCommon = fmt.Errorf("proto: unexpected end of group")
)
