// Code generated by MockGen. DO NOT EDIT.
// Source: mem/persister.go

// Package mem is a generated GoMock package.
package mem

import (
	reflect "reflect"

	gomock "github.com/golang/mock/gomock"
	runtime "k8s.io/apimachinery/pkg/runtime"
)

// MockPersister is a mock of Persister interface.
type MockPersister struct {
	ctrl     *gomock.Controller
	recorder *MockPersisterMockRecorder
}

// MockPersisterMockRecorder is the mock recorder for MockPersister.
type MockPersisterMockRecorder struct {
	mock *MockPersister
}

// NewMockPersister creates a new mock instance.
func NewMockPersister(ctrl *gomock.Controller) *MockPersister {
	mock := &MockPersister{ctrl: ctrl}
	mock.recorder = &MockPersisterMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockPersister) EXPECT() *MockPersisterMockRecorder {
	return m.recorder
}

// Close mocks base method.
func (m *MockPersister) Close() error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Close")
	ret0, _ := ret[0].(error)
	return ret0
}

// Close indicates an expected call of Close.
func (mr *MockPersisterMockRecorder) Close() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Close", reflect.TypeOf((*MockPersister)(nil).Close))
}

// Persist mocks base method.
func (m *MockPersister) Persist(arg0 *BatchObject) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Persist", arg0)
	ret0, _ := ret[0].(error)
	return ret0
}

// Persist indicates an expected call of Persist.
func (mr *MockPersisterMockRecorder) Persist(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Persist", reflect.TypeOf((*MockPersister)(nil).Persist), arg0)
}

// PersistMeta mocks base method.
func (m *MockPersister) PersistMeta(arg0 *MetaInfo) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "PersistMeta", arg0)
	ret0, _ := ret[0].(error)
	return ret0
}

// PersistMeta indicates an expected call of PersistMeta.
func (mr *MockPersisterMockRecorder) PersistMeta(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "PersistMeta", reflect.TypeOf((*MockPersister)(nil).PersistMeta), arg0)
}

// Recover mocks base method.
func (m *MockPersister) Recover(fn NewObjectFunc) ([]*BatchObject, *MetaInfo, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Recover", fn)
	ret0, _ := ret[0].([]*BatchObject)
	ret1, _ := ret[1].(*MetaInfo)
	ret2, _ := ret[2].(error)
	return ret0, ret1, ret2
}

// Recover indicates an expected call of Recover.
func (mr *MockPersisterMockRecorder) Recover(fn interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Recover", reflect.TypeOf((*MockPersister)(nil).Recover), fn)
}

// MocknegotiatedPersister is a mock of negotiatedPersister interface.
type MocknegotiatedPersister struct {
	ctrl     *gomock.Controller
	recorder *MocknegotiatedPersisterMockRecorder
}

// MocknegotiatedPersisterMockRecorder is the mock recorder for MocknegotiatedPersister.
type MocknegotiatedPersisterMockRecorder struct {
	mock *MocknegotiatedPersister
}

// NewMocknegotiatedPersister creates a new mock instance.
func NewMocknegotiatedPersister(ctrl *gomock.Controller) *MocknegotiatedPersister {
	mock := &MocknegotiatedPersister{ctrl: ctrl}
	mock.recorder = &MocknegotiatedPersisterMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MocknegotiatedPersister) EXPECT() *MocknegotiatedPersisterMockRecorder {
	return m.recorder
}

// NegotiateEncoding mocks base method.
func (m *MocknegotiatedPersister) NegotiateEncoding(o runtime.Object) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "NegotiateEncoding", o)
}

// NegotiateEncoding indicates an expected call of NegotiateEncoding.
func (mr *MocknegotiatedPersisterMockRecorder) NegotiateEncoding(o interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "NegotiateEncoding", reflect.TypeOf((*MocknegotiatedPersister)(nil).NegotiateEncoding), o)
}
