// Code generated by MockGen. DO NOT EDIT.
// Source: testutils/carbon/worker_node.go

// Package carbon is a generated GoMock package.
package carbon

import (
	reflect "reflect"

	gomock "github.com/golang/mock/gomock"
	spec "github.com/alibaba/kube-sharding/pkg/memkube/testutils/carbon/spec"
	v1 "k8s.io/apimachinery/pkg/apis/meta/v1"
	watch "k8s.io/apimachinery/pkg/watch"
)

// MockWorkerNodeInterface is a mock of WorkerNodeInterface interface.
type MockWorkerNodeInterface struct {
	ctrl     *gomock.Controller
	recorder *MockWorkerNodeInterfaceMockRecorder
}

// MockWorkerNodeInterfaceMockRecorder is the mock recorder for MockWorkerNodeInterface.
type MockWorkerNodeInterfaceMockRecorder struct {
	mock *MockWorkerNodeInterface
}

// NewMockWorkerNodeInterface creates a new mock instance.
func NewMockWorkerNodeInterface(ctrl *gomock.Controller) *MockWorkerNodeInterface {
	mock := &MockWorkerNodeInterface{ctrl: ctrl}
	mock.recorder = &MockWorkerNodeInterfaceMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockWorkerNodeInterface) EXPECT() *MockWorkerNodeInterfaceMockRecorder {
	return m.recorder
}

// Create mocks base method.
func (m *MockWorkerNodeInterface) Create(arg0 *spec.WorkerNode) (*spec.WorkerNode, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Create", arg0)
	ret0, _ := ret[0].(*spec.WorkerNode)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Create indicates an expected call of Create.
func (mr *MockWorkerNodeInterfaceMockRecorder) Create(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Create", reflect.TypeOf((*MockWorkerNodeInterface)(nil).Create), arg0)
}

// Get mocks base method.
func (m *MockWorkerNodeInterface) Get(name string, options v1.GetOptions) (*spec.WorkerNode, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Get", name, options)
	ret0, _ := ret[0].(*spec.WorkerNode)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Get indicates an expected call of Get.
func (mr *MockWorkerNodeInterfaceMockRecorder) Get(name, options interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Get", reflect.TypeOf((*MockWorkerNodeInterface)(nil).Get), name, options)
}

// List mocks base method.
func (m *MockWorkerNodeInterface) List(opts v1.ListOptions) (*spec.WorkerNodeList, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "List", opts)
	ret0, _ := ret[0].(*spec.WorkerNodeList)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// List indicates an expected call of List.
func (mr *MockWorkerNodeInterfaceMockRecorder) List(opts interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "List", reflect.TypeOf((*MockWorkerNodeInterface)(nil).List), opts)
}

// Update mocks base method.
func (m *MockWorkerNodeInterface) Update(arg0 *spec.WorkerNode) (*spec.WorkerNode, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Update", arg0)
	ret0, _ := ret[0].(*spec.WorkerNode)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Update indicates an expected call of Update.
func (mr *MockWorkerNodeInterfaceMockRecorder) Update(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Update", reflect.TypeOf((*MockWorkerNodeInterface)(nil).Update), arg0)
}

// Watch mocks base method.
func (m *MockWorkerNodeInterface) Watch(opts v1.ListOptions) (watch.Interface, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Watch", opts)
	ret0, _ := ret[0].(watch.Interface)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Watch indicates an expected call of Watch.
func (mr *MockWorkerNodeInterfaceMockRecorder) Watch(opts interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Watch", reflect.TypeOf((*MockWorkerNodeInterface)(nil).Watch), opts)
}
