// Code generated by MockGen. DO NOT EDIT.
// Source: client/client.go

// Package client is a generated GoMock package.
package client

import (
	reflect "reflect"

	gomock "github.com/golang/mock/gomock"
	mem "github.com/alibaba/kube-sharding/pkg/memkube/mem"
	v1 "k8s.io/apimachinery/pkg/apis/meta/v1"
	runtime "k8s.io/apimachinery/pkg/runtime"
	watch "k8s.io/apimachinery/pkg/watch"
)

// MockReadClient is a mock of ReadClient interface.
type MockReadClient struct {
	ctrl     *gomock.Controller
	recorder *MockReadClientMockRecorder
}

// MockReadClientMockRecorder is the mock recorder for MockReadClient.
type MockReadClientMockRecorder struct {
	mock *MockReadClient
}

// NewMockReadClient creates a new mock instance.
func NewMockReadClient(ctrl *gomock.Controller) *MockReadClient {
	mock := &MockReadClient{ctrl: ctrl}
	mock.recorder = &MockReadClientMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockReadClient) EXPECT() *MockReadClientMockRecorder {
	return m.recorder
}

// Get mocks base method.
func (m *MockReadClient) Get(resource, ns, name string, opts v1.GetOptions, into runtime.Object) (runtime.Object, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Get", resource, ns, name, opts, into)
	ret0, _ := ret[0].(runtime.Object)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Get indicates an expected call of Get.
func (mr *MockReadClientMockRecorder) Get(resource, ns, name, opts, into interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Get", reflect.TypeOf((*MockReadClient)(nil).Get), resource, ns, name, opts, into)
}

// List mocks base method.
func (m *MockReadClient) List(resource, ns string, opts v1.ListOptions, into runtime.Object) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "List", resource, ns, opts, into)
	ret0, _ := ret[0].(error)
	return ret0
}

// List indicates an expected call of List.
func (mr *MockReadClientMockRecorder) List(resource, ns, opts, into interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "List", reflect.TypeOf((*MockReadClient)(nil).List), resource, ns, opts, into)
}

// MockClient is a mock of Client interface.
type MockClient struct {
	ctrl     *gomock.Controller
	recorder *MockClientMockRecorder
}

// MockClientMockRecorder is the mock recorder for MockClient.
type MockClientMockRecorder struct {
	mock *MockClient
}

// NewMockClient creates a new mock instance.
func NewMockClient(ctrl *gomock.Controller) *MockClient {
	mock := &MockClient{ctrl: ctrl}
	mock.recorder = &MockClientMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockClient) EXPECT() *MockClientMockRecorder {
	return m.recorder
}

// Create mocks base method.
func (m *MockClient) Create(resource, ns string, object runtime.Object) (runtime.Object, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Create", resource, ns, object)
	ret0, _ := ret[0].(runtime.Object)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Create indicates an expected call of Create.
func (mr *MockClientMockRecorder) Create(resource, ns, object interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Create", reflect.TypeOf((*MockClient)(nil).Create), resource, ns, object)
}

// Delete mocks base method.
func (m *MockClient) Delete(resource, ns, name string, opts *v1.DeleteOptions) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Delete", resource, ns, name, opts)
	ret0, _ := ret[0].(error)
	return ret0
}

// Delete indicates an expected call of Delete.
func (mr *MockClientMockRecorder) Delete(resource, ns, name, opts interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Delete", reflect.TypeOf((*MockClient)(nil).Delete), resource, ns, name, opts)
}

// Get mocks base method.
func (m *MockClient) Get(resource, ns, name string, opts v1.GetOptions, into runtime.Object) (runtime.Object, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Get", resource, ns, name, opts, into)
	ret0, _ := ret[0].(runtime.Object)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Get indicates an expected call of Get.
func (mr *MockClientMockRecorder) Get(resource, ns, name, opts, into interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Get", reflect.TypeOf((*MockClient)(nil).Get), resource, ns, name, opts, into)
}

// List mocks base method.
func (m *MockClient) List(resource, ns string, opts v1.ListOptions, into runtime.Object) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "List", resource, ns, opts, into)
	ret0, _ := ret[0].(error)
	return ret0
}

// List indicates an expected call of List.
func (mr *MockClientMockRecorder) List(resource, ns, opts, into interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "List", reflect.TypeOf((*MockClient)(nil).List), resource, ns, opts, into)
}

// Start mocks base method.
func (m *MockClient) Start(stopCh <-chan struct{}) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Start", stopCh)
	ret0, _ := ret[0].(error)
	return ret0
}

// Start indicates an expected call of Start.
func (mr *MockClientMockRecorder) Start(stopCh interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Start", reflect.TypeOf((*MockClient)(nil).Start), stopCh)
}

// Update mocks base method.
func (m *MockClient) Update(resource, ns string, object runtime.Object) (runtime.Object, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Update", resource, ns, object)
	ret0, _ := ret[0].(runtime.Object)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Update indicates an expected call of Update.
func (mr *MockClientMockRecorder) Update(resource, ns, object interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Update", reflect.TypeOf((*MockClient)(nil).Update), resource, ns, object)
}

// Watch mocks base method.
func (m *MockClient) Watch(resource, ns string, opts *mem.WatchOptions) (watch.Interface, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Watch", resource, ns, opts)
	ret0, _ := ret[0].(watch.Interface)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Watch indicates an expected call of Watch.
func (mr *MockClientMockRecorder) Watch(resource, ns, opts interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Watch", reflect.TypeOf((*MockClient)(nil).Watch), resource, ns, opts)
}
