/*
Copyright The Kubernetes Authors.

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

    http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
*/

// Code generated by lister-gen. DO NOT EDIT.

package v1

import (
	v1 "github.com/alibaba/kube-sharding/pkg/apis/carbon/v1"
	"k8s.io/apimachinery/pkg/api/errors"
	"k8s.io/apimachinery/pkg/labels"
	"k8s.io/client-go/tools/cache"
)

// TemporaryConstraintLister helps list TemporaryConstraints.
type TemporaryConstraintLister interface {
	// List lists all TemporaryConstraints in the indexer.
	List(selector labels.Selector) (ret []*v1.TemporaryConstraint, err error)
	// TemporaryConstraints returns an object that can list and get TemporaryConstraints.
	TemporaryConstraints(namespace string) TemporaryConstraintNamespaceLister
	TemporaryConstraintListerExpansion
}

// temporaryConstraintLister implements the TemporaryConstraintLister interface.
type temporaryConstraintLister struct {
	indexer cache.Indexer
}

// NewTemporaryConstraintLister returns a new TemporaryConstraintLister.
func NewTemporaryConstraintLister(indexer cache.Indexer) TemporaryConstraintLister {
	return &temporaryConstraintLister{indexer: indexer}
}

// List lists all TemporaryConstraints in the indexer.
func (s *temporaryConstraintLister) List(selector labels.Selector) (ret []*v1.TemporaryConstraint, err error) {
	err = cache.ListAll(s.indexer, selector, func(m interface{}) {
		ret = append(ret, m.(*v1.TemporaryConstraint))
	})
	return ret, err
}

// TemporaryConstraints returns an object that can list and get TemporaryConstraints.
func (s *temporaryConstraintLister) TemporaryConstraints(namespace string) TemporaryConstraintNamespaceLister {
	return temporaryConstraintNamespaceLister{indexer: s.indexer, namespace: namespace}
}

// TemporaryConstraintNamespaceLister helps list and get TemporaryConstraints.
type TemporaryConstraintNamespaceLister interface {
	// List lists all TemporaryConstraints in the indexer for a given namespace.
	List(selector labels.Selector) (ret []*v1.TemporaryConstraint, err error)
	// Get retrieves the TemporaryConstraint from the indexer for a given namespace and name.
	Get(name string) (*v1.TemporaryConstraint, error)
	TemporaryConstraintNamespaceListerExpansion
}

// temporaryConstraintNamespaceLister implements the TemporaryConstraintNamespaceLister
// interface.
type temporaryConstraintNamespaceLister struct {
	indexer   cache.Indexer
	namespace string
}

// List lists all TemporaryConstraints in the indexer for a given namespace.
func (s temporaryConstraintNamespaceLister) List(selector labels.Selector) (ret []*v1.TemporaryConstraint, err error) {
	err = cache.ListAllByNamespace(s.indexer, s.namespace, selector, func(m interface{}) {
		ret = append(ret, m.(*v1.TemporaryConstraint))
	})
	return ret, err
}

// Get retrieves the TemporaryConstraint from the indexer for a given namespace and name.
func (s temporaryConstraintNamespaceLister) Get(name string) (*v1.TemporaryConstraint, error) {
	obj, exists, err := s.indexer.GetByKey(s.namespace + "/" + name)
	if err != nil {
		return nil, err
	}
	if !exists {
		return nil, errors.NewNotFound(v1.Resource("temporaryconstraint"), name)
	}
	return obj.(*v1.TemporaryConstraint), nil
}
