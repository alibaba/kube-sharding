/*
Copyright The Kubernetes Authors.

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

    http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
*/

// Code generated by lister-gen. DO NOT EDIT.

package v1

import (
	v1 "github.com/alibaba/kube-sharding/pkg/apis/carbon/v1"
	"k8s.io/apimachinery/pkg/api/errors"
	"k8s.io/apimachinery/pkg/labels"
	"k8s.io/client-go/tools/cache"
)

// ShardGroupLister helps list ShardGroups.
type ShardGroupLister interface {
	// List lists all ShardGroups in the indexer.
	List(selector labels.Selector) (ret []*v1.ShardGroup, err error)
	// ShardGroups returns an object that can list and get ShardGroups.
	ShardGroups(namespace string) ShardGroupNamespaceLister
	ShardGroupListerExpansion
}

// shardGroupLister implements the ShardGroupLister interface.
type shardGroupLister struct {
	indexer cache.Indexer
}

// NewShardGroupLister returns a new ShardGroupLister.
func NewShardGroupLister(indexer cache.Indexer) ShardGroupLister {
	return &shardGroupLister{indexer: indexer}
}

// List lists all ShardGroups in the indexer.
func (s *shardGroupLister) List(selector labels.Selector) (ret []*v1.ShardGroup, err error) {
	err = cache.ListAll(s.indexer, selector, func(m interface{}) {
		ret = append(ret, m.(*v1.ShardGroup))
	})
	return ret, err
}

// ShardGroups returns an object that can list and get ShardGroups.
func (s *shardGroupLister) ShardGroups(namespace string) ShardGroupNamespaceLister {
	return shardGroupNamespaceLister{indexer: s.indexer, namespace: namespace}
}

// ShardGroupNamespaceLister helps list and get ShardGroups.
type ShardGroupNamespaceLister interface {
	// List lists all ShardGroups in the indexer for a given namespace.
	List(selector labels.Selector) (ret []*v1.ShardGroup, err error)
	// Get retrieves the ShardGroup from the indexer for a given namespace and name.
	Get(name string) (*v1.ShardGroup, error)
	ShardGroupNamespaceListerExpansion
}

// shardGroupNamespaceLister implements the ShardGroupNamespaceLister
// interface.
type shardGroupNamespaceLister struct {
	indexer   cache.Indexer
	namespace string
}

// List lists all ShardGroups in the indexer for a given namespace.
func (s shardGroupNamespaceLister) List(selector labels.Selector) (ret []*v1.ShardGroup, err error) {
	err = cache.ListAllByNamespace(s.indexer, s.namespace, selector, func(m interface{}) {
		ret = append(ret, m.(*v1.ShardGroup))
	})
	return ret, err
}

// Get retrieves the ShardGroup from the indexer for a given namespace and name.
func (s shardGroupNamespaceLister) Get(name string) (*v1.ShardGroup, error) {
	obj, exists, err := s.indexer.GetByKey(s.namespace + "/" + name)
	if err != nil {
		return nil, err
	}
	if !exists {
		return nil, errors.NewNotFound(v1.Resource("shardgroup"), name)
	}
	return obj.(*v1.ShardGroup), nil
}
