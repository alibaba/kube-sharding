/*
Copyright The Kubernetes Authors.

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

    http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
*/

// Code generated by lister-gen. DO NOT EDIT.

package v1

import (
	v1 "github.com/alibaba/kube-sharding/pkg/apis/carbon/v1"
	"k8s.io/apimachinery/pkg/api/errors"
	"k8s.io/apimachinery/pkg/labels"
	"k8s.io/client-go/tools/cache"
)

// ServicePublisherLister helps list ServicePublishers.
type ServicePublisherLister interface {
	// List lists all ServicePublishers in the indexer.
	List(selector labels.Selector) (ret []*v1.ServicePublisher, err error)
	// ServicePublishers returns an object that can list and get ServicePublishers.
	ServicePublishers(namespace string) ServicePublisherNamespaceLister
	ServicePublisherListerExpansion
}

// servicePublisherLister implements the ServicePublisherLister interface.
type servicePublisherLister struct {
	indexer cache.Indexer
}

// NewServicePublisherLister returns a new ServicePublisherLister.
func NewServicePublisherLister(indexer cache.Indexer) ServicePublisherLister {
	return &servicePublisherLister{indexer: indexer}
}

// List lists all ServicePublishers in the indexer.
func (s *servicePublisherLister) List(selector labels.Selector) (ret []*v1.ServicePublisher, err error) {
	err = cache.ListAll(s.indexer, selector, func(m interface{}) {
		ret = append(ret, m.(*v1.ServicePublisher))
	})
	return ret, err
}

// ServicePublishers returns an object that can list and get ServicePublishers.
func (s *servicePublisherLister) ServicePublishers(namespace string) ServicePublisherNamespaceLister {
	return servicePublisherNamespaceLister{indexer: s.indexer, namespace: namespace}
}

// ServicePublisherNamespaceLister helps list and get ServicePublishers.
type ServicePublisherNamespaceLister interface {
	// List lists all ServicePublishers in the indexer for a given namespace.
	List(selector labels.Selector) (ret []*v1.ServicePublisher, err error)
	// Get retrieves the ServicePublisher from the indexer for a given namespace and name.
	Get(name string) (*v1.ServicePublisher, error)
	ServicePublisherNamespaceListerExpansion
}

// servicePublisherNamespaceLister implements the ServicePublisherNamespaceLister
// interface.
type servicePublisherNamespaceLister struct {
	indexer   cache.Indexer
	namespace string
}

// List lists all ServicePublishers in the indexer for a given namespace.
func (s servicePublisherNamespaceLister) List(selector labels.Selector) (ret []*v1.ServicePublisher, err error) {
	err = cache.ListAllByNamespace(s.indexer, s.namespace, selector, func(m interface{}) {
		ret = append(ret, m.(*v1.ServicePublisher))
	})
	return ret, err
}

// Get retrieves the ServicePublisher from the indexer for a given namespace and name.
func (s servicePublisherNamespaceLister) Get(name string) (*v1.ServicePublisher, error) {
	obj, exists, err := s.indexer.GetByKey(s.namespace + "/" + name)
	if err != nil {
		return nil, err
	}
	if !exists {
		return nil, errors.NewNotFound(v1.Resource("servicepublisher"), name)
	}
	return obj.(*v1.ServicePublisher), nil
}
