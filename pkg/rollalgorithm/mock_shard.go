// Code generated by MockGen. DO NOT EDIT.
// Source: shard_scheduler.go

// Package mock_rollalgorithm is a generated GoMock package.
package rollalgorithm

import (
	reflect "reflect"

	gomock "github.com/golang/mock/gomock"
)

// MockShard is a mock of Shard interface
type MockShard struct {
	ctrl     *gomock.Controller
	recorder *MockShardMockRecorder
}

// MockShardMockRecorder is the mock recorder for MockShard
type MockShardMockRecorder struct {
	mock *MockShard
}

// NewMockShard creates a new mock instance
func NewMockShard(ctrl *gomock.Controller) *MockShard {
	mock := &MockShard{ctrl: ctrl}
	mock.recorder = &MockShardMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (m *MockShard) EXPECT() *MockShardMockRecorder {
	return m.recorder
}

// GetReplicas mocks base method
func (m *MockShard) GetReplicas() int32 {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetReplicas")
	ret0, _ := ret[0].(int32)
	return ret0
}

// GetLatestVersionRatio indicates an expected call of GetLatestVersionRatio
func (mr *MockShardMockRecorder) GetLatestVersionRatio(version interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetLatestVersionRatio", reflect.TypeOf((*MockShard)(nil).GetLatestVersionRatio), version)
}

// GetLatestVersionRatio mocks base method
func (m *MockShard) GetLatestVersionRatio(version string) int32 {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetLatestVersionRatio", version)
	ret0, _ := ret[0].(int32)
	return ret0
}

// GetReplicas indicates an expected call of GetReplicas
func (mr *MockShardMockRecorder) GetReplicas() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetReplicas", reflect.TypeOf((*MockShard)(nil).GetReplicas))
}

// GetRawReplicas mocks base method
func (m *MockShard) GetRawReplicas() int32 {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetRawReplicas")
	ret0, _ := ret[0].(int32)
	return ret0
}

// GetRawReplicas indicates an expected call of GetRawReplicas
func (mr *MockShardMockRecorder) GetRawReplicas() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetRawReplicas", reflect.TypeOf((*MockShard)(nil).GetReplicas))
}

// GetDependencyLevel mocks base method
func (m *MockShard) GetDependencyLevel() int32 {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetDependencyLevel")
	ret0, _ := ret[0].(int32)
	return ret0
}

// GetDependencyLevel indicates an expected call of GetDependencyLevel
func (mr *MockShardMockRecorder) GetDependencyLevel() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetDependencyLevel", reflect.TypeOf((*MockShard)(nil).GetDependencyLevel))
}

// GetCPU mocks base method
func (m *MockShard) GetCPU() int32 {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetCPU")
	ret0, _ := ret[0].(int32)
	return ret0
}

// GetCPU indicates an expected call of GetCPU
func (mr *MockShardMockRecorder) GetCPU() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetCPU", reflect.TypeOf((*MockShard)(nil).GetCPU))
}

// GetName mocks base method
func (m *MockShard) GetName() string {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetName")
	ret0, _ := ret[0].(string)
	return ret0
}

// GetName indicates an expected call of GetName
func (mr *MockShardMockRecorder) GetName() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetName", reflect.TypeOf((*MockShard)(nil).GetName))
}

// GetCarbonRoleName mocks base method
func (m *MockShard) GetCarbonRoleName() string {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetCarbonRoleName")
	ret0, _ := ret[0].(string)
	return ret0
}

// GetCarbonRoleName indicates an expected call of GetCarbonRoleName
func (mr *MockShardMockRecorder) GetCarbonRoleName() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetCarbonRoleName", reflect.TypeOf((*MockShard)(nil).GetCarbonRoleName))
}

// GetVersionStatus mocks base method
func (m *MockShard) GetVersionStatus() map[string]*VersionStatus {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetVersionStatus")
	ret0, _ := ret[0].(map[string]*VersionStatus)
	return ret0
}

// GetVersionStatus indicates an expected call of GetVersionStatus
func (mr *MockShardMockRecorder) GetVersionStatus() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetVersionStatus", reflect.TypeOf((*MockShard)(nil).GetVersionStatus))
}

// GetResourceVersionStatus mocks base method
func (m *MockShard) GetResourceVersionStatus() map[string]*ResourceVersionStatus {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetResourceVersionStatus")
	ret0, _ := ret[0].(map[string]*ResourceVersionStatus)
	return ret0
}

// GetResourceVersionStatus indicates an expected call of GetResourceVersionStatus
func (mr *MockShardMockRecorder) GetResourceVersionStatus() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetResourceVersionStatus", reflect.TypeOf((*MockShard)(nil).GetResourceVersionStatus))
}

// MockShardScheduler is a mock of ShardScheduler interface
type MockShardScheduler struct {
	ctrl     *gomock.Controller
	recorder *MockShardSchedulerMockRecorder
}

// MockShardSchedulerMockRecorder is the mock recorder for MockShardScheduler
type MockShardSchedulerMockRecorder struct {
	mock *MockShardScheduler
}

// NewMockShardScheduler creates a new mock instance
func NewMockShardScheduler(ctrl *gomock.Controller) *MockShardScheduler {
	mock := &MockShardScheduler{ctrl: ctrl}
	mock.recorder = &MockShardSchedulerMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (m *MockShardScheduler) EXPECT() *MockShardSchedulerMockRecorder {
	return m.recorder
}

// Schedule mocks base method
func (m *MockShardScheduler) Schedule(shard Shard, params *ShardScheduleParams) (map[string]int32, map[string]int32, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Schedule", shard, params)
	ret0, _ := ret[0].(map[string]int32)
	ret1, _ := ret[1].(map[string]int32)
	ret2, _ := ret[2].(error)
	return ret0, ret1, ret2
}

// Schedule indicates an expected call of Schedule
func (mr *MockShardSchedulerMockRecorder) Schedule(shard, params interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Schedule", reflect.TypeOf((*MockShardScheduler)(nil).Schedule), shard, params)
}
