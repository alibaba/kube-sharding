/*
Copyright The Kubernetes Authors.

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

    http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
*/


// This file was autogenerated by go-to-protobuf. Do not edit it manually!

syntax = "proto2";

package gitlab.alibaba_inc.com.search_infra.c2.pkg.apis.carbon.v1;

import "k8s.io/api/core/v1/generated.proto";
import "k8s.io/apimachinery/pkg/apis/meta/v1/generated.proto";

// Package-wide variables from generator "generated".
option go_package = "v1";

// AllocatorSyncedStatus is worker status synced by allocator
message AllocatorSyncedStatus {
  // Ip  address. from pod ip.
  optional string ip = 1;

  // HostIP  address. from host.
  optional string hostIP = 2;

  // ResourceMatch describes if the running container match the requirement in plan, eg :cpu mem.
  optional bool resourceMatch = 3;

  // ProcessMatch describes if the running process match the plan
  optional bool processMatch = 4;

  // LastResourceNotMatchtime describe the last time resource not match
  // +optional
  optional int64 lastResourceNotMatchtime = 5;

  // LastProcessNotMatchtime describe the last time process not match
  // +optional
  optional int64 lastProcessNotMatchtime = 6;

  optional string resVersion = 7;

  // Version means the signature of VersionPlan.
  optional string version = 8;

  optional string userDefVersion = 9;

  // ProcessScore filled by allocators  .
  optional int32 processScore = 10;

  // The phase of a Worker is a simple, high-level summary of where the Worker is in its lifecycle.
  optional string phase = 11;

  optional string packageStatus = 12;

  // Is replica should be reclaimed .
  // +optional
  optional bool reclaim = 13;

  optional bool internalReclaim = 14;

  // ready status provide by allocator
  optional bool processReady = 15;

  optional bool namingRegisteredReady = 16;

  optional string entityName = 17;

  optional bool entityAlloced = 18;

  optional string resourcePool = 19;

  optional string workerMode = 20;

  optional int64 lastProcessNotReadytime = 21;

  optional int64 unassignedReason = 22;

  optional string unassignedMessage = 23;

  optional string historyUnassignedMessage = 24;

  optional int64 deletionCost = 25;

  optional string standbyHours = 26;

  optional string entityUid = 27;
}

// BackupOfPod point to logic current pod
message BackupOfPod {
  optional string name = 1;

  optional string uid = 2;
}

// BroadcastPlan BroadcastPlan
message BroadcastPlan {
  optional WorkerSchedulePlan workerSchedulePlan = 1;

  // CustomInfo suez服务信息
  optional string customInfo = 2;

  // json string compressed of CustomInfo
  optional string compressedCustomInfo = 3;

  optional string userDefVersion = 4;

  // Online means is need to publish
  optional bool online = 5;

  // UpdatingGracefully means is need to unpublish before update
  optional bool updatingGracefully = 6;

  // Preload advanced lv7,suez worker 是否做数据预加载
  optional bool preload = 7;

  optional bool isDaemonSet = 8;

  // 内部变量，用于计算cpu可用度。不对外展示
  optional int64 updatePlanTimestamp = 9;

  optional bool rowComplete = 10;
}

// BrokenRecoverQuotaConfig  is the spec for a SchedulePlan resource
message BrokenRecoverQuotaConfig {
  optional int32 maxFailedCount = 1;

  optional int32 timeWindow = 2;
}

// ContainerConfig is config of container
message ContainerConfig {
  repeated Ulimit ulimits = 1;

  optional int64 restartCountLimit = 2;

  optional int64 stopGracePeriod = 3;

  optional string CPU_BVT_WARP_NS = 4;

  optional string CPU_LLC_CACHE = 5;

  optional string NET_PRIORITY = 6;

  optional string NO_MEMCG_RECLAIM = 7;

  optional string MEM_WMARK_RATIO = 8;

  optional string MEM_FORCE_EMPTY = 9;

  optional string MEM_EXTRA_BYTES = 10;

  optional string MEM_EXTRA_RATIO = 11;

  optional string PREDICT_DELAY_SECONDS = 12;
}

// ContainerHippoExterned defines the hippo container
message ContainerHippoExterned {
  map<string, string> Labels = 1;

  optional string PreDeployImage = 2;

  optional bytes HostConfig = 3;

  repeated Device devices = 4;

  optional ContainerConfig configs = 5;

  optional string alias = 6;
}

// Device mount host device to container
message Device {
  optional string pathOnHost = 1;

  optional string pathInContainer = 2;

  optional string cgroupPermissions = 3;
}

// HealthCondition describes the health state of a worker at a certain point.
message HealthCondition {
  // Type of worker node condition.
  optional string type = 1;

  // Status of the condition.
  optional string status = 2;

  // The last time the condition transitioned from one status to another.
  // +optional
  optional k8s.io.apimachinery.pkg.apis.meta.v1.Time lastTransitionTime = 3;

  // The reason for the condition's last transition.
  // +optional
  optional string reason = 4;

  // A human readable message indicating details about the transition.
  // +optional
  optional string message = 5;

  // 时间戳，单位秒
  optional int64 lastLostTime = 6;

  optional int32 lostCount = 7;

  // Metas advanced lv7记录的节点返回信息
  map<string, string> metas = 8;

  optional bool checked = 9;

  // json string compressed of Metas
  optional string compressedMetas = 10;

  // Version workernode版本号
  // +optional
  optional string version = 11;

  // WorkerStatus advanced lv7判断签名是否匹配
  optional string workerStatus = 12;
}

// HippoContainer defines the extend hippo container fields
message HippoContainer {
  optional k8s.io.api.core.v1.Container container = 1;

  optional ContainerHippoExterned containerHippoExterned = 2;
}

// HippoPodSpec defines the hippo pod spec
message HippoPodSpec {
  optional k8s.io.api.core.v1.PodSpec podSpec = 1;

  repeated HippoContainer containers = 2;

  optional HippoPodSpecExtendFields hippoPodSpecExtendFields = 3;

  repeated bytes hippoVolumes = 4;
}

// HippoPodSpecExtendFields HippoPodSpecExtendFields
message HippoPodSpecExtendFields {
  optional string cpusetMode = 1;

  optional int32 cpuShareNum = 2;

  optional string containerModel = 3;

  repeated PackageInfo packageInfos = 4;

  optional int64 predictDelayTime = 5;

  optional bool restartWithoutRemove = 6;

  optional bool needHippoMounts = 7;
}

// HippoPodTemplate HippoPodTemplate
message HippoPodTemplate {
  optional k8s.io.apimachinery.pkg.apis.meta.v1.ObjectMeta metadata = 1;

  optional HippoPodSpec spec = 2;
}

// HippoSlotID defines hippo slot id
message HippoSlotID {
  optional string slave_address = 1;

  optional int64 slot_id = 2;
}

// PackageInfo extend spec, load package first
message PackageInfo {
  optional string pacakgeType = 1;

  optional string packageUri = 2;
}

message PodStandbyStatus {
  optional int64 useOrder = 1;

  repeated int64 standbyHours = 2;
}

// ServiceCondition describes the service publish state of a worker at a certain point.
message ServiceCondition {
  // Type of worker node condition.
  optional string type = 1;

  // ServiceName of service to publish.
  optional string serviceName = 2;

  // Status of the condition, one of True, False, Unknown.
  optional string status = 3;

  optional int64 score = 4;

  // The last time the condition transitioned from one status to another.
  // +optional
  optional k8s.io.apimachinery.pkg.apis.meta.v1.Time lastTransitionTime = 5;

  // The reason for the condition's last transition.
  // +optional
  optional string reason = 6;

  // A human readable message indicating details about the transition.
  // +optional
  optional string message = 7;

  optional bool inWarmup = 8;

  optional int64 deleteCount = 9;

  optional string name = 10;

  optional bool startWarmup = 11;

  optional string version = 12;
}

// SignedVersionPlan SignedVersionPlan
message SignedVersionPlan {
  // ShardGroupVersion group version
  optional string shardGroupVersion = 1;

  // Template describes basic resource template.
  optional HippoPodTemplate template = 2;

  // Signature
  optional string signature = 3;

  // RestartAfterResourceChange means is need to restart, after resource change
  optional bool restartAfterResourceChange = 4;

  map<string, string> bufferSelector = 5;

  optional string cm2TopoInfo = 6;
}

// Ulimit Ulimit
message Ulimit {
  optional string Name = 1;

  optional int64 Soft = 2;

  optional int64 Hard = 3;
}

// VersionPlan  is the spec for a VersionPlan resource
message VersionPlan {
  optional SignedVersionPlan signedVersionPlan = 1;

  optional BroadcastPlan broadcastPlan = 2;
}

// WorkerCondition describes the state of a worker at a certain point.
message WorkerCondition {
  // Type of worker node condition.
  optional string type = 1;

  // Status of the condition, one of True, False, Unknown.
  optional string status = 2;

  // The last time the condition transitioned from one status to another.
  // +optional
  optional k8s.io.apimachinery.pkg.apis.meta.v1.Time lastTransitionTime = 3;

  // The reason for the condition's last transition.
  // +optional
  optional string reason = 4;

  // A human readable message indicating details about the transition.
  // +optional
  optional string message = 5;
}

// WorkerNode is a abstraction layer for a base worker container
message WorkerNode {
  optional k8s.io.apimachinery.pkg.apis.meta.v1.TypeMeta typeMeta = 1;

  optional k8s.io.apimachinery.pkg.apis.meta.v1.ObjectMeta metadata = 2;

  optional WorkerNodeSpec spec = 3;

  optional WorkerNodeStatus status = 4;
}

// WorkerNodeList is a list of WorkerNode resources
message WorkerNodeList {
  optional k8s.io.apimachinery.pkg.apis.meta.v1.TypeMeta typeMeta = 1;

  optional k8s.io.apimachinery.pkg.apis.meta.v1.ListMeta metadata = 2;

  repeated WorkerNode items = 3;
}

// WorkerNodeSpec is a spec layer for a base workernode resource
message WorkerNodeSpec {
  // Selector is a label query over pods that should match the replica count.
  // Label keys and values that must match in order to be controlled by this replica set.
  // It must match the pod template's labels.
  // More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/labels/#label-selectors
  optional k8s.io.apimachinery.pkg.apis.meta.v1.LabelSelector selector = 1;

  // ResoVersion means the signature of Resources.
  optional string resVersion = 2;

  // Version means the signature of VersionPlan.
  optional string version = 3;

  // config for resource and progress
  optional VersionPlan versionPlan = 4;

  optional string workerMode = 5;

  // DependencyReady 依赖的服务是否ready
  optional bool dependencyReady = 6;

  // Is worker to delete.
  optional bool toDelete = 7;

  // Is worker releasing .Different from ToDelete field, may be delete pod and create a new one.
  optional bool releasing = 8;

  // Is worker reclaim
  optional bool reclaim = 9;

  optional int64 ownerGeneration = 10;

  // specific the resource pool, enum Fixed Cyclical
  optional string resourcePool = 11;

  optional int64 deletionCost = 12;

  optional string standbyHours = 13;

  optional BackupOfPod backupOfPod = 14;

  optional bool isSpot = 15;
}

// WorkerNodeStatus is a status for a base workernode resource
message WorkerNodeStatus {
  optional AllocatorSyncedStatus allocatorSyncedStatus = 1;

  // Notify publisher if it is needed to publish
  optional bool serviceOffline = 2;

  optional bool warmup = 3;

  optional bool inWarmup = 4;

  optional bool needWarmup = 5;

  optional bool inUpdating = 6;

  optional bool inRestarting = 7;

  // WorkerReady describes if the running process is the health in plan.
  optional bool workerReady = 8;

  // ResourceMatchTimeout describe the last time process not match
  // +optional
  optional int64 lastWorkerNotReadytime = 9;

  // Scores calculated by various indicators, for sort and decide which to release(choose the worst state) .
  optional int64 score = 10;

  // The phase of a Worker is a simple, high-level summary of where the Worker is in its lifecycle.
  optional string allocStatus = 11;

  // The HealthStatus of a Worker is a simple, high-level summary of the health state of worker.
  optional string healthStatus = 12;

  // ProcessStep describe the process step of replica controller
  optional string processStep = 13;

  // HealthCondition, require to persist in memekube, see issue #96779
  // +optional
  optional HealthCondition healthCondition = 14;

  // The HealthStatus of a Worker is a simple, high-level summary of the service state of worker.
  optional string serviceStatus = 15;

  // list of ServiceConditions
  // +optional
  // +patchMergeKey=type
  // +patchStrategy=merge
  repeated ServiceCondition serviceConditions = 16;

  optional bool serviceReady = 17;

  optional bool serviceReadyForMinTime = 18;

  // ServiceInfoMetas  service meta信息 存储cm2信息
  optional string serviceInfoMetas = 19;

  // The conditions array, the reason and message fields contain more detail about the worker's status.
  // list of Conditions
  // +optional
  // +patchMergeKey=type
  // +patchStrategy=merge
  repeated WorkerCondition conditions = 20;

  optional bool complete = 21;

  // Is worker releasing .Different from ToDelete field, may be delete pod and create a new one.
  optional bool toRelease = 22;

  // LastUpdateStatusTime 最近一次更新时间
  optional int64 badReason = 23;

  optional HippoSlotID slotId = 24;

  optional WorkerStateChangeRecoder workerStateChangeRecoder = 25;

  // PodStandbyStatus standby 顺序信息 //DEPRECATED
  optional PodStandbyStatus podStandbyStatus = 26;

  // ServiceInfoMetas不持久化，看是否重启后load到了新值
  optional bool serviceInfoMetasRecoverd = 27;

  // PodReady pod conditions type = Ready and status = True
  optional bool podReady = 28;

  // Id workerNodeId
  optional string name = 29;

  optional string badReasonMessage = 30;

  map<string, string> restartRecords = 31;

  // isFedWorker
  optional bool isFedWorker = 32;
}

// WorkerSchedulePlan define worker ready and qouta and other fields for worker schedule
message WorkerSchedulePlan {
  // Minimum number of seconds for which a newly created pod should be ready
  // +optional
  optional int32 minReadySeconds = 1;

  // WarmupSeconds number of seconds for which a pod need warmup seconds
  // +optional
  optional int32 warmupSeconds = 2;

  // ResourceMatchTimeout describe the max time for resize resource
  // +optional
  optional int64 resourceMatchTimeout = 3;

  // ProcessMatchTimeout describe the max time for process match
  // +optional
  optional int64 processMatchTimeout = 4;

  // ResourceMatchTimeout describe the max time for start new process
  // +optional
  optional int64 workerReadyTimeout = 5;

  // the maximum of creation of workers for recovery for a period of time
  optional BrokenRecoverQuotaConfig brokenRecoverQuotaConfig = 6;

  // relaiming strategy of workers
  optional string recoverStrategy = 7;

  // Seconds to delay delete backup workernode
  // +optional
  optional int64 delayDeleteBackupSeconds = 8;
}

// WorkerStateChangeRecoder WorkerStateChangeRecoder
message WorkerStateChangeRecoder {
  optional int64 lastServiceReadyTime = 1;

  optional k8s.io.apimachinery.pkg.apis.meta.v1.Time lastUpdateStatusTime = 2;

  optional k8s.io.apimachinery.pkg.apis.meta.v1.Time becomeCurrentTime = 3;

  optional int64 backupDelayDeleteTime = 4;

  optional int64 assignedTime = 5;

  optional int64 podReadyTime = 6;

  optional int64 lastWorkerReadyTime = 7;

  optional int64 lastWarmupStartTime = 8;

  optional int64 lastWarmupEndTime = 9;
}

