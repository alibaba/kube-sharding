// Code generated by MockGen. DO NOT EDIT.
// Source: controller/worker/allocator.go

// Package worker is a generated GoMock package.
package worker

import (
	reflect "reflect"

	gomock "github.com/golang/mock/gomock"
	v1 "github.com/alibaba/kube-sharding/pkg/apis/carbon/v1"
	v10 "k8s.io/api/core/v1"
)

// MockworkerAllocator is a mock of workerAllocator interface.
type MockworkerAllocator struct {
	ctrl     *gomock.Controller
	recorder *MockworkerAllocatorMockRecorder
}

// MockworkerAllocatorMockRecorder is the mock recorder for MockworkerAllocator.
type MockworkerAllocatorMockRecorder struct {
	mock *MockworkerAllocator
}

// NewMockworkerAllocator creates a new mock instance.
func NewMockworkerAllocator(ctrl *gomock.Controller) *MockworkerAllocator {
	mock := &MockworkerAllocator{ctrl: ctrl}
	mock.recorder = &MockworkerAllocatorMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockworkerAllocator) EXPECT() *MockworkerAllocatorMockRecorder {
	return m.recorder
}

// allocate mocks base method.
func (m *MockworkerAllocator) allocate() error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "allocate")
	ret0, _ := ret[0].(error)
	return ret0
}

// allocate indicates an expected call of allocate.
func (mr *MockworkerAllocatorMockRecorder) allocate() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "allocate", reflect.TypeOf((*MockworkerAllocator)(nil).allocate))
}

// delete mocks base method.
func (m *MockworkerAllocator) delete() error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "delete")
	ret0, _ := ret[0].(error)
	return ret0
}

// delete indicates an expected call of delete.
func (mr *MockworkerAllocatorMockRecorder) delete() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "delete", reflect.TypeOf((*MockworkerAllocator)(nil).delete))
}

// syncPodMetas mocks base method.
func (m *MockworkerAllocator) syncPodMetas() error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "syncPodMetas")
	ret0, _ := ret[0].(error)
	return ret0
}

// syncPodMetas indicates an expected call of syncPodMetas.
func (mr *MockworkerAllocatorMockRecorder) syncPodMetas() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "syncPodMetas", reflect.TypeOf((*MockworkerAllocator)(nil).syncPodMetas))
}

// syncPodSpec mocks base method.
func (m *MockworkerAllocator) syncPodSpec() error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "syncPodSpec")
	ret0, _ := ret[0].(error)
	return ret0
}

// syncPodSpec indicates an expected call of syncPodSpec.
func (mr *MockworkerAllocatorMockRecorder) syncPodSpec() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "syncPodSpec", reflect.TypeOf((*MockworkerAllocator)(nil).syncPodSpec))
}

// syncWorkerAllocStatus mocks base method.
func (m *MockworkerAllocator) syncWorkerAllocStatus() error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "syncWorkerAllocStatus")
	ret0, _ := ret[0].(error)
	return ret0
}

// syncWorkerAllocStatus indicates an expected call of syncWorkerAllocStatus.
func (mr *MockworkerAllocatorMockRecorder) syncWorkerAllocStatus() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "syncWorkerAllocStatus", reflect.TypeOf((*MockworkerAllocator)(nil).syncWorkerAllocStatus))
}

// syncWorkerStatus mocks base method.
func (m *MockworkerAllocator) syncWorkerStatus() error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "syncWorkerStatus")
	ret0, _ := ret[0].(error)
	return ret0
}

// syncWorkerStatus indicates an expected call of syncWorkerStatus.
func (mr *MockworkerAllocatorMockRecorder) syncWorkerStatus() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "syncWorkerStatus", reflect.TypeOf((*MockworkerAllocator)(nil).syncWorkerStatus))
}

// MockpodStatusParser is a mock of podStatusParser interface.
type MockpodStatusParser struct {
	ctrl     *gomock.Controller
	recorder *MockpodStatusParserMockRecorder
}

// MockpodStatusParserMockRecorder is the mock recorder for MockpodStatusParser.
type MockpodStatusParserMockRecorder struct {
	mock *MockpodStatusParser
}

// NewMockpodStatusParser creates a new mock instance.
func NewMockpodStatusParser(ctrl *gomock.Controller) *MockpodStatusParser {
	mock := &MockpodStatusParser{ctrl: ctrl}
	mock.recorder = &MockpodStatusParserMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockpodStatusParser) EXPECT() *MockpodStatusParserMockRecorder {
	return m.recorder
}

// getCurrentProcessVersions mocks base method.
func (m *MockpodStatusParser) getCurrentProcessVersions(pod *v10.Pod) (string, map[string]string) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "getCurrentProcessVersions", pod)
	ret0, _ := ret[0].(string)
	ret1, _ := ret[1].(map[string]string)
	return ret0, ret1
}

// getCurrentProcessVersions indicates an expected call of getCurrentProcessVersions.
func (mr *MockpodStatusParserMockRecorder) getCurrentProcessVersions(pod interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "getCurrentProcessVersions", reflect.TypeOf((*MockpodStatusParser)(nil).getCurrentProcessVersions), pod)
}

// getCurrentResourceVersions mocks base method.
func (m *MockpodStatusParser) getCurrentResourceVersions(pod *v10.Pod) (string, bool) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "getCurrentResourceVersions", pod)
	ret0, _ := ret[0].(string)
	ret1, _ := ret[1].(bool)
	return ret0, ret1
}

// getCurrentResourceVersions indicates an expected call of getCurrentResourceVersions.
func (mr *MockpodStatusParserMockRecorder) getCurrentResourceVersions(pod interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "getCurrentResourceVersions", reflect.TypeOf((*MockpodStatusParser)(nil).getCurrentResourceVersions), pod)
}

// getPackageStatus mocks base method.
func (m *MockpodStatusParser) getPackageStatus(pod *v10.Pod) string {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "getPackageStatus", pod)
	ret0, _ := ret[0].(string)
	return ret0
}

// getPackageStatus indicates an expected call of getPackageStatus.
func (mr *MockpodStatusParserMockRecorder) getPackageStatus(pod interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "getPackageStatus", reflect.TypeOf((*MockpodStatusParser)(nil).getPackageStatus), pod)
}

// getPodIP mocks base method.
func (m *MockpodStatusParser) getPodIP(pod *v10.Pod) (string, string) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "getPodIP", pod)
	ret0, _ := ret[0].(string)
	ret1, _ := ret[1].(string)
	return ret0, ret1
}

// getPodIP indicates an expected call of getPodIP.
func (mr *MockpodStatusParserMockRecorder) getPodIP(pod interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "getPodIP", reflect.TypeOf((*MockpodStatusParser)(nil).getPodIP), pod)
}

// getProcessScore mocks base method.
func (m *MockpodStatusParser) getProcessScore(pod *v10.Pod) int32 {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "getProcessScore", pod)
	ret0, _ := ret[0].(int32)
	return ret0
}

// getProcessScore indicates an expected call of getProcessScore.
func (mr *MockpodStatusParserMockRecorder) getProcessScore(pod interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "getProcessScore", reflect.TypeOf((*MockpodStatusParser)(nil).getProcessScore), pod)
}

// getSlotID mocks base method.
func (m *MockpodStatusParser) getSlotID(pod *v10.Pod) v1.HippoSlotID {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "getSlotID", pod)
	ret0, _ := ret[0].(v1.HippoSlotID)
	return ret0
}

// getSlotID indicates an expected call of getSlotID.
func (mr *MockpodStatusParserMockRecorder) getSlotID(pod interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "getSlotID", reflect.TypeOf((*MockpodStatusParser)(nil).getSlotID), pod)
}

// isPodProcessFailed mocks base method.
func (m *MockpodStatusParser) isPodProcessFailed(pod *v10.Pod) bool {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "isPodProcessFailed", pod)
	ret0, _ := ret[0].(bool)
	return ret0
}

// isPodProcessFailed indicates an expected call of isPodProcessFailed.
func (mr *MockpodStatusParserMockRecorder) isPodProcessFailed(pod interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "isPodProcessFailed", reflect.TypeOf((*MockpodStatusParser)(nil).isPodProcessFailed), pod)
}

// isPodReclaimed mocks base method.
func (m *MockpodStatusParser) isPodReclaimed(pod *v10.Pod) bool {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "isPodReclaimed", pod)
	ret0, _ := ret[0].(bool)
	return ret0
}

// isPodReclaimed indicates an expected call of isPodReclaimed.
func (mr *MockpodStatusParserMockRecorder) isPodReclaimed(pod interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "isPodReclaimed", reflect.TypeOf((*MockpodStatusParser)(nil).isPodReclaimed), pod)
}

// MockpodSpecSyncer is a mock of podSpecSyncer interface.
type MockpodSpecSyncer struct {
	ctrl     *gomock.Controller
	recorder *MockpodSpecSyncerMockRecorder
}

// MockpodSpecSyncerMockRecorder is the mock recorder for MockpodSpecSyncer.
type MockpodSpecSyncerMockRecorder struct {
	mock *MockpodSpecSyncer
}

// NewMockpodSpecSyncer creates a new mock instance.
func NewMockpodSpecSyncer(ctrl *gomock.Controller) *MockpodSpecSyncer {
	mock := &MockpodSpecSyncer{ctrl: ctrl}
	mock.recorder = &MockpodSpecSyncerMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockpodSpecSyncer) EXPECT() *MockpodSpecSyncerMockRecorder {
	return m.recorder
}

// MergeWebHooks mocks base method.
func (m *MockpodSpecSyncer) MergeWebHooks(targetPod *v10.Pod, podSpec *v10.PodSpec, currentPod *v10.Pod) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "MergeWebHooks", targetPod, podSpec, currentPod)
	ret0, _ := ret[0].(error)
	return ret0
}

// MergeWebHooks indicates an expected call of MergeWebHooks.
func (mr *MockpodSpecSyncerMockRecorder) MergeWebHooks(targetPod, podSpec, currentPod interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "MergeWebHooks", reflect.TypeOf((*MockpodSpecSyncer)(nil).MergeWebHooks), targetPod, podSpec, currentPod)
}

// computeProcessVersion mocks base method.
func (m *MockpodSpecSyncer) computeProcessVersion(worker *v1.WorkerNode, hippoPodSpec *v1.HippoPodSpec, currentPod *v10.Pod) (string, map[string]string, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "computeProcessVersion", worker, hippoPodSpec, currentPod)
	ret0, _ := ret[0].(string)
	ret1, _ := ret[1].(map[string]string)
	ret2, _ := ret[2].(error)
	return ret0, ret1, ret2
}

// computeProcessVersion indicates an expected call of computeProcessVersion.
func (mr *MockpodSpecSyncerMockRecorder) computeProcessVersion(worker, hippoPodSpec, currentPod interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "computeProcessVersion", reflect.TypeOf((*MockpodSpecSyncer)(nil).computeProcessVersion), worker, hippoPodSpec, currentPod)
}

// computeResourceVersion mocks base method.
func (m *MockpodSpecSyncer) computeResourceVersion(worker *v1.WorkerNode, hippoPodSpec *v1.HippoPodSpec, podSpecExtend *v1.HippoPodSpecExtend) (string, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "computeResourceVersion", worker, hippoPodSpec, podSpecExtend)
	ret0, _ := ret[0].(string)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// computeResourceVersion indicates an expected call of computeResourceVersion.
func (mr *MockpodSpecSyncerMockRecorder) computeResourceVersion(worker, hippoPodSpec, podSpecExtend interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "computeResourceVersion", reflect.TypeOf((*MockpodSpecSyncer)(nil).computeResourceVersion), worker, hippoPodSpec, podSpecExtend)
}

// postSync mocks base method.
func (m *MockpodSpecSyncer) postSync(t *target) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "postSync", t)
	ret0, _ := ret[0].(error)
	return ret0
}

// postSync indicates an expected call of postSync.
func (mr *MockpodSpecSyncerMockRecorder) postSync(t interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "postSync", reflect.TypeOf((*MockpodSpecSyncer)(nil).postSync), t)
}

// preSync mocks base method.
func (m *MockpodSpecSyncer) preSync(worker *v1.WorkerNode, hippoPodSpec *v1.HippoPodSpec, labels map[string]string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "preSync", worker, hippoPodSpec, labels)
	ret0, _ := ret[0].(error)
	return ret0
}

// preSync indicates an expected call of preSync.
func (mr *MockpodSpecSyncerMockRecorder) preSync(worker, hippoPodSpec, labels interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "preSync", reflect.TypeOf((*MockpodSpecSyncer)(nil).preSync), worker, hippoPodSpec, labels)
}

// setProhibit mocks base method.
func (m *MockpodSpecSyncer) setProhibit(pod *v10.Pod, prohibit string) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "setProhibit", pod, prohibit)
}

// setProhibit indicates an expected call of setProhibit.
func (mr *MockpodSpecSyncerMockRecorder) setProhibit(pod, prohibit interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "setProhibit", reflect.TypeOf((*MockpodSpecSyncer)(nil).setProhibit), pod, prohibit)
}

// updateProcess mocks base method.
func (m *MockpodSpecSyncer) updateProcess(t *target) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "updateProcess", t)
	ret0, _ := ret[0].(error)
	return ret0
}

// updateProcess indicates an expected call of updateProcess.
func (mr *MockpodSpecSyncerMockRecorder) updateProcess(t interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "updateProcess", reflect.TypeOf((*MockpodSpecSyncer)(nil).updateProcess), t)
}

// updateResource mocks base method.
func (m *MockpodSpecSyncer) updateResource(t *target, currentPod *v10.Pod) (bool, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "updateResource", t, currentPod)
	ret0, _ := ret[0].(bool)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// updateResource indicates an expected call of updateResource.
func (mr *MockpodSpecSyncerMockRecorder) updateResource(t, currentPod interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "updateResource", reflect.TypeOf((*MockpodSpecSyncer)(nil).updateResource), t, currentPod)
}
