// Code generated by MockGen. DO NOT EDIT.
// Source: scheduler.go

// Package mock_worker is a generated GoMock package.
package worker

import (
	reflect "reflect"

	gomock "github.com/golang/mock/gomock"
	v1 "github.com/alibaba/kube-sharding/pkg/apis/carbon/v1"
	v10 "k8s.io/api/core/v1"
)

// Mockscheduler is a mock of scheduler interface
type Mockscheduler struct {
	ctrl     *gomock.Controller
	recorder *MockschedulerMockRecorder
}

// MockschedulerMockRecorder is the mock recorder for Mockscheduler
type MockschedulerMockRecorder struct {
	mock *Mockscheduler
}

// NewMockscheduler creates a new mock instance
func NewMockscheduler(ctrl *gomock.Controller) *Mockscheduler {
	mock := &Mockscheduler{ctrl: ctrl}
	mock.recorder = &MockschedulerMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (m *Mockscheduler) EXPECT() *MockschedulerMockRecorder {
	return m.recorder
}

// schedule mocks base method
func (m *Mockscheduler) schedule() (*v1.WorkerNode, *v1.WorkerNode, *v10.Pod, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "schedule")
	ret0, _ := ret[0].(*v1.WorkerNode)
	ret1, _ := ret[1].(*v1.WorkerNode)
	ret2, _ := ret[2].(*v10.Pod)
	ret3, _ := ret[3].(error)
	return ret0, ret1, ret2, ret3
}

// schedule indicates an expected call of schedule
func (mr *MockschedulerMockRecorder) schedule() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "schedule", reflect.TypeOf((*Mockscheduler)(nil).schedule))
}
