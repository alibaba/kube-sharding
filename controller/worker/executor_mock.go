// Code generated by MockGen. DO NOT EDIT.
// Source: controller/worker/executor.go

// Package worker is a generated GoMock package.
package worker

import (
	reflect "reflect"

	gomock "github.com/golang/mock/gomock"
	util "github.com/alibaba/kube-sharding/controller/util"
	v1 "github.com/alibaba/kube-sharding/pkg/apis/carbon/v1"
	v10 "k8s.io/api/core/v1"
)

// Mockexecutor is a mock of executor interface.
type Mockexecutor struct {
	ctrl     *gomock.Controller
	recorder *MockexecutorMockRecorder
}

// MockexecutorMockRecorder is the mock recorder for Mockexecutor.
type MockexecutorMockRecorder struct {
	mock *Mockexecutor
}

// NewMockexecutor creates a new mock instance.
func NewMockexecutor(ctrl *gomock.Controller) *Mockexecutor {
	mock := &Mockexecutor{ctrl: ctrl}
	mock.recorder = &MockexecutorMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *Mockexecutor) EXPECT() *MockexecutorMockRecorder {
	return m.recorder
}

// createPod mocks base method.
func (m *Mockexecutor) createPod(pod *v10.Pod) (*v10.Pod, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "createPod", pod)
	ret0, _ := ret[0].(*v10.Pod)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// createPod indicates an expected call of createPod.
func (mr *MockexecutorMockRecorder) createPod(pod interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "createPod", reflect.TypeOf((*Mockexecutor)(nil).createPod), pod)
}

// deletePod mocks base method.
func (m *Mockexecutor) deletePod(pod *v10.Pod, preUpdate bool) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "deletePod", pod, preUpdate)
	ret0, _ := ret[0].(error)
	return ret0
}

// deletePod indicates an expected call of deletePod.
func (mr *MockexecutorMockRecorder) deletePod(pod, preUpdate interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "deletePod", reflect.TypeOf((*Mockexecutor)(nil).deletePod), pod, preUpdate)
}

// patchPod mocks base method.
func (m *Mockexecutor) patchPod(pod *v10.Pod, patch *util.CommonPatch) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "patchPod", pod, patch)
	ret0, _ := ret[0].(error)
	return ret0
}

// patchPod indicates an expected call of patchPod.
func (mr *MockexecutorMockRecorder) patchPod(pod, patch interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "patchPod", reflect.TypeOf((*Mockexecutor)(nil).patchPod), pod, patch)
}

// updatePod mocks base method.
func (m *Mockexecutor) updatePod(worker *v1.WorkerNode, before, after *v10.Pod) (*v10.Pod, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "updatePod", worker, before, after)
	ret0, _ := ret[0].(*v10.Pod)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// updatePod indicates an expected call of updatePod.
func (mr *MockexecutorMockRecorder) updatePod(worker, before, after interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "updatePod", reflect.TypeOf((*Mockexecutor)(nil).updatePod), worker, before, after)
}
